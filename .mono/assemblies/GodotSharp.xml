<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GodotSharp</name>
    </assembly>
    <members>
        <member name="F:Godot.GD.Spkey">
            <summary>
            Scancodes with this bit applied are non printable.
            </summary>
        </member>
        <member name="F:Godot.Margin.Left">
            <summary>
            Left margin, used usually for [Control] or [StyleBox] derived classes.
            </summary>
        </member>
        <member name="F:Godot.Margin.Top">
            <summary>
            Top margin, used usually for [Control] or [StyleBox] derived classes.
            </summary>
        </member>
        <member name="F:Godot.Margin.Right">
            <summary>
            Right margin, used usually for [Control] or [StyleBox] derived classes.
            </summary>
        </member>
        <member name="F:Godot.Margin.Bottom">
            <summary>
            Bottom margin, used usually for [Control] or [StyleBox] derived classes.
            </summary>
        </member>
        <member name="F:Godot.Corner.TopLeft">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Corner.TopRight">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomRight">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Corner.BottomLeft">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Orientation.Vertical">
            <summary>
            General vertical alignment, used usually for [Separator], [ScrollBar], [Slider], etc.
            </summary>
        </member>
        <member name="F:Godot.Orientation.Horizontal">
            <summary>
            General horizontal alignment, used usually for [Separator], [ScrollBar], [Slider], etc.
            </summary>
        </member>
        <member name="F:Godot.HAlign.Left">
            <summary>
            Horizontal left alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.HAlign.Center">
            <summary>
            Horizontal center alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.HAlign.Right">
            <summary>
            Horizontal right alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.VAlign.Top">
            <summary>
            Vertical top alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.VAlign.Center">
            <summary>
            Vertical center alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.VAlign.Bottom">
            <summary>
            Vertical bottom alignment, usually for text-derived classes.
            </summary>
        </member>
        <member name="F:Godot.KeyList.Escape">
            <summary>
            Escape Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Tab">
            <summary>
            Tab Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backtab">
            <summary>
            Shift-Tab Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backspace">
            <summary>
            Backspace Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Enter">
            <summary>
            Return Key (On Main Keyboard)
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpEnter">
            <summary>
            Enter Key (On Numpad)
            </summary>
        </member>
        <member name="F:Godot.KeyList.Insert">
            <summary>
            Insert Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Delete">
            <summary>
            Delete Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pause">
            <summary>
            Pause Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Print">
            <summary>
            Printscreen Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sysreq">
            <summary>
            System Request Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Clear">
            <summary>
            Clear Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Home">
            <summary>
            Home Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.End">
            <summary>
            End Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Left">
            <summary>
            Left Arrow Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Up">
            <summary>
            Up Arrow Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Right">
            <summary>
            Right Arrow Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Down">
            <summary>
            Down Arrow Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pageup">
            <summary>
            Pageup Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Pagedown">
            <summary>
            Pagedown Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Shift">
            <summary>
            Shift Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Control">
            <summary>
            Control Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Meta">
            <summary>
            Meta Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Alt">
            <summary>
            Alt Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Capslock">
            <summary>
            Capslock Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numlock">
            <summary>
            Numlock Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Scrolllock">
            <summary>
            Scrolllock Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F1">
            <summary>
            F1 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F2">
            <summary>
            F2 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F3">
            <summary>
            F3 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F4">
            <summary>
            F4 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F5">
            <summary>
            F5 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F6">
            <summary>
            F6 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F7">
            <summary>
            F7 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F8">
            <summary>
            F8 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F9">
            <summary>
            F9 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F10">
            <summary>
            F10 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F11">
            <summary>
            F11 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F12">
            <summary>
            F12 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F13">
            <summary>
            F13 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F14">
            <summary>
            F14 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F15">
            <summary>
            F15 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F16">
            <summary>
            F16 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpMultiply">
            <summary>
            Multiply Key on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpDivide">
            <summary>
            Divide Key on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpSubtract">
            <summary>
            Subtract Key on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpPeriod">
            <summary>
            Period Key on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.KpAdd">
            <summary>
            Add Key on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp0">
            <summary>
            Number 0 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp1">
            <summary>
            Number 1 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp2">
            <summary>
            Number 2 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp3">
            <summary>
            Number 3 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp4">
            <summary>
            Number 4 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp5">
            <summary>
            Number 5 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp6">
            <summary>
            Number 6 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp7">
            <summary>
            Number 7 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp8">
            <summary>
            Number 8 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.Kp9">
            <summary>
            Number 9 on Numpad
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperL">
            <summary>
            Left Super Key (Windows Key)
            </summary>
        </member>
        <member name="F:Godot.KeyList.SuperR">
            <summary>
            Right Super Key (Windows Key)
            </summary>
        </member>
        <member name="F:Godot.KeyList.Menu">
            <summary>
            Context menu key
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperL">
            <summary>
            Left Hyper Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.HyperR">
            <summary>
            Right Hyper Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Help">
            <summary>
            Help key
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionL">
            <summary>
            Left Direction Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.DirectionR">
            <summary>
            Right Direction Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Back">
            <summary>
            Back key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Forward">
            <summary>
            Forward key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Stop">
            <summary>
            Stop key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Refresh">
            <summary>
            Refresh key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumedown">
            <summary>
            Volume down key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumemute">
            <summary>
            Mute volume key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Volumeup">
            <summary>
            Volume up key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassboost">
            <summary>
            Bass Boost Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassup">
            <summary>
            Bass Up Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bassdown">
            <summary>
            Bass Down Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebleup">
            <summary>
            Treble Up Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Trebledown">
            <summary>
            Treble Down Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaplay">
            <summary>
            Media play key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediastop">
            <summary>
            Media stop key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediaprevious">
            <summary>
            Previous song key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Medianext">
            <summary>
            Next song key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mediarecord">
            <summary>
            Media record key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Homepage">
            <summary>
            Home page key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Favorites">
            <summary>
            Favorites key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Search">
            <summary>
            Search key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Standby">
            <summary>
            Standby Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Openurl">
            <summary>
            Open URL / Launch Browser Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmail">
            <summary>
            Launch Mail Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchmedia">
            <summary>
            Launch Media Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch0">
            <summary>
            Launch Shortcut 0 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch1">
            <summary>
            Launch Shortcut 1 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch2">
            <summary>
            Launch Shortcut 2 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch3">
            <summary>
            Launch Shortcut 3 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch4">
            <summary>
            Launch Shortcut 4 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch5">
            <summary>
            Launch Shortcut 5 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch6">
            <summary>
            Launch Shortcut 6 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch7">
            <summary>
            Launch Shortcut 7 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch8">
            <summary>
            Launch Shortcut 8 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launch9">
            <summary>
            Launch Shortcut 9 Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launcha">
            <summary>
            Launch Shortcut A Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchb">
            <summary>
            Launch Shortcut B Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchc">
            <summary>
            Launch Shortcut C Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchd">
            <summary>
            Launch Shortcut D Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launche">
            <summary>
            Launch Shortcut E Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Launchf">
            <summary>
            Launch Shortcut F Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Unknown">
            <summary>
            Unknown Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Space">
            <summary>
            Space Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclam">
            <summary>
            ! key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quotedbl">
            <summary>
            " key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Numbersign">
            <summary>
            # key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Dollar">
            <summary>
            $ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Percent">
            <summary>
            % key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ampersand">
            <summary>
            &amp; key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Apostrophe">
            <summary>
            ' key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenleft">
            <summary>
            ( key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Parenright">
            <summary>
            ) key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asterisk">
            <summary>
            * key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plus">
            <summary>
            + key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Comma">
            <summary>
            , key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Minus">
            <summary>
            - key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Period">
            <summary>
            . key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Slash">
            <summary>
            / key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key0">
            <summary>
            Number 0
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key1">
            <summary>
            Number 1
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key2">
            <summary>
            Number 2
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key3">
            <summary>
            Number 3
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key4">
            <summary>
            Number 4
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key5">
            <summary>
            Number 5
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key6">
            <summary>
            Number 6
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key7">
            <summary>
            Number 7
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key8">
            <summary>
            Number 8
            </summary>
        </member>
        <member name="F:Godot.KeyList.Key9">
            <summary>
            Number 9
            </summary>
        </member>
        <member name="F:Godot.KeyList.Colon">
            <summary>
            : key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Semicolon">
            <summary>
            ; key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Less">
            <summary>
            Lower than key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Equal">
            <summary>
            = key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Greater">
            <summary>
            Greater than key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Question">
            <summary>
            ? key
            </summary>
        </member>
        <member name="F:Godot.KeyList.At">
            <summary>
            @ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.A">
            <summary>
            A Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.B">
            <summary>
            B Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.C">
            <summary>
            C Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.D">
            <summary>
            D Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.E">
            <summary>
            E Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.F">
            <summary>
            F Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.G">
            <summary>
            G Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.H">
            <summary>
            H Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.I">
            <summary>
            I Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.J">
            <summary>
            J Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.K">
            <summary>
            K Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.L">
            <summary>
            L Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.M">
            <summary>
            M Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.N">
            <summary>
            N Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.O">
            <summary>
            O Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.P">
            <summary>
            P Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Q">
            <summary>
            Q Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.R">
            <summary>
            R Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.S">
            <summary>
            S Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.T">
            <summary>
            T Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.U">
            <summary>
            U Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.V">
            <summary>
            V Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.W">
            <summary>
            W Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.X">
            <summary>
            X Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Y">
            <summary>
            Y Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Z">
            <summary>
            Z Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketleft">
            <summary>
            [ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Backslash">
            <summary>
            \ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bracketright">
            <summary>
            ] key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciicircum">
            <summary>
            ^ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Underscore">
            <summary>
            _ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Quoteleft">
            <summary>
            Left Quote Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceleft">
            <summary>
            { key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Bar">
            <summary>
            | key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Braceright">
            <summary>
            } key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Asciitilde">
            <summary>
            ~ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Nobreakspace">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Exclamdown">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cent">
            <summary>
            ¢ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Sterling">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Currency">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yen">
            <summary>
            Yen Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Brokenbar">
            <summary>
            ¦ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Section">
            <summary>
            § key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Diaeresis">
            <summary>
            ¨ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Copyright">
            <summary>
            © key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ordfeminine">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotleft">
            <summary>
            « key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Notsign">
            <summary>
            » key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Hyphen">
            <summary>
            ‐ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Registered">
            <summary>
            ® key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Macron">
            <summary>
            Macron Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Degree">
            <summary>
            ° key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Plusminus">
            <summary>
            ± key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Twosuperior">
            <summary>
            ² key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threesuperior">
            <summary>
            ³ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acute">
            <summary>
            ´ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Mu">
            <summary>
            µ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Paragraph">
            <summary>
            Paragraph Key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Periodcentered">
            <summary>
            · key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Cedilla">
            <summary>
            ¬ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onesuperior">
            <summary>
            ¹ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Masculine">
            <summary>
            ♂ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Guillemotright">
            <summary>
            » key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onequarter">
            <summary>
            ¼ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Onehalf">
            <summary>
            ½ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Threequarters">
            <summary>
            ¾ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Questiondown">
            <summary>
            ¿ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Agrave">
            <summary>
            à key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aacute">
            <summary>
            á key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Acircumflex">
            <summary>
            â key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Atilde">
            <summary>
            ã key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Adiaeresis">
            <summary>
            ä key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Aring">
            <summary>
            å key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ae">
            <summary>
            æ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ccedilla">
            <summary>
            ç key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Egrave">
            <summary>
            è key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eacute">
            <summary>
            é key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ecircumflex">
            <summary>
            ê key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ediaeresis">
            <summary>
            ë key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Igrave">
            <summary>
            ì key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Iacute">
            <summary>
            í key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Icircumflex">
            <summary>
            î key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Idiaeresis">
            <summary>
            ë key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Eth">
            <summary>
            ð key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ntilde">
            <summary>
            ñ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ograve">
            <summary>
            ò key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Oacute">
            <summary>
            ó key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ocircumflex">
            <summary>
            ô key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Otilde">
            <summary>
            õ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Odiaeresis">
            <summary>
            ö key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Multiply">
            <summary>
            × key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ooblique">
            <summary>
            ø key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ugrave">
            <summary>
            ù key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Uacute">
            <summary>
            ú key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ucircumflex">
            <summary>
            û key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Udiaeresis">
            <summary>
            ü key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Yacute">
            <summary>
            ý key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Thorn">
            <summary>
            þ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ssharp">
            <summary>
            ß key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Division">
            <summary>
            ÷ key
            </summary>
        </member>
        <member name="F:Godot.KeyList.Ydiaeresis">
            <summary>
            ÿ key
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.CodeMask">
            <summary>
            Key Code Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.ModifierMask">
            <summary>
            Modifier Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskShift">
            <summary>
            Shift Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskAlt">
            <summary>
            Alt Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskMeta">
            <summary>
            Meta Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCtrl">
            <summary>
            CTRL Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskCmd">
            <summary>
            CMD Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskKpad">
            <summary>
            Keypad Key Mask
            </summary>
        </member>
        <member name="F:Godot.KeyModifierMask.MaskGroupSwitch">
            <summary>
            Group Switch Key Mask
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Left">
            <summary>
            Left Mouse Button
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Right">
            <summary>
            Right Mouse Button
            </summary>
        </member>
        <member name="F:Godot.ButtonList.Middle">
            <summary>
            Middle Mouse Button
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelUp">
            <summary>
            Mouse wheel up
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelDown">
            <summary>
            Mouse wheel down
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelLeft">
            <summary>
            Mouse wheel left button
            </summary>
        </member>
        <member name="F:Godot.ButtonList.WheelRight">
            <summary>
            Mouse wheel right button
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskLeft">
            <summary>
            Left Mouse Button Mask
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskRight">
            <summary>
            Right Mouse Button Mask
            </summary>
        </member>
        <member name="F:Godot.ButtonList.MaskMiddle">
            <summary>
            Middle Mouse Button Mask
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button0">
            <summary>
            Joypad Button 0
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button1">
            <summary>
            Joypad Button 1
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button2">
            <summary>
            Joypad Button 2
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button3">
            <summary>
            Joypad Button 3
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button4">
            <summary>
            Joypad Button 4
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button5">
            <summary>
            Joypad Button 5
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button6">
            <summary>
            Joypad Button 6
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button7">
            <summary>
            Joypad Button 7
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button8">
            <summary>
            Joypad Button 8
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button9">
            <summary>
            Joypad Button 9
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button10">
            <summary>
            Joypad Button 10
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button11">
            <summary>
            Joypad Button 11
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button12">
            <summary>
            Joypad Button 12
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button13">
            <summary>
            Joypad Button 13
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button14">
            <summary>
            Joypad Button 14
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Button15">
            <summary>
            Joypad Button 15
            </summary>
        </member>
        <member name="F:Godot.JoystickList.ButtonMax">
            <summary>
            Joypad Button 16
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyCircle">
            <summary>
            DUALSHOCK circle button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyX">
            <summary>
            DUALSHOCK X button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonySquare">
            <summary>
            DUALSHOCK square button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.SonyTriangle">
            <summary>
            DUALSHOCK triangle button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxB">
            <summary>
            XBOX controller B button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxA">
            <summary>
            XBOX controller A button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxX">
            <summary>
            XBOX controller X button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.XboxY">
            <summary>
            XBOX controller Y button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsA">
            <summary>
            DualShock controller A button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsB">
            <summary>
            DualShock controller B button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsX">
            <summary>
            DualShock controller X button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DsY">
            <summary>
            DualShock controller Y button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Select">
            <summary>
            Joypad Button Select
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Start">
            <summary>
            Joypad Button Start
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadUp">
            <summary>
            Joypad DPad Up
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadDown">
            <summary>
            Joypad DPad Down
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadLeft">
            <summary>
            Joypad DPad Left
            </summary>
        </member>
        <member name="F:Godot.JoystickList.DpadRight">
            <summary>
            Joypad DPad Right
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L">
            <summary>
            Joypad Left Shoulder Button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L2">
            <summary>
            Joypad Left Trigger
            </summary>
        </member>
        <member name="F:Godot.JoystickList.L3">
            <summary>
            Joypad Left Stick Click
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R">
            <summary>
            Joypad Right Shoulder Button
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R2">
            <summary>
            Joypad Right Trigger
            </summary>
        </member>
        <member name="F:Godot.JoystickList.R3">
            <summary>
            Joypad Right Stick Click
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis0">
            <summary>
            Joypad Left Stick Horizontal Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis1">
            <summary>
            Joypad Left Stick Vertical Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis2">
            <summary>
            Joypad Right Stick Horizontal Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis3">
            <summary>
            Joypad Right Stick Vertical Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis4">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis5">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis6">
            <summary>
            Joypad Left Trigger Analog Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis7">
            <summary>
            Joypad Right Trigger Analog Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis8">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.Axis9">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AxisMax">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogLx">
            <summary>
            Joypad Left Stick Horizontal Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogLy">
            <summary>
            Joypad Left Stick Vertical Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogRx">
            <summary>
            Joypad Right Stick Horizontal Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogRy">
            <summary>
            Joypad Right Stick Vertical Axis
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogL2">
            <summary>
            Joypad Left Analog Trigger
            </summary>
        </member>
        <member name="F:Godot.JoystickList.AnalogR2">
            <summary>
            Joypad Right Analog Trigger
            </summary>
        </member>
        <member name="F:Godot.Error.Ok">
            <summary>
            Functions that return Error return OK when no error occurred. Most functions don't return errors and/or just print errors to STDOUT.
            </summary>
        </member>
        <member name="F:Godot.Error.Failed">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Godot.Error.Unavailable">
            <summary>
            Unavailable error
            </summary>
        </member>
        <member name="F:Godot.Error.Unconfigured">
            <summary>
            Unconfigured error
            </summary>
        </member>
        <member name="F:Godot.Error.Unauthorized">
            <summary>
            Unauthorized error
            </summary>
        </member>
        <member name="F:Godot.Error.ParameterRangeError">
            <summary>
            Parameter range error
            </summary>
        </member>
        <member name="F:Godot.Error.OutOfMemory">
            <summary>
            Out of memory (OOM) error
            </summary>
        </member>
        <member name="F:Godot.Error.FileNotFound">
            <summary>
            File: Not found error
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadDrive">
            <summary>
            File: Bad drive error
            </summary>
        </member>
        <member name="F:Godot.Error.FileBadPath">
            <summary>
            File: Bad path error
            </summary>
        </member>
        <member name="F:Godot.Error.FileNoPermission">
            <summary>
            File: No permission error
            </summary>
        </member>
        <member name="F:Godot.Error.FileAlreadyInUse">
            <summary>
            File: Already in use error
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantOpen">
            <summary>
            File: Can't open error
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantWrite">
            <summary>
            File: Can't write error
            </summary>
        </member>
        <member name="F:Godot.Error.FileCantRead">
            <summary>
            File: Can't read error
            </summary>
        </member>
        <member name="F:Godot.Error.FileUnrecognized">
            <summary>
            File: Unrecognized error
            </summary>
        </member>
        <member name="F:Godot.Error.FileCorrupt">
            <summary>
            File: Corrupt error
            </summary>
        </member>
        <member name="F:Godot.Error.FileMissingDependencies">
            <summary>
            File: Missing dependencies error
            </summary>
        </member>
        <member name="F:Godot.Error.FileEof">
            <summary>
            File: End of file (EOF) error
            </summary>
        </member>
        <member name="F:Godot.Error.CantOpen">
            <summary>
            Can't open error
            </summary>
        </member>
        <member name="F:Godot.Error.CantCreate">
            <summary>
            Can't create error
            </summary>
        </member>
        <member name="F:Godot.Error.ParseError">
            <summary>
            Parse error
            </summary>
        </member>
        <member name="F:Godot.Error.QueryFailed">
            <summary>
            Query failed error
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyInUse">
            <summary>
            Already in use error
            </summary>
        </member>
        <member name="F:Godot.Error.Locked">
            <summary>
            Locked error
            </summary>
        </member>
        <member name="F:Godot.Error.Timeout">
            <summary>
            Timeout error
            </summary>
        </member>
        <member name="F:Godot.Error.CantAcquireResource">
            <summary>
            Can't acquire resource error
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidData">
            <summary>
            Invalid data error
            </summary>
        </member>
        <member name="F:Godot.Error.InvalidParameter">
            <summary>
            Invalid parameter error
            </summary>
        </member>
        <member name="F:Godot.Error.AlreadyExists">
            <summary>
            Already exists error
            </summary>
        </member>
        <member name="F:Godot.Error.DoesNotExist">
            <summary>
            Does not exist error
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantRead">
            <summary>
            Database: Read error
            </summary>
        </member>
        <member name="F:Godot.Error.DatabaseCantWrite">
            <summary>
            Database: Write error
            </summary>
        </member>
        <member name="F:Godot.Error.CompilationFailed">
            <summary>
            Compilation failed error
            </summary>
        </member>
        <member name="F:Godot.Error.MethodNotFound">
            <summary>
            Method not found error
            </summary>
        </member>
        <member name="F:Godot.Error.LinkFailed">
            <summary>
            Linking failed error
            </summary>
        </member>
        <member name="F:Godot.Error.ScriptFailed">
            <summary>
            Script failed error
            </summary>
        </member>
        <member name="F:Godot.Error.CyclicLink">
            <summary>
            Cycling link (import cycle) error
            </summary>
        </member>
        <member name="F:Godot.Error.Busy">
            <summary>
            Busy error
            </summary>
        </member>
        <member name="F:Godot.Error.Help">
            <summary>
            Help error
            </summary>
        </member>
        <member name="F:Godot.Error.Bug">
            <summary>
            Bug error
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.None">
            <summary>
            No hint for edited property.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Range">
            <summary>
            Hints that the string is a range, defined as "min,max" or "min,max,step". This is valid for integers and floats.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpRange">
            <summary>
            Hints that the string is an exponential range, defined as "min,max" or "min,max,step". This is valid for integers and floats.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Enum">
            <summary>
            Property hint for an enumerated value, like "Hello,Something,Else". This is valid for integer, float and string properties.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ExpEasing">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Length">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.KeyAccel">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Flags">
            <summary>
            Property hint for a bitmask description, for bits 0,1,2,3 and 5 the hint would be like "Bit0,Bit1,Bit2,Bit3,,Bit5". Valid only for integers.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dRender">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers2dPhysics">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dRender">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Layers3dPhysics">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.File">
            <summary>
            String property is a file (so pop up a file dialog when edited). Hint string can be a set of wildcards like "*.doc".
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.Dir">
            <summary>
            String property is a directory (so pop up a file dialog when edited).
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalFile">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.GlobalDir">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ResourceType">
            <summary>
            String property is a resource, so open the resource popup menu when edited.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.MultilineText">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ColorNoAlpha">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossy">
            <summary>
            Hints that the image is compressed using lossy compression.
            </summary>
        </member>
        <member name="F:Godot.PropertyHint.ImageCompressLossless">
            <summary>
            Hints that the image is compressed using lossless compression.
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Storage">
            <summary>
            Property will be used as storage (default).
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Editor">
            <summary>
            Property will be visible in editor (default).
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Network">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.EditorHelper">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checkable">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Checked">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Internationalized">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Group">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Category">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.StoreIfNonzero">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.StoreIfNonone">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.NoInstanceState">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.RestartIfChanged">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.ScriptVariable">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Default">
            <summary>
            Default usage (storage and editor).
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.DefaultIntl">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.PropertyUsageFlags.Noeditor">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Normal">
            <summary>
            Flag for normal method
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Editor">
            <summary>
            Flag for editor method
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Noscript">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Const">
            <summary>
            Flag for constant method
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Reverse">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.Virtual">
            <summary>
            Flag for virtual method
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.FromScript">
            <summary>
            Flag for method from script
            </summary>
        </member>
        <member name="F:Godot.MethodFlags.sDefault">
            <summary>
            Default method flags
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Nil">
            <summary>
            Variable is of type nil (only applied for null).
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Bool">
            <summary>
            Variable is of type [bool].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Int">
            <summary>
            Variable is of type [int].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Real">
            <summary>
            Variable is of type [float]/real.
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.String">
            <summary>
            Variable is of type [String].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2">
            <summary>
            Variable is of type [Vector2].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rect2">
            <summary>
            Variable is of type [Rect2].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3">
            <summary>
            Variable is of type [Vector3].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform2d">
            <summary>
            Variable is of type [Transform2D].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Plane">
            <summary>
            Variable is of type [Plane].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Quat">
            <summary>
            Variable is of type [Quat].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Aabb">
            <summary>
            Variable is of type [AABB].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Basis">
            <summary>
            Variable is of type [Basis].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Transform">
            <summary>
            Variable is of type [Transform].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Color">
            <summary>
            Variable is of type [Color].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.NodePath">
            <summary>
            Variable is of type [NodePath].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Rid">
            <summary>
            Variable is of type [RID].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Object">
            <summary>
            Variable is of type [Object].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Dictionary">
            <summary>
            Variable is of type [Dictionary].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Array">
            <summary>
            Variable is of type [Array].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.RawArray">
            <summary>
            Variable is of type [PoolByteArray].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.IntArray">
            <summary>
            Variable is of type [PoolIntArray].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.RealArray">
            <summary>
            Variable is of type [PoolRealArray].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.StringArray">
            <summary>
            Variable is of type [PoolStringArray].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector2Array">
            <summary>
            Variable is of type [PoolVector2Array].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Vector3Array">
            <summary>
            Variable is of type [PoolVector3Array].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.ColorArray">
            <summary>
            Variable is of type [PoolColorArray].
            </summary>
        </member>
        <member name="F:Godot.Variant.Type.Max">
            <summary>
            Marker for end of type constants.
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Equal">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.NotEqual">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Less">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.LessEqual">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Greater">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.GreaterEqual">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Add">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Subtract">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Multiply">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Divide">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Negate">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Positive">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Module">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.StringConcat">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftLeft">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.ShiftRight">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitAnd">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitOr">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitXor">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.BitNegate">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.And">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Or">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Xor">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Not">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.In">
            <summary>
            </summary>
        </member>
        <member name="F:Godot.Variant.Operator.Max">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StringExtensions.Length(System.String)">
            <summary>
            Return the length of the string in characters.
            </summary>
        </member>
        <member name="T:Godot.AcceptDialog">
            <summary>
            This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result.
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogText">
            <summary>
            The text displayed by this dialog.
            </summary>
        </member>
        <member name="P:Godot.AcceptDialog.DialogHideOnOk">
            <summary>
            If [code]true[/code] the dialog is hidden when accepted. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetOk">
            <summary>
            Return the OK Button.
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.GetLabel">
            <summary>
            Return the label used for built-in text.
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddButton(System.String,System.Boolean,System.String)">
            <summary>
            Adds a button with label [i]text[/i] and a custom [i]action[/i] to the dialog and returns the created button. [i]action[/i] will be passed to the [custom_action] signal when pressed.
            If [code]true[/code], [i]right[/i] will place the button to the right of any sibling buttons. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.AddCancel(System.String)">
            <summary>
            Adds a button with label [i]name[/i] and a cancel action to the dialog and returns the created button.
            </summary>
        </member>
        <member name="M:Godot.AcceptDialog.RegisterTextEnter(Godot.Node)">
            <summary>
            Registers a [LineEdit] in the dialog. When the enter key is pressed, the dialog will be accepted.
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite">
            <summary>
            Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Frames">
            <summary>
            The [SpriteFrames] resource containing the animation(s).
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Animation">
            <summary>
            The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Frame">
            <summary>
            The displayed animation frame's index.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Playing">
            <summary>
            If [code]true[/code] the [member animation] is currently playing.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Centered">
            <summary>
            If [code]true[/code] texture will be centered. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.Offset">
            <summary>
            The texture's drawing offset.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.FlipH">
            <summary>
            If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite.FlipV">
            <summary>
            If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.Play(System.String)">
            <summary>
            Play the animation set in parameter. If no parameter is provided, the current animation is played.
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.Stop">
            <summary>
            Stop the current animation (does not reset the frame counter).
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite.IsPlaying">
            <summary>
            Return true if an animation if currently being played.
            </summary>
        </member>
        <member name="T:Godot.AnimatedSprite3D">
            <summary>
            Animations are created using a [SpriteFrames] resource, which can be configured in the editor via the SpriteFrames panel.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frames">
            <summary>
            The [SpriteFrames] resource containing the animation(s).
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Animation">
            <summary>
            The current animation from the [code]frames[/code] resource. If this value changes, the [code]frame[/code] counter is reset.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Frame">
            <summary>
            The displayed animation frame's index.
            </summary>
        </member>
        <member name="P:Godot.AnimatedSprite3D.Playing">
            <summary>
            If [code]true[/code] the [member animation] is currently playing.
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Play(System.String)">
            <summary>
            Play the animation set in parameter. If no parameter is provided, the current animation is played.
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.Stop">
            <summary>
            Stop the current animation (does not reset the frame counter).
            </summary>
        </member>
        <member name="M:Godot.AnimatedSprite3D.IsPlaying">
            <summary>
            Return true if an animation if currently being played.
            </summary>
        </member>
        <member name="T:Godot.Animation">
            <summary>
            An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.
            Animations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.
            </summary>
        </member>
        <member name="P:Godot.Animation.Length">
            <summary>
            The total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.
            </summary>
        </member>
        <member name="P:Godot.Animation.Loop">
            <summary>
            A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation.
            </summary>
        </member>
        <member name="P:Godot.Animation.Step">
            <summary>
            The animation step value.
            </summary>
        </member>
        <member name="M:Godot.Animation.AddTrack(Godot.Animation.TrackType,System.Int32)">
            <summary>
            Add a track to the Animation. The track type must be specified as any of the values in the TYPE_* enumeration.
            </summary>
        </member>
        <member name="M:Godot.Animation.RemoveTrack(System.Int32)">
            <summary>
            Remove a track by specifying the track index.
            </summary>
        </member>
        <member name="M:Godot.Animation.GetTrackCount">
            <summary>
            Return the amount of tracks in the animation.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetType(System.Int32)">
            <summary>
            Get the type of a track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetPath(System.Int32)">
            <summary>
            Get the path of a track. for more information on the path format, see [method track_set_path]
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetPath(System.Int32,Godot.NodePath)">
            <summary>
            Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by ":". Example: "character/skeleton:ankle" or "character/mesh:transform/local"
            </summary>
        </member>
        <member name="M:Godot.Animation.FindTrack(Godot.NodePath)">
            <summary>
            Return the index of the specified track. If the track is not found, return -1.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveUp(System.Int32)">
            <summary>
            Move a track up.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackMoveDown(System.Int32)">
            <summary>
            Move a track down.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetImported(System.Int32,System.Boolean)">
            <summary>
            Set the given track as imported or not.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsImported(System.Int32)">
            <summary>
            Return true if the given track is imported. Else, return false.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetEnabled(System.Int32,System.Boolean)">
            <summary>
            Enables/disables the given track. Tracks are enabled by default.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackIsEnabled(System.Int32)">
            <summary>
            Returns [code]true[/code] if the track at index [code]idx[/code] is enabled.
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInsertKey(System.Int32,System.Single,Godot.Vector3,Godot.Quat,Godot.Vector3)">
            <summary>
            Insert a transform key for a transform track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackInsertKey(System.Int32,System.Single,System.Object,System.Single)">
            <summary>
            Insert a generic key in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKey(System.Int32,System.Int32)">
            <summary>
            Remove a key by index in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackRemoveKeyAtPosition(System.Int32,System.Single)">
            <summary>
            Remove a key by position (seconds) in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Set the value of an existing key.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetKeyTransition(System.Int32,System.Int32,System.Single)">
            <summary>
            Set the transition curve (easing) for a specific key (see built-in math function "ease").
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTransition(System.Int32,System.Int32)">
            <summary>
            Return the transition curve (easing) for a specific key (see built-in math function "ease").
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyCount(System.Int32)">
            <summary>
            Return the amount of keys in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyValue(System.Int32,System.Int32)">
            <summary>
            Return the value of a given key in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetKeyTime(System.Int32,System.Int32)">
            <summary>
            Return the time at which the key is located.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackFindKey(System.Int32,System.Single,System.Boolean)">
            <summary>
            Find the key index by time in a given track. Optionally, only find it if the exact time is given.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationType(System.Int32,Godot.Animation.InterpolationType)">
            <summary>
            Set the interpolation type of a given track, from the INTERPOLATION_* enum.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationType(System.Int32)">
            <summary>
            Return the interpolation type of a given track, from the INTERPOLATION_* enum.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackSetInterpolationLoopWrap(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the track at [code]idx[/code] wraps the interpolation loop.
            </summary>
        </member>
        <member name="M:Godot.Animation.TrackGetInterpolationLoopWrap(System.Int32)">
            <summary>
            Returns [code]true[/code] if the track at [code]idx[/code] wraps the interpolation loop. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.Animation.TransformTrackInterpolate(System.Int32,System.Single)">
            <summary>
            Return the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position ([Vector3]), rotation ([Quat]) and scale ([Vector3]).
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackSetUpdateMode(System.Int32,Godot.Animation.UpdateMode)">
            <summary>
            Set the update mode (UPDATE_*) of a value track.
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetUpdateMode(System.Int32)">
            <summary>
            Return the update mode of a value track.
            </summary>
        </member>
        <member name="M:Godot.Animation.ValueTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            Return all the key indices of a value track, given a position and delta time.
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetKeyIndices(System.Int32,System.Single,System.Single)">
            <summary>
            Return all the key indices of a method track, given a position and delta time.
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetName(System.Int32,System.Int32)">
            <summary>
            Return the method name of a method track.
            </summary>
        </member>
        <member name="M:Godot.Animation.MethodTrackGetParams(System.Int32,System.Int32)">
            <summary>
            Return the arguments values to be called on a method track for a given key in a given track.
            </summary>
        </member>
        <member name="M:Godot.Animation.Clear">
            <summary>
            Clear the animation (clear all tracks and reset all).
            </summary>
        </member>
        <member name="M:Godot.Animation.CopyTrack(System.Int32,Godot.Animation)">
            <summary>
            Adds a new track that is a copy of the given track from [code]to_animation[/code].
            </summary>
        </member>
        <member name="T:Godot.AnimationPlayer">
            <summary>
            An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.RootNode">
            <summary>
            The node from which node path references will travel. Default value: [code]".."[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimation">
            <summary>
            The name of the current animation, "" if not playing anything. When being set, does not restart the animation. See also [method play]. Default value: [code]""[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.AssignedAnimation">
            <summary>
            If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also [member current_animation].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.Autoplay">
            <summary>
            The name of the animation to play when the scene loads. Default value: [code]""[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationLength">
            <summary>
            The length (in seconds) of the currently being played animation.
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.CurrentAnimationPosition">
            <summary>
            The position (in seconds) of the currently playing animation.
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackProcessMode">
            <summary>
            The process notification in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackDefaultBlendTime">
            <summary>
            The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackActive">
            <summary>
            If [code]true[/code], updates animations in response to process-related notifications. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.AnimationPlayer.PlaybackSpeed">
            <summary>
            The speed scaling ratio. For instance, if this value is 1 then the animation plays at normal speed. If it's 0.5 then it plays at half speed. If it's 2 then it plays at double speed. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AddAnimation(System.String,Godot.Animation)">
            <summary>
            Adds [code]animation[/code] to the player accessible with the key [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RemoveAnimation(System.String)">
            <summary>
            Remove the animation with key [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.RenameAnimation(System.String,System.String)">
            <summary>
            Rename an existing animation with key [code]name[/code] to [code]newname[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.HasAnimation(System.String)">
            <summary>
            Returns [code]true[/code] if the [code]AnimationPlayer[/code] stores an [Animation] with key [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimation(System.String)">
            <summary>
            Returns the [Animation] with key [code]name[/code] or [code]null[/code] if not found.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetAnimationList">
            <summary>
            Returns the list of stored animation names.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationSetNext(System.String,System.String)">
            <summary>
            Triggers the [code]anim_to[/code] animation when the [code]anim_from[/code] animation completes.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.AnimationGetNext(System.String)">
            <summary>
            Returns the name of the next animation in the queue.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.SetBlendTime(System.String,System.String,System.Single)">
            <summary>
            Specify a blend time (in seconds) between two animations, referenced by their names.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.GetBlendTime(System.String,System.String)">
            <summary>
            Get the blend time (in seconds) between two animations, referenced by their names.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Play(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Play the animation with key [code]name[/code]. Custom speed and blend times can be set. If custom speed is negative (-1), 'from_end' being true can play the animation backwards.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.PlayBackwards(System.String,System.Single)">
            <summary>
            Play the animation with key [code]name[/code] in reverse.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Stop(System.Boolean)">
            <summary>
            Stop the currently playing animation. If [code]reset[/code] is [code]true[/code], the anim position is reset to [code]0[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.IsPlaying">
            <summary>
            Returns [code]true[/code] if playing an animation.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Queue(System.String)">
            <summary>
            Queue an animation for playback once the current one is done.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearQueue">
            <summary>
            Clears all queued, unplayed animations.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.FindAnimation(Godot.Animation)">
            <summary>
            Returns the name of [code]animation[/code] or empty string if not found.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.ClearCaches">
            <summary>
            [code]AnimationPlayer[/code] caches animated nodes. It may not notice if a node disappears, so clear_caches forces it to update the cache again.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Seek(System.Single,System.Boolean)">
            <summary>
            Seek the animation to the [code]seconds[/code] point in time (in seconds). If [code]update[/code] is [code]true[/code], the animation updates too, otherwise it updates at process time.
            </summary>
        </member>
        <member name="M:Godot.AnimationPlayer.Advance(System.Single)">
            <summary>
            Shifts position in the animation timeline. Delta is the time in seconds to shift.
            </summary>
        </member>
        <member name="T:Godot.AnimationTreePlayer">
            <summary>
            A node graph tool for blending multiple animations bound to an [AnimationPlayer]. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.
            It takes [Animation]s from an [AnimationPlayer] node and mixes them depending on the graph.
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.PlaybackProcessMode">
            <summary>
            The thread in which to update animations. Default value: [enum ANIMATION_PROCESS_IDLE].
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.MasterPlayer">
            <summary>
            The path to the [AnimationPlayer] from which this [code]AnimationTreePlayer[/code] binds animations to animation nodes.
            Once set, Animation nodes can be added to the AnimationTreePlayer.
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.BasePath">
            <summary>
            The node from which to relatively access other nodes. Default value: [code]".."[/code].
            It accesses the Bones, so it should point to the same Node the AnimationPlayer would point its Root Node at.
            </summary>
        </member>
        <member name="P:Godot.AnimationTreePlayer.Active">
            <summary>
            If [code]true[/code] the [code]AnimationTreePlayer[/code] is able to play animations. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AddNode(Godot.AnimationTreePlayer.NodeType,System.String)">
            <summary>
            Adds a [code]type[/code] node to the graph with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeExists(System.String)">
            <summary>
            Check if a node exists (by name).
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeRename(System.String,System.String)">
            <summary>
            Rename a node in the graph.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetType(System.String)">
            <summary>
            Get the node type, will return from NODE_* enum.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetInputCount(System.String)">
            <summary>
            Return the input count for a given node. Different types of nodes have different amount of inputs.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetInputSource(System.String,System.Int32)">
            <summary>
            Return the input source for a given node input.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetAnimation(System.String,Godot.Animation)">
            <summary>
            Binds a new [Animation] from the [member master_player] to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeGetAnimation(System.String)">
            <summary>
            Returns the [AnimationPlayer]'s [Animation] bound to the [code]AnimationTreePlayer[/code]'s animation node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetMasterAnimation(System.String,System.String)">
            <summary>
            Binds the [Animation] named [code]source[/code] from [member master_player] to the animation node [code]id[/code]. Recalculates caches.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeGetMasterAnimation(System.String)">
            <summary>
            Returns the name of the [member master_player]'s [Animation] bound to this animation node.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AnimationNodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], the animation node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFadeinTime(System.String,System.Single)">
            <summary>
            Sets fade in time of a OneShot node given its name and value in seconds.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetFadeinTime(System.String)">
            <summary>
            Returns fade in time of a OneShot node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFadeoutTime(System.String,System.Single)">
            <summary>
            Sets fade out time of a OneShot node given its name and value in seconds.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetFadeoutTime(System.String)">
            <summary>
            Returns fade out time of a OneShot node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestart(System.String,System.Boolean)">
            <summary>
            Sets autorestart property of a OneShot node given its name and value.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestartDelay(System.String,System.Single)">
            <summary>
            Sets autorestart delay of a OneShot node given its name and value in seconds.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetAutorestartRandomDelay(System.String,System.Single)">
            <summary>
            Sets autorestart random delay of a OneShot node given its name and value in seconds.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeHasAutorestart(System.String)">
            <summary>
            Returns whether a OneShot node will auto restart given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetAutorestartDelay(System.String)">
            <summary>
            Returns autostart delay of a OneShot node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeGetAutorestartRandomDelay(System.String)">
            <summary>
            Returns autostart random delay of a OneShot node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeStart(System.String)">
            <summary>
            Starts a OneShot node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeStop(System.String)">
            <summary>
            Stops the OneShot node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeIsActive(System.String)">
            <summary>
            Returns whether a OneShot node is active given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.OneshotNodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], the oneshot node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.MixNodeSetAmount(System.String,System.Single)">
            <summary>
            Sets mix amount of a Mix node given its name and value.
            A Mix node adds input b to input a by a the amount given by ratio.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.MixNodeGetAmount(System.String)">
            <summary>
            Returns mix amount of a Mix node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeSetAmount(System.String,System.Single)">
            <summary>
            Sets the blend amount of a Blend2 node given its name and value.
            A Blend2 Node blends two animations with the amount between 0 and 1.
            At 0, Output is input a.
            Towards 1, the influence of a gets lessened, the influence of b gets raised.
            At 1, Output is input b.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeGetAmount(System.String)">
            <summary>
            Returns the blend amount of a Blend2 node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend2NodeSetFilterPath(System.String,Godot.NodePath,System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], the blend2 node with ID [code]id[/code] turns off the track modifying the property at [code]path[/code]. The modified node's children continue to animate.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend3NodeSetAmount(System.String,System.Single)">
            <summary>
            Sets the blend amount of a Blend3 node given its name and value.
            A Blend3 Node blends three animations with the amount between -1 and 1.
            At -1, Output is input b-.
            From -1 to 0, the influence of b- gets lessened, the influence of a gets raised and the influence of b+ is 0.
            At 0, Output is input a.
            From 0 to 1, the influence of a gets lessened, the influence of b+ gets raised and the influence of b+ is 0.
            At 1, Output is input b+.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend3NodeGetAmount(System.String)">
            <summary>
            Returns the blend amount of a Blend3 node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend4NodeSetAmount(System.String,Godot.Vector2)">
            <summary>
            Sets the blend amount of a Blend4 node given its name and value.
            A Blend4 Node blends two pairs of animations.
            The two pairs are blended like blend2 and then added together.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Blend4NodeGetAmount(System.String)">
            <summary>
            Returns the blend amount of a Blend4 node given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimescaleNodeSetScale(System.String,System.Single)">
            <summary>
            Sets the time scale of the TimeScale node with name [code]id[/code] to [code]scale[/code].
            The timescale node is used to speed [Animation]s up if the scale is above 1 or slow them down if it is below 1.
            If applied after a blend or mix, affects all input animations to that blend or mix.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimescaleNodeGetScale(System.String)">
            <summary>
            Returns time scale value of the TimeScale node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TimeseekNodeSeek(System.String,System.Single)">
            <summary>
            Sets the time seek value of the TimeSeek node with name [code]id[/code] to [code]seconds[/code]
            This functions as a seek in the [Animation] or the blend or mix of [Animation]s input in it.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetInputCount(System.String,System.Int32)">
            <summary>
            Resizes the number of inputs available for the transition node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetInputCount(System.String)">
            <summary>
            Returns the number of inputs for the transition node with name [code]id[/code]. You can add inputs by rightclicking on the transition node.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeDeleteInput(System.String,System.Int32)">
            <summary>
            Deletes the input at [code]input_idx[/code] for the transition node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetInputAutoAdvance(System.String,System.Int32,System.Boolean)">
            <summary>
            The transition node with name [code]id[/code] advances to its next input automatically when the input at [code]input_idx[/code] completes.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeHasInputAutoAdvance(System.String,System.Int32)">
            <summary>
            Returns [code]true[/code] if the input at [code]input_idx[/code] on transition node with name [code]id[/code] is set to automatically advance to the next input upon completion.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetXfadeTime(System.String,System.Single)">
            <summary>
            The transition node with name [code]id[/code] sets its cross fade time to [code]time_sec[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetXfadeTime(System.String)">
            <summary>
            Returns the cross fade time for the transition node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeSetCurrent(System.String,System.Int32)">
            <summary>
            The transition node with name [code]id[/code] sets its current input at [code]input_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.TransitionNodeGetCurrent(System.String)">
            <summary>
            Returns the index of the currently evaluated input for the transition node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeSetPosition(System.String,Godot.Vector2)">
            <summary>
            Sets position of a node in the graph given its name and position.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.NodeGetPosition(System.String)">
            <summary>
            Returns position of a node in the graph given its name.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.RemoveNode(System.String)">
            <summary>
            Removes the animation node with name [code]id[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.ConnectNodes(System.String,System.String,System.Int32)">
            <summary>
            Connects node [code]id[/code] to [code]dst_id[/code] at the specified input slot.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.AreNodesConnected(System.String,System.String,System.Int32)">
            <summary>
            Returns whether node [code]id[/code] and [code]dst_id[/code] are connected at the specified slot.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.DisconnectNodes(System.String,System.Int32)">
            <summary>
            Disconnects nodes connected to [code]id[/code] at the specified input slot.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.GetNodeList">
            <summary>
            Returns a [PoolStringArray] containing the name of all nodes.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Advance(System.Single)">
            <summary>
            Shifts position in the animation timeline. Delta is the time in seconds to shift.
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.Reset">
            <summary>
            Resets this [code]AnimationTreePlayer[/code].
            </summary>
        </member>
        <member name="M:Godot.AnimationTreePlayer.RecomputeCaches">
            <summary>
            Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state.
            </summary>
        </member>
        <member name="T:Godot.Area">
            <summary>
            3D area that detects [CollisionObject] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).
            </summary>
        </member>
        <member name="P:Godot.Area.SpaceOverride">
            <summary>
            Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.Area.GravityPoint">
            <summary>
            If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Area.GravityDistanceScale">
            <summary>
            The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.
            </summary>
        </member>
        <member name="P:Godot.Area.GravityVec">
            <summary>
            The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction.
            </summary>
        </member>
        <member name="P:Godot.Area.Gravity">
            <summary>
            The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.
            </summary>
        </member>
        <member name="P:Godot.Area.LinearDamp">
            <summary>
            The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).
            </summary>
        </member>
        <member name="P:Godot.Area.AngularDamp">
            <summary>
            The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).
            </summary>
        </member>
        <member name="P:Godot.Area.Priority">
            <summary>
            The area's priority. Higher priority areas are processed first. Default value: 0.
            </summary>
        </member>
        <member name="P:Godot.Area.Monitoring">
            <summary>
            If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Area.Monitorable">
            <summary>
            If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Area.CollisionLayer">
            <summary>
            The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code].
            </summary>
        </member>
        <member name="P:Godot.Area.CollisionMask">
            <summary>
            The physics layers this area scans to determine collision detection.
            </summary>
        </member>
        <member name="P:Godot.Area.AudioBusOverride">
            <summary>
            If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Area.AudioBusName">
            <summary>
            The name of the area's audio bus.
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusEnable">
            <summary>
            If [code]true[/code] the area applies reverb to its associated audio.
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusName">
            <summary>
            The reverb bus name to use for this area's associated audio.
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusAmount">
            <summary>
            The degree to which this area applies reverb to its associated audio. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.
            </summary>
        </member>
        <member name="P:Godot.Area.ReverbBusUniformity">
            <summary>
            The degree to which this area's reverb is a uniform effect. Ranges from [code]0[/code] to [code]1[/code] with [code]0.1[/code] precision.
            </summary>
        </member>
        <member name="M:Godot.Area.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This simplifies editing which [code]Area[/code] layers this [code]Area[/code] scans.
            </summary>
        </member>
        <member name="M:Godot.Area.GetCollisionMaskBit(System.Int32)">
            <summary>
            Returns an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:Godot.Area.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This simplifies editing this [code]Area[code]'s layers.
            </summary>
        </member>
        <member name="M:Godot.Area.GetCollisionLayerBit(System.Int32)">
            <summary>
            Returns an individual bit on the layer mask.
            </summary>
        </member>
        <member name="M:Godot.Area.GetOverlappingBodies">
            <summary>
            Returns a list of intersecting [PhysicsBody]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area.GetOverlappingAreas">
            <summary>
            Returns a list of intersecting [code]Area[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area.OverlapsBody(Godot.Node)">
            <summary>
            If [code]true[/code] the given body overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area.OverlapsArea(Godot.Node)">
            <summary>
            If [code]true[/code] the given area overlaps the Area. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="T:Godot.Area2D">
            <summary>
            2D area that detects [CollisionObject2D] nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping).
            </summary>
        </member>
        <member name="P:Godot.Area2D.SpaceOverride">
            <summary>
            Override mode for gravity and damping calculations within this area. See the SPACE_OVERRIDE_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityPoint">
            <summary>
            If [code]true[/code] gravity is calculated from a point (set via [code]gravity_vec[/code]). Also see [code]space_override[/code]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityDistanceScale">
            <summary>
            The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance.
            </summary>
        </member>
        <member name="P:Godot.Area2D.GravityVec">
            <summary>
            The area's gravity vector (not normalized). If gravity is a point (see [method is_gravity_a_point]), this will be the point of attraction.
            </summary>
        </member>
        <member name="P:Godot.Area2D.Gravity">
            <summary>
            The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction.
            </summary>
        </member>
        <member name="P:Godot.Area2D.LinearDamp">
            <summary>
            The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).
            </summary>
        </member>
        <member name="P:Godot.Area2D.AngularDamp">
            <summary>
            The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from [code]0[/code] (no damping) to [code]1[/code] (full damping).
            </summary>
        </member>
        <member name="P:Godot.Area2D.Priority">
            <summary>
            The area's priority. Higher priority areas are processed first. Default value: 0.
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitoring">
            <summary>
            If [code]true[/code] the area detects bodies or areas entering and exiting it. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Area2D.Monitorable">
            <summary>
            If [code]true[/code] other monitoring areas can detect this area. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionLayer">
            <summary>
            The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also [code]collision_mask[/code].
            </summary>
        </member>
        <member name="P:Godot.Area2D.CollisionMask">
            <summary>
            The physics layers this area scans to determine collision detection.
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusOverride">
            <summary>
            If [code]true[/code] the area's audio bus overrides the default audio bus. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Area2D.AudioBusName">
            <summary>
            The name of the area's audio bus.
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask. Describes whether this area will collide with others on the given layer.
            </summary>
        </member>
        <member name="M:Godot.Area2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier.
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            Return an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer.
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingBodies">
            <summary>
            Returns a list of intersecting [PhysicsBody2D]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area2D.GetOverlappingAreas">
            <summary>
            Returns a list of intersecting [code]Area2D[/code]s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsBody(Godot.Node)">
            <summary>
            If [code]true[/code] the given body overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="M:Godot.Area2D.OverlapsArea(Godot.Node)">
            <summary>
            If [code]true[/code] the given area overlaps the Area2D. Note that the result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.BlendShapeMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ArrayMesh.CustomAabb">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddBlendShape(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetBlendShapeName(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.ClearBlendShapes">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.AddSurfaceFromArrays(Godot.Mesh.PrimitiveType,System.Object[],System.Object[],System.Int32)">
            <summary>
            Creates a new surface.
            Surfaces are created to be rendered using a "primitive", which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. See [Mesh] for details. (As a note, when using indices, it is recommended to only use points, lines or triangles). [method get_surface_count] will become the surf_idx for this new surface.
            The [code]arrays[/code] argument is an array of arrays. See [enum ArrayType] for the values used in this array. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [code]ARRAY_INDEX[/code] if it is used.
            Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices.
            Godot uses clockwise winding order for front faces of triangle primitive modes.
            &lt;param name="blendShapes"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.GetSurfaceCount">
            <summary>
            Return the amount of surfaces that the [code]ArrayMesh[/code] holds.
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceRemove(System.Int32)">
            <summary>
            Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceUpdateRegion(System.Int32,System.Int32,System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayLen(System.Int32)">
            <summary>
            Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrayIndexLen(System.Int32)">
            <summary>
            Return the length in indices of the index array in the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetFormat(System.Int32)">
            <summary>
            Return the format mask of the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetPrimitiveType(System.Int32)">
            <summary>
            Return the primitive type of the requested surface (see [method add_surface]).
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceSetMaterial(System.Int32,Godot.Material)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetMaterial(System.Int32)">
            <summary>
            Return a [Material] in a given surface. Surface is rendered using this material.
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceSetName(System.Int32,System.String)">
            <summary>
            Set a [Material] for a given surface. Surface will be rendered using this material.
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetName(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetArrays(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.SurfaceGetBlendShapeArrays(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.CenterGeometry">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.RegenNormalmaps">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ArrayMesh.LightmapUnwrap(Godot.Transform,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ARVRAnchor">
            <summary>
            The ARVR Anchor point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.
            This node is mapped to one of the anchors through its unique id. When you receive a signal that a new anchor is available you should add this node to your scene for that anchor. You can predefine nodes and set the id and the nodes will simply remain on 0,0,0 until a plane is recognised.
            Keep in mind that as long as plane detection is enable the size, placing and orientation of an anchor will be updates as the detection logic learns more about the real world out there especially if only part of the surface is in view.
            </summary>
        </member>
        <member name="P:Godot.ARVRAnchor.AnchorId">
            <summary>
            The anchor's id. You can set this before the anchor itself exists. The first anchor gets an id of [code]1[/code], the second an id of [code]2[/code], etc. When anchors get removed, the engine can then assign the corresponding id to new anchors. The most common situation where anchors 'disappear' is when the AR server identifies that two anchors represent different parts of the same plane and merges them.
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetAnchorName">
            <summary>
            Returns the name given to this anchor.
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetIsActive">
            <summary>
            Returns true if the anchor is being tracked and false if no anchor with this id is currently known.
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetSize">
            <summary>
            Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.
            </summary>
        </member>
        <member name="M:Godot.ARVRAnchor.GetPlane">
            <summary>
            Returns a plane aligned with our anchor, handy for intersection testing
            </summary>
        </member>
        <member name="T:Godot.ARVRCamera">
            <summary>
            This is a helper spatial node for our camera, note that if stereoscopic rendering is applicable (VR-HMD) most of the camera properties are ignored as the HMD information overrides them. The only properties that can be trusted are the near and far planes.
            The position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that in contrast to the ARVR Controller the render thread has access to the most up to date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result.
            </summary>
        </member>
        <member name="T:Godot.ARVRController">
            <summary>
            This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy pass throughs to the state of buttons and such on the controllers.
            Controllers are linked by their id. You can create controller nodes before the controllers are available. Say your game always uses two controllers (one for each hand) you can predefine the controllers with id 1 and 2 and they will become active as soon as the controllers are identified. If you expect additional controllers to be used you should react to the signals and add ARVRController nodes to your scene.
            The position of the controller node is automatically updated by the ARVR Server. This makes this node ideal to add child  nodes to visualise the controller.
            </summary>
        </member>
        <member name="P:Godot.ARVRController.ControllerId">
            <summary>
            The controller's id.
            A controller id of 0 is unbound and will always result in an inactive node. Controller id 1 is reserved for the first controller that identifies itself as the left hand controller and id 2 is reserved for the first controller that identifies itself as the right hand controller.
            For any other controller that the [ARVRServer] detects we continue with controller id 3.
            When a controller is turned off, its slot is freed. This ensures controllers will keep the same id even when controllers with lower ids are turned off.
            </summary>
        </member>
        <member name="P:Godot.ARVRController.Rumble">
            <summary>
            The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code]. If changed, updates [member ARVRPositionalTracker.rumble] accordingly.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetControllerName">
            <summary>
            If active, returns the name of the associated controller if provided by the AR/VR SDK used.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetJoystickId">
            <summary>
            Returns the ID of the joystick object bound to this. Every controller tracked by the ARVR Server that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.IsButtonPressed(System.Int32)">
            <summary>
            Returns [code]true[/code] if the button at index [code]button[/code] is pressed.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetJoystickAxis(System.Int32)">
            <summary>
            Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetIsActive">
            <summary>
            Returns [code]true[/code] if the bound controller is active. ARVR systems attempt to track active controllers.
            </summary>
        </member>
        <member name="M:Godot.ARVRController.GetHand">
            <summary>
            Returns the hand holding this controller, if known. See TRACKER_* constants in [ARVRPositionalTracker].
            </summary>
        </member>
        <member name="T:Godot.ARVRInterface">
            <summary>
            This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.
            Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through ARVRServer.
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.InterfaceIsPrimary">
            <summary>
            Is this our primary interface?
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.InterfaceIsInitialized">
            <summary>
            Has this interface been initialized?
            </summary>
        </member>
        <member name="P:Godot.ARVRInterface.ArIsAnchorDetectionEnabled">
            <summary>
            On an AR interface, is our anchor detection enabled?
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetName">
            <summary>
            Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc).
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetCapabilities">
            <summary>
            Returns a combination of flags providing information about the capabilities of this interface.
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.Initialize">
            <summary>
            Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.
            After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.
            Note that you must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot such as for mobile VR.
            If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively you can add a separate viewport node to your scene and enable AR/VR on that viewport and it will be used to output to the HMD leaving you free to do anything you like in the main window such as using a separate camera as a spectator camera or render out something completely different.
            While currently not used you can activate additional interfaces, you may wish to do this if you want to track controllers from other platforms. However at this point in time only one interface can render to an HMD.
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.Uninitialize">
            <summary>
            Turns the interface off.
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetTrackingStatus">
            <summary>
            If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking.
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.GetRenderTargetsize">
            <summary>
            Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform.
            </summary>
        </member>
        <member name="M:Godot.ARVRInterface.IsStereo">
            <summary>
            Returns true if the current output of this interface is in stereo.
            </summary>
        </member>
        <member name="T:Godot.ARVRInterfaceGDNative">
            <summary>
            This is a wrapper class for GDNative implementations of the ARVR interface. To use a GDNative ARVR interface simply instantiate this object and set your GDNative library containing the ARVR interface implementation.
            </summary>
        </member>
        <member name="T:Godot.ARVROrigin">
            <summary>
            This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.
            There should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.
            It is the position of this node that you update when you're character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.
            So say that your character is driving a car, the ARVROrigin node should be a child node of this car. If you implement a teleport system to move your character, you change the position of this node. Etc.
            </summary>
        </member>
        <member name="P:Godot.ARVROrigin.WorldScale">
            <summary>
            Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.
            Note that this method is a passthrough to the [ARVRServer] itself.
            </summary>
        </member>
        <member name="T:Godot.ARVRPositionalTracker">
            <summary>
            An instance of this object represents a device that is tracked such as a controller or anchor point. HMDs aren't represented here as they are fully handled internally.
            As controllers are turned on and the AR/VR interface detects them instances of this object are automatically added to this list of active tracking objects accessible through the ARVRServer
            The ARVRController and ARVRAnchor both consume objects of this type and should be the objects you use in game. The positional trackers are just the under the hood objects that make this all work and are mostly exposed so GDNative based interfaces can interact with them.
            </summary>
        </member>
        <member name="P:Godot.ARVRPositionalTracker.Rumble">
            <summary>
            The degree to which the tracker rumbles. Ranges from [code]0.0[/code] to [code]1.0[/code] with precision [code].01[/code].
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetType">
            <summary>
            Returns the tracker's type.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetName">
            <summary>
            Returns the controller or anchor point's name if available.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetJoyId">
            <summary>
            If this is a controller that is being tracked the controller will also be represented by a joystick entry with this id.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTracksOrientation">
            <summary>
            Returns [code]true[/code] if this device tracks orientation.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetOrientation">
            <summary>
            Returns the controller's orientation matrix.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTracksPosition">
            <summary>
            Returns [code]true[/code] if this device tracks position.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetPosition">
            <summary>
            Returns the world-space controller position.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetHand">
            <summary>
            Returns the hand holding this tracker, if known. See TRACKER_* constants.
            </summary>
        </member>
        <member name="M:Godot.ARVRPositionalTracker.GetTransform(System.Boolean)">
            <summary>
            Returns the transform combining this device's orientation and position.
            </summary>
        </member>
        <member name="T:Godot.ARVRServer">
            <summary>
            The AR/VR Server is the heart of our AR/VR solution and handles all the processing.
            </summary>
        </member>
        <member name="P:Godot.ARVRServer.WorldScale">
            <summary>
            Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 meter in the real world.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetReferenceFrame">
            <summary>
            Gets our reference frame transform, mostly used internally and exposed for GDNative build interfaces.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.CenterOnHmd(Godot.ARVRServer.RotationMode,System.Boolean)">
            <summary>
            This is a really important function to understand correctly. AR and VR platforms all handle positioning slightly differently.
            For platforms that do not offer spatial tracking our origin point (0,0,0) is the location of our HMD but you have little control over the direction the player is facing in the real world.
            For platforms that do offer spatial tracking our origin point depends very much on the system. For OpenVR our origin point is usually the center of the tracking space, on the ground. For other platforms its often the location of the tracking camera.
            This method allows you to center our tracker on the location of the HMD, it will take the current location of the HMD and use that to adjust all our tracking data in essence realigning the real world to your players current position in your game world.
            For this method to produce usable results tracking information should be available and this often takes a few frames after starting your game.
            You should call this method after a few seconds have passed, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, and when implementing a teleport mechanism.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterfaceCount">
            <summary>
            Get the number of interfaces currently registered with the AR/VR server. If you're game supports multiple AR/VR platforms you can look through the available interface and either present the user with a selection or simply try an initialize each interface and use the first one that returns true.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterface(System.Int32)">
            <summary>
            Get the interface registered at a given index in our list of interfaces.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetInterfaces">
            <summary>
            Returns a list of available interfaces with both id and name of the interface.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.FindInterface(System.String)">
            <summary>
            Find an interface by its name. Say that you're making a game that uses specific capabilities of an AR/VR platform you can find the interface for that platform by name and initialize it.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetTrackerCount">
            <summary>
            Get the number of trackers currently registered.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.GetTracker(System.Int32)">
            <summary>
            Get the positional tracker at the given ID.
            </summary>
        </member>
        <member name="M:Godot.ARVRServer.SetPrimaryInterface(Godot.ARVRInterface)">
            <summary>
            Changes the primary interface to the specified interface. Again mostly exposed for GDNative interfaces.
            </summary>
        </member>
        <member name="T:Godot.AStar">
            <summary>
            A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting an efficiently directed path between multiple points. It enjoys widespread use due to its performance and accuracy. Godot's A* implementation make use of vectors as points.
            You must add points manually with [method AStar.add_point] and create segments manually with [method AStar.connect_points]. So you can test if there is a path between two points with the [method AStar.are_points_connected] function, get the list of existing ids in the found path with [method AStar.get_id_path], or the points list with [method AStar.get_point_path].
            </summary>
        </member>
        <member name="M:Godot.AStar._ComputeCost(System.Int32,System.Int32)">
            <summary>
            Called when computing the cost between two connected points.
            </summary>
        </member>
        <member name="M:Godot.AStar._EstimateCost(System.Int32,System.Int32)">
            <summary>
            Called when estimating the cost between a point and the path's ending point.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetAvailablePointId">
            <summary>
            Returns the next available point id with no point associated to it.
            </summary>
        </member>
        <member name="M:Godot.AStar.AddPoint(System.Int32,Godot.Vector3,System.Single)">
            <summary>
            Adds a new point at the given position with the given identifier. The algorithm prefers points with lower [code]weight_scale[/code] to form a path. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 1 or larger.
            [codeblock]
            var as = AStar.new()
            as.add_point(1, Vector3(1,0,0), 4) # Adds the point (1,0,0) with weight_scale=4 and id=1
            [/codeblock]
            If there already exists a point for the given id, its position and weight scale are updated to the given values.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPosition(System.Int32)">
            <summary>
            Returns the position of the point associated with the given id.
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            Sets the position for the point with the given id.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointWeightScale(System.Int32)">
            <summary>
            Returns the weight scale of the point associated with the given id.
            </summary>
        </member>
        <member name="M:Godot.AStar.SetPointWeightScale(System.Int32,System.Single)">
            <summary>
            Sets the [code]weight_scale[/code] for the point with the given id.
            </summary>
        </member>
        <member name="M:Godot.AStar.RemovePoint(System.Int32)">
            <summary>
            Removes the point associated with the given id from the points pool.
            </summary>
        </member>
        <member name="M:Godot.AStar.HasPoint(System.Int32)">
            <summary>
            Returns whether a point associated with the given id exists.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPoints">
            <summary>
            Returns an array of all points.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointConnections(System.Int32)">
            <summary>
            Returns an array with the ids of the points that form the connect with the given point.
            [codeblock]
            var as = AStar.new()
            as.add_point(1, Vector3(0,0,0))
            as.add_point(2, Vector3(0,1,0))
            as.add_point(3, Vector3(1,1,0))
            as.add_point(4, Vector3(2,0,0))
            as.connect_points(1, 2, true)
            as.connect_points(1, 3, true)
            var neighbors = as.get_point_connections(1) # returns [2, 3]
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.AStar.ConnectPoints(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a segment between the given points.
            [codeblock]
            var as = AStar.new()
            as.add_point(1, Vector3(1,1,0))
            as.add_point(2, Vector3(0,5,0))
            as.connect_points(1, 2, false) # If bidirectional=false it's only possible to go from point 1 to point 2
            # and not from point 2 to point 1.
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.AStar.DisconnectPoints(System.Int32,System.Int32)">
            <summary>
            Deletes the segment between the given points.
            </summary>
        </member>
        <member name="M:Godot.AStar.ArePointsConnected(System.Int32,System.Int32)">
            <summary>
            Returns whether there is a connection/segment between the given points.
            </summary>
        </member>
        <member name="M:Godot.AStar.Clear">
            <summary>
            Clears all the points and segments.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPoint(Godot.Vector3)">
            <summary>
            Returns the id of the closest point to [code]to_position[/code]. Returns -1 if there are no points in the points pool.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetClosestPositionInSegment(Godot.Vector3)">
            <summary>
            Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.
            [codeblock]
            var as = AStar.new()
            as.add_point(1, Vector3(0,0,0))
            as.add_point(2, Vector3(0,5,0))
            as.connect_points(1, 2)
            var res = as.get_closest_position_in_segment(Vector3(3,3,0)) # returns (0, 3, 0)
            [/codeblock]
            The result is in the segment that goes from [code]y=0[/code] to [code]y=5[/code]. It's the closest position in the segment to the given point.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetPointPath(System.Int32,System.Int32)">
            <summary>
            Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.
            </summary>
        </member>
        <member name="M:Godot.AStar.GetIdPath(System.Int32,System.Int32)">
            <summary>
            Returns an array with the ids of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.
            [codeblock]
            var as = AStar.new()
            as.add_point(1, Vector3(0,0,0))
            as.add_point(2, Vector3(0,1,0), 1) # default weight is 1
            as.add_point(3, Vector3(1,1,0))
            as.add_point(4, Vector3(2,0,0))
            as.connect_points(1, 2, false)
            as.connect_points(2, 3, false)
            as.connect_points(4, 3, false)
            as.connect_points(1, 4, false)
            as.connect_points(5, 4, false)
            var res = as.get_id_path(1, 3) # returns [1, 2, 3]
            [/codeblock]
            If you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.
            </summary>
        </member>
        <member name="T:Godot.AtlasTexture">
            <summary>
            [Texture] resource aimed at managing big textures files that pack multiple smaller textures. Consists of a [Texture], a margin that defines the border width,
            and a region that defines the actual area of the AtlasTexture.
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Atlas">
            <summary>
            The texture that contains the atlas. Can be any [Texture] subtype.
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Region">
            <summary>
            The AtlasTexture's used region.
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.Margin">
            <summary>
            The margin around the region. The [Rect2]'s 'size' parameter ('w' and 'h' in the editor) resizes the texture so it fits within the margin.
            </summary>
        </member>
        <member name="P:Godot.AtlasTexture.FilterClip">
            <summary>
            If [code]true[/code] clips the area outside of the region to avoid bleeding of the surrounding texture pixels.
            </summary>
        </member>
        <member name="T:Godot.AudioBusLayout">
            <summary>
            Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between busses. See [AudioServer] for usage.
            </summary>
        </member>
        <member name="T:Godot.AudioEffect">
            <summary>
            Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectAmplify">
            <summary>
            Increases or decreases the volume being routed through the audio bus.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectAmplify.VolumeDb">
            <summary>
            Amount of amplification. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandLimitFilter">
            <summary>
            Limits the frequencies in a range around the [member cutoff_hz] and allows frequencies outside of this range to pass.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectBandPassFilter">
            <summary>
            Attenuates the frequencies inside of a range around the [member cutoff_hz] and cuts frequencies outside of this band.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectChorus">
            <summary>
            Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.VoiceCount">
            <summary>
            The amount of voices in the effect.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Dry">
            <summary>
            The effect's raw signal.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Wet">
            <summary>
            The effect's processed signal.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__delayMs">
            <summary>
            The voice's signal delay.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__rateHz">
            <summary>
            The voice's filter rate.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__depthMs">
            <summary>
            The voice filter's depth.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__levelDb">
            <summary>
            The voice's volume.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__cutoffHz">
            <summary>
            The voice's cutoff frequency.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__1__pan">
            <summary>
            The voice's pan level.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__delayMs">
            <summary>
            The voice's signal delay.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__rateHz">
            <summary>
            The voice's filter rate.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__depthMs">
            <summary>
            The voice filter's depth.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__levelDb">
            <summary>
            The voice's volume.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__cutoffHz">
            <summary>
            The voice's cutoff frequency.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__2__pan">
            <summary>
            The voice's pan level.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__delayMs">
            <summary>
            The voice's signal delay.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__rateHz">
            <summary>
            The voice's filter rate.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__depthMs">
            <summary>
            The voice filter's depth.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__levelDb">
            <summary>
            The voice's volume.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__cutoffHz">
            <summary>
            The voice's cutoff frequency.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__3__pan">
            <summary>
            The voice's pan level.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__delayMs">
            <summary>
            The voice's signal delay.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__rateHz">
            <summary>
            The voice's filter rate.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__depthMs">
            <summary>
            The voice filter's depth.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__levelDb">
            <summary>
            The voice's volume.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__cutoffHz">
            <summary>
            The voice's cutoff frequency.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectChorus.Voice__4__pan">
            <summary>
            The voice's pan level.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectCompressor">
            <summary>
            Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).
            Compressor has many uses in the mix:
            - In the Master bus to compress the whole output (Although a [AudioEffectLimiter] is probably better)
            - In voice channels to ensure they sound as balanced as possible.
            - Sidechained. Sidechained, which can reduce the sound level sidechained with another audio bus for threshold detection.. This technique is very common in video game mixing to download the level of Music/SFX while voices are being heard.
            - Accentuates transients by using a wider attack, making effects sound more punchy.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Threshold">
            <summary>
            The level above which compression is applied to the audio. Value can range from -60 to 0. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Ratio">
            <summary>
            Amount of compression applied to the audio once it passes the threshold level. The higher the ratio the more the loud parts of the audio will be compressed. Value can range from 1 to 48. Default value: [code]4[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Gain">
            <summary>
            Gain applied to the output signal.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.AttackUs">
            <summary>
            Compressor's reaction time when the signal exceeds the threshold. Value can range from 20 to 2000. Default value: [code]20ms[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.ReleaseMs">
            <summary>
            Compressor's delay time to stop reducing the signal after the signal level falls below the threshold. Value can range from 20 to 2000. Default value: [code]250ms[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Mix">
            <summary>
            Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectCompressor.Sidechain">
            <summary>
            Reduce the sound level using another audio bus for threshold detection.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDelay">
            <summary>
            Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Dry">
            <summary>
            Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__active">
            <summary>
            If [code]true[/code], [code]tap1[/code] will be enabled. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__delayMs">
            <summary>
            [b]Tap1[/b] delay time in milliseconds. Default value: [code]250ms[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__levelDb">
            <summary>
            Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap1__pan">
            <summary>
            Pan position for [code]tap1[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]0.2[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__active">
            <summary>
            If [code]true[/code], [code]tap2[/code] will be enabled. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__delayMs">
            <summary>
            [b]Tap2[/b] delay time in milliseconds. Default value: [code]500ms[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__levelDb">
            <summary>
            Sound level for [code]tap2[/code]. Default value: [code]-12 dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Tap2__pan">
            <summary>
            Pan position for [code]tap2[/code]. Value can range from -1 (fully left) to 1 (fully right). Default value: [code]-0.4[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__active">
            <summary>
            If [code]true[/code] feedback is enabled. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__delayMs">
            <summary>
            Feedback delay time in milliseconds. Default value: [code]340[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__levelDb">
            <summary>
            Sound level for [code]tap1[/code]. Default value: [code]-6 dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDelay.Feedback__lowpass">
            <summary>
            Low-pass filter for feedback. Frequencies below the Low Cut value are filtered out of the source signal. Default value: [code]16000[/code].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectDistortion">
            <summary>
            Modify the sound and make it dirty. Different types are available : clip, tan, lofi (bit crushing), overdrive, or waveshape.
            By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Mode">
            <summary>
            Distortion type. Default value: [code]MODE_CLIP[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PreGain">
            <summary>
            Increases or decreases the volume before the effect. Value can range from -60 to 60. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.KeepHfHz">
            <summary>
            High-pass filter. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. Default value: [code]16000[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.Drive">
            <summary>
            Distortion power. Value can range from 0 to 1. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectDistortion.PostGain">
            <summary>
            Increases or decreases the volume after the effect. Value can range from -80 to 24. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ">
            <summary>
            AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQ are very useful on the Master Bus to completely master a mix and give it character. They are also very useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.SetBandGainDb(System.Int32,System.Single)">
            <summary>
            Sets band's gain at the specified index, in dB.
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandGainDb(System.Int32)">
            <summary>
            Returns the band's gain at the specified index, in dB.
            </summary>
        </member>
        <member name="M:Godot.AudioEffectEQ.GetBandCount">
            <summary>
            Returns the number of bands of the equalizer.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ10">
            <summary>
            Frequency bands :
            Band 1 : 31 Hz
            Band 2 : 62 Hz
            Band 3 : 125 Hz
            Band 4 : 250 Hz
            Band 5 : 500 Hz
            Band 6 : 1000 Hz
            Band 7 : 2000 Hz
            Band 8 : 4000 Hz
            Band 9 : 8000 Hz
            Band 10 : 16000 Hz
            See also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ21].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ21">
            <summary>
            Frequency bands :
            Band 1 : 22 Hz
            Band 2 : 32 Hz
            Band 3 : 44 Hz
            Band 4 : 63 Hz
            Band 5 : 90 Hz
            Band 6 : 125 Hz
            Band 7 : 175 Hz
            Band 8 : 250 Hz
            Band 9 : 350 Hz
            Band 10 : 500 Hz
            Band 11 : 700 Hz
            Band 12 : 1000 Hz
            Band 13 : 1400 Hz
            Band 14 : 2000 Hz
            Band 15 : 2800 Hz
            Band 16 : 4000 Hz
            Band 17 : 5600 Hz
            Band 18 : 8000 Hz
            Band 19 : 11000 Hz
            Band 20 : 16000 Hz
            Band 21 : 22000 Hz
            See also [AudioEffectEQ], [AudioEffectEQ6], [AudioEffectEQ10].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectEQ6">
            <summary>
            Frequency bands :
            Band 1 : 32 Hz
            Band 2 : 100 Hz
            Band 3 : 320 Hz
            Band 4 : 1000 Hz
            Band 5 : 3200 Hz
            Band 6 : 10000 Hz
            See also [AudioEffectEQ], [AudioEffectEQ10], [AudioEffectEQ21].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectFilter">
            <summary>
            Allows frequencies other than the [member cutoff_hz] to pass.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.CutoffHz">
            <summary>
            Threshold frequency for the filter.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Resonance">
            <summary>
            Amount of boost in the overtones near the cutoff frequency.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Gain">
            <summary>
            Gain amount of the frequencies after the filter.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectFilter.Db">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectHighPassFilter">
            <summary>
            Cuts frequencies lower than the [member cutoff_hz] and allows higher frequencies to pass.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLimiter">
            <summary>
            A limiter is similar to a compressor, but it’s less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master Bus is always recommended to reduce the effects of clipping.
            Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.CeilingDb">
            <summary>
            The waveform's maximum allowed value. Value can range from -20 to -0.1. Default value: [code]-0.1dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.ThresholdDb">
            <summary>
            Threshold from which the limiter begins to be active. Value can range from -30 to 0. Default value: [code]0dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.SoftClipDb">
            <summary>
            Applies a gain to the limited waves. Value can range from 0 to 6. Default value: [code]2dB[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectLimiter.SoftClipRatio">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.AudioEffectLowPassFilter">
            <summary>
            Cuts frequencies higher than the [member cutoff_hz] and allows lower frequencies to pass.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectNotchFilter">
            <summary>
            Attenuates frequencies in a narrow band around the [member cutoff_hz] and cuts frequencies outside of this range.
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPanner">
            <summary>
            Determines how much of an audio signal is sent to the left and right buses.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPanner.Pan">
            <summary>
            Pan position. Value can range from -1 (fully left) to 1 (fully right).
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPhaser">
            <summary>
            Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a Low Frequency Oscillator.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMinHz">
            <summary>
            Determines the minimum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]440hz[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RangeMaxHz">
            <summary>
            Determines the maximum frequency affected by the LFO modulations. Value can range from 10 to 10000. Default value: [code]1600hz[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.RateHz">
            <summary>
            Adjusts the rate at which the effect sweeps up and down across the frequency range.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Feedback">
            <summary>
            Output percent of modified sound. Value can range from 0.1 to 0.9. Default value: [code]0.7[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPhaser.Depth">
            <summary>
            Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="T:Godot.AudioEffectPitchShift">
            <summary>
            Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectPitchShift.PitchScale">
            <summary>
            Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves).
            </summary>
        </member>
        <member name="T:Godot.AudioEffectReverb">
            <summary>
            Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room.
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayMsec">
            <summary>
            Time between the original signal and the early reflections of the reverb signal. Default value: [code]150ms[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.PredelayFeedback">
            <summary>
            Output percent of predelay. Value can range from 0 to 1. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.RoomSize">
            <summary>
            Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. Default value: [code]0.8[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Damping">
            <summary>
            Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Spread">
            <summary>
            Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Hipass">
            <summary>
            High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Dry">
            <summary>
            Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectReverb.Wet">
            <summary>
            Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. Default value: [code]0.5[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.PanPullout">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.TimePulloutMs">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.AudioEffectStereoEnhance.Surround">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.AudioServer">
            <summary>
            AudioServer is a low level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusCount(System.Int32)">
            <summary>
            Adds and removes busses to make the number of busses match [code]amount[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusCount">
            <summary>
            Returns the number of available busses.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBus(System.Int32)">
            <summary>
            Removes the bus at index [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBus(System.Int32)">
            <summary>
            Adds a bus at [code]at_position[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.MoveBus(System.Int32,System.Int32)">
            <summary>
            Moves the bus from index [code]index[/code] to index [code]to_index[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusName(System.Int32,System.String)">
            <summary>
            Sets the name of the bus at index [code]bus_idx[/code] to [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusName(System.Int32)">
            <summary>
            Returns the name of the bus with the index [code]bus_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusIndex(System.String)">
            <summary>
            Returns the index of the bus with the name [code]bus_name[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusVolumeDb(System.Int32,System.Single)">
            <summary>
            Sets the volume of the bus at index [code]bus_idx[/code] to [code]volume_db[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusVolumeDb(System.Int32)">
            <summary>
            Returns the volume of the bus at index [code]bus_idx[/code] in dB.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSend(System.Int32,System.String)">
            <summary>
            Connects the output of the bus at [code]bus_idx[/code] to the bus named [code]send[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusSend(System.Int32)">
            <summary>
            Returns the name of the bus that the bus at index [code]bus_idx[/code] sends to.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusSolo(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusSolo(System.Int32)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is in solo mode.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusMute(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusMute(System.Int32)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is muted.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusBypassEffects(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusBypassingEffects(System.Int32)">
            <summary>
            If [code]true[/code] the bus at index [code]bus_idx[/code] is bypassing effects.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.AddBusEffect(System.Int32,Godot.AudioEffect,System.Int32)">
            <summary>
            Adds an [AudioEffect] effect to the bus [code]bus_idx[/code] at [code]at_position[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.RemoveBusEffect(System.Int32,System.Int32)">
            <summary>
            Removes the effect at index [code]effect_idx[/code] from the bus at index [code]bus_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffectCount(System.Int32)">
            <summary>
            Returns the number of effects on the bus at [code]bus_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusEffect(System.Int32,System.Int32)">
            <summary>
            Returns the [AudioEffect] at position [code]effect_idx[/code] in bus [code]bus_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SwapBusEffects(System.Int32,System.Int32,System.Int32)">
            <summary>
            Swaps the position of two effects in bus [code]bus_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusEffectEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.IsBusEffectEnabled(System.Int32,System.Int32)">
            <summary>
            If [code]true[/code] the effect at index [code]effect_idx[/code] on the bus at index [code]bus_idx[/code] is enabled.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeLeftDb(System.Int32,System.Int32)">
            <summary>
            Returns the peak volume of the left speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetBusPeakVolumeRightDb(System.Int32,System.Int32)">
            <summary>
            Returns the peak volume of the right speaker at bus index [code]bus_idx[/code] and channel index [code]channel[/code].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Lock">
            <summary>
            Locks the audio drivers mainloop. Remember to unlock it afterwards.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.Unlock">
            <summary>
            Unlocks the audiodriver's main loop. After locking it always unlock it.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetSpeakerMode">
            <summary>
            Returns the speaker configuration.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GetMixRate">
            <summary>
            Returns the sample rate at the output of the audioserver.
            </summary>
        </member>
        <member name="M:Godot.AudioServer.SetBusLayout(Godot.AudioBusLayout)">
            <summary>
            Overwrites the currently used [AudioBusLayout].
            </summary>
        </member>
        <member name="M:Godot.AudioServer.GenerateBusLayout">
            <summary>
            Generates an [AudioBusLayout] using the available busses and effects.
            </summary>
        </member>
        <member name="T:Godot.AudioStream">
            <summary>
            Base class for audio streams. Audio streams are used for music playback, or other types of streamed sounds that don't fit or require more flexibility than a [Sample].
            </summary>
        </member>
        <member name="M:Godot.AudioStream.GetLength">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamOGGVorbis">
            <summary>
            OGG Vorbis audio stream driver.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.Loop">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.AudioStreamOGGVorbis.LoopOffset">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayback">
            <summary>
            Can play, loop, pause a scroll through Audio. See [AudioStream] and [AudioStreamOGGVorbis] for usage.
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer">
            <summary>
            Plays background audio.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Stream">
            <summary>
            The [AudioStream] object to be played.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.VolumeDb">
            <summary>
            Volume of sound, in dB.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Playing">
            <summary>
            If [code]true[/code] audio is playing.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Autoplay">
            <summary>
            If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.MixTarget">
            <summary>
            If the audio configuration has more than two speakers, this sets the target channels. See [code]MIX_TARGET_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer.Bus">
            <summary>
            Bus on which this audio is playing.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Play(System.Single)">
            <summary>
            Plays the audio from the given position 'from_position', in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Seek(System.Single)">
            <summary>
            Sets the position from which audio will be played, in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.Stop">
            <summary>
            Stops the audio.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer.GetPlaybackPosition">
            <summary>
            Returns the position in the [AudioStream].
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer2D">
            <summary>
            Plays audio that dampens with distance from screen center.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Stream">
            <summary>
            The [AudioStream] object to be played.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.VolumeDb">
            <summary>
            Base volume without dampening.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Playing">
            <summary>
            If [code]true[/code] audio is playing.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Autoplay">
            <summary>
            If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.MaxDistance">
            <summary>
            Maximum distance from which audio is still hearable.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Attenuation">
            <summary>
            Dampens audio over distance with this as an exponent.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.Bus">
            <summary>
            Bus on which this audio is playing.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer2D.AreaMask">
            <summary>
            Areas in which this sound plays.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Play(System.Single)">
            <summary>
            Plays the audio from the given position 'from_position', in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Seek(System.Single)">
            <summary>
            Sets the position from which audio will be played, in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.Stop">
            <summary>
            Stops the audio.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer2D.GetPlaybackPosition">
            <summary>
            Returns the position in the [AudioStream].
            </summary>
        </member>
        <member name="T:Godot.AudioStreamPlayer3D">
            <summary>
            Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Stream">
            <summary>
            The [AudioStream] object to be played.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationModel">
            <summary>
            Decides if audio should get quieter with distance linearly, quadratically or logarithmically.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitDb">
            <summary>
            Base sound level unaffected by dampening, in dB.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.UnitSize">
            <summary>
            Factor for the attenuation effect.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDb">
            <summary>
            Sets the absolute maximum of the soundlevel, in dB.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Playing">
            <summary>
            If [code]true[/code], audio is playing.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Autoplay">
            <summary>
            If [code]true[/code] audio plays when added to scene tree. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.MaxDistance">
            <summary>
            Sets the distance from which the 'out_of_range_mode' takes effect. Has no effect if set to 0.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.OutOfRangeMode">
            <summary>
            Decides if audio should pause when source is outside of 'max_distance' range.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.Bus">
            <summary>
            Bus on which this audio is playing.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AreaMask">
            <summary>
            Areas in which this sound plays.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleEnabled">
            <summary>
            If [code]true[/code] the audio should be dampened according to the direction of the sound.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleDegrees">
            <summary>
            The angle in which the audio reaches cameras undampened.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.EmissionAngleFilterAttenuationDb">
            <summary>
            dampens audio if camera is outside of 'emission_angle_degrees' and 'emission_angle_enabled' is set by this factor, in dB.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterCutoffHz">
            <summary>
            Dampens audio above this frequency, in Hz.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.AttenuationFilterDb">
            <summary>
            Amount how much the filter affects the loudness, in dB.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamPlayer3D.DopplerTracking">
            <summary>
            Decides in which step the Doppler effect should be calculated.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Play(System.Single)">
            <summary>
            Plays the audio from the given position 'from_position', in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Seek(System.Single)">
            <summary>
            Sets the position from which audio will be played, in seconds.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.Stop">
            <summary>
            Stops the audio.
            </summary>
        </member>
        <member name="M:Godot.AudioStreamPlayer3D.GetPlaybackPosition">
            <summary>
            Returns the position in the [AudioStream].
            </summary>
        </member>
        <member name="T:Godot.AudioStreamRandomPitch">
            <summary>
            Randomly varies pitch on each start.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.AudioStream">
            <summary>
            The current [AudioStream].
            </summary>
        </member>
        <member name="P:Godot.AudioStreamRandomPitch.RandomPitch">
            <summary>
            The intensity of random pitch variation.
            </summary>
        </member>
        <member name="T:Godot.AudioStreamSample">
            <summary>
            Plays audio, can loop.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Format">
            <summary>
            Audio format. See FORMAT_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopMode">
            <summary>
            Loop mode. See LOOP_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopBegin">
            <summary>
            Loop start in bytes.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.LoopEnd">
            <summary>
            Loop end in bytes.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.MixRate">
            <summary>
            The sample rate for mixing this audio.
            </summary>
        </member>
        <member name="P:Godot.AudioStreamSample.Stereo">
            <summary>
            If [code]true[/code], audio is stereo. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="T:Godot.BackBufferCopy">
            <summary>
            Node for back-buffering the currently displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Accessing this buffer is done with the texscreen() shader instruction.
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.CopyMode">
            <summary>
            Buffer mode. See [code]COPY_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.BackBufferCopy.Rect">
            <summary>
            The area covered by the BackBufferCopy. Only used if [code]copy_mode[/code] is [code]COPY_MODE_RECT[/code].
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeCellSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeQuality">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakePropagation">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeHdr">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.BakeExtents">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.CaptureCellSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.ImagePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmap.LightData">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmap.Bake(Godot.Node,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmap.DebugBake">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Bounds">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.CellSpaceTransform">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.CellSubdiv">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Energy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.BakedLightmapData.Octree">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.AddUser(Godot.NodePath,Godot.Texture,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserPath(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.GetUserLightmap(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.BakedLightmapData.ClearUsers">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.BaseButton">
            <summary>
            BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it.
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Disabled">
            <summary>
            If [code]true[/code] the button is in disabled state and can't be clicked or toggled.
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ToggleMode">
            <summary>
            If [code]true[/code] the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Pressed">
            <summary>
            If [code]true[/code] the button's state is pressed. Means the button is pressed down or toggled (if toggle_mode is active).
            </summary>
        </member>
        <member name="P:Godot.BaseButton.ActionMode">
            <summary>
            Determines when the button is considered clicked, one of the ACTION_MODE_* constants.
            </summary>
        </member>
        <member name="P:Godot.BaseButton.EnabledFocusMode">
            <summary>
            Focus access mode to use when switching between enabled/disabled (see [method Control.set_focus_mode] and [member disabled]).
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Shortcut">
            <summary>
            [Shortcut] associated to the button.
            </summary>
        </member>
        <member name="P:Godot.BaseButton.Group">
            <summary>
            [ButtonGroup] associated to the button.
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Pressed">
            <summary>
            Called when button is pressed.
            </summary>
        </member>
        <member name="M:Godot.BaseButton._Toggled(System.Boolean)">
            <summary>
            Called when button is toggled (only if toggle_mode is active).
            </summary>
        </member>
        <member name="M:Godot.BaseButton.IsHovered">
            <summary>
            Return true if mouse entered the button before it exit.
            </summary>
        </member>
        <member name="M:Godot.BaseButton.GetDrawMode">
            <summary>
            Return the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DRAW_* enum.
            </summary>
        </member>
        <member name="T:Godot.BitMap">
            <summary>
            A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.
            </summary>
        </member>
        <member name="M:Godot.BitMap.Create(Godot.Vector2)">
            <summary>
            Creates a bitmap with the specified size, filled with false.
            </summary>
        </member>
        <member name="M:Godot.BitMap.CreateFromImageAlpha(Godot.Image)">
            <summary>
            Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is 0, and true in other case.
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBit(Godot.Vector2,System.Boolean)">
            <summary>
            Sets the bitmap's element at the specified position, to the specified value.
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetBit(Godot.Vector2)">
            <summary>
            Returns bitmap's value at the specified position.
            </summary>
        </member>
        <member name="M:Godot.BitMap.SetBitRect(Godot.Rect2,System.Boolean)">
            <summary>
            Sets a rectangular portion of the bitmap to the specified value.
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetTrueBitCount">
            <summary>
            Returns the amount of bitmap elements that are set to true.
            </summary>
        </member>
        <member name="M:Godot.BitMap.GetSize">
            <summary>
            Returns bitmap's dimensions.
            </summary>
        </member>
        <member name="T:Godot.BitmapFont">
            <summary>
            Renders text using [code]*.fnt[/code] fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see [DynamicFont].
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Height">
            <summary>
            Total font height (ascent plus descent) in pixels.
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Ascent">
            <summary>
            Ascent (number of pixels above the baseline).
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.DistanceField">
            <summary>
            If [code]true[/code] distance field hint is enabled.
            </summary>
        </member>
        <member name="P:Godot.BitmapFont.Fallback">
            <summary>
            The fallback font.
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.CreateFromFnt(System.String)">
            <summary>
            Creates a BitmapFont from the [code]*.fnt[/code] file at [code]path[/code].
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddKerningPair(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a kerning pair to the [code]BitmapFont[/code] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetKerningPair(System.Int32,System.Int32)">
            <summary>
            Returns a kerning pair as a difference.
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddTexture(Godot.Texture)">
            <summary>
            Adds a texture to the [code]BitmapFont[/code].
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.AddChar(System.Int32,System.Int32,Godot.Rect2,System.Nullable{Godot.Vector2},System.Single)">
            <summary>
            Adds a character to the font, where [code]character[/code] is the unicode value, [code]texture[/code] is the texture index, [code]rect[/code] is the region in the texture (in pixels!), [code]align[/code] is the (optional) alignment for the character and [code]advance[/code] is the (optional) advance.
            &lt;param name="align"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetTextureCount">
            <summary>
            Returns the number of textures in the BitmapFont atlas.
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetTexture(System.Int32)">
            <summary>
            Returns the font atlas texture at index [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.GetCharSize(System.Int32,System.Int32)">
            <summary>
            Returns the size of a character, optionally taking kerning into account if the next character is provided.
            </summary>
        </member>
        <member name="M:Godot.BitmapFont.Clear">
            <summary>
            Clears all the font data and settings.
            </summary>
        </member>
        <member name="T:Godot.BoneAttachment">
            <summary>
            This node must be the child of a [Skeleton] node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone.
            </summary>
        </member>
        <member name="P:Godot.BoneAttachment.BoneName">
            <summary>
            The name of the attached bone.
            </summary>
        </member>
        <member name="T:Godot.BoxContainer">
            <summary>
            Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes.
            </summary>
        </member>
        <member name="P:Godot.BoxContainer.Alignment">
            <summary>
            The alignment of the container's children (must be one of ALIGN_BEGIN, ALIGN_CENTER, or ALIGN_END).
            </summary>
        </member>
        <member name="M:Godot.BoxContainer.AddSpacer(System.Boolean)">
            <summary>
            Adds a control to the box as a spacer. If [code]true[/code], [i]begin[/i] will insert the spacer control in front of other children.
            </summary>
        </member>
        <member name="T:Godot.BoxShape">
            <summary>
            3D box shape that can be a child of a [PhysicsBody] or [Area].
            </summary>
        </member>
        <member name="P:Godot.BoxShape.Extents">
            <summary>
            The shape's half extents.
            </summary>
        </member>
        <member name="T:Godot.Button">
            <summary>
            Button is the standard themed button. It can contain text and an icon, and will display them according to the current [Theme].
            </summary>
        </member>
        <member name="P:Godot.Button.Text">
            <summary>
            The button's text that will be displayed inside the button's area.
            </summary>
        </member>
        <member name="P:Godot.Button.Icon">
            <summary>
            Button's icon, if text is present the icon will be placed before the text.
            </summary>
        </member>
        <member name="P:Godot.Button.Flat">
            <summary>
            Flat buttons don't display decoration.
            </summary>
        </member>
        <member name="P:Godot.Button.ClipText">
            <summary>
            When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. This property is disabled by default.
            </summary>
        </member>
        <member name="P:Godot.Button.Align">
            <summary>
            Text alignment policy for the button's text, use one of the ALIGN_* constants.
            </summary>
        </member>
        <member name="T:Godot.ButtonGroup">
            <summary>
            Group of [Button]. All direct and indirect children buttons become radios. Only one allows being pressed.
            </summary>
        </member>
        <member name="M:Godot.ButtonGroup.GetPressedButton">
            <summary>
            Return the pressed button.
            </summary>
        </member>
        <member name="T:Godot.Camera">
            <summary>
            Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [i]3D[/i] display capabilities to a [Viewport], and, without one, a scene registered in that [Viewport] (or higher viewports) can't be displayed.
            </summary>
        </member>
        <member name="P:Godot.Camera.KeepAspect">
            <summary>
            The axis to lock during [member fov]/[member size] adjustments. Can be either [code]KEEP_WIDTH[/code] or [code]KEEP_HEIGHT[/code].
            </summary>
        </member>
        <member name="P:Godot.Camera.CullMask">
            <summary>
            The culling mask that describes which 3D render layers are rendered by this camera.
            </summary>
        </member>
        <member name="P:Godot.Camera.Environment">
            <summary>
            The [Environment] to use for this Camera.
            </summary>
        </member>
        <member name="P:Godot.Camera.HOffset">
            <summary>
            The horizontal (X) offset of the Camera viewport.
            </summary>
        </member>
        <member name="P:Godot.Camera.VOffset">
            <summary>
            The vertical (Y) offset of the Camera viewport.
            </summary>
        </member>
        <member name="P:Godot.Camera.DopplerTracking">
            <summary>
            If not [code]DOPPLER_TRACKING_DISABLED[/code] this Camera will simulate the Doppler effect for objects changed in particular [code]_process[/code] methods. Default value: [code]DOPPLER_TRACKING_DISABLED[/code].
            </summary>
        </member>
        <member name="P:Godot.Camera.Projection">
            <summary>
            The camera's projection mode. In [code]PROJECTION_PERSPECTIVE[/code] mode, objects' z-distance from the camera's local space scales their perceived size.
            </summary>
        </member>
        <member name="P:Godot.Camera.Current">
            <summary>
            If [code]true[/code] the ancestor [Viewport] is currently using this Camera. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Camera.Fov">
            <summary>
            The camera's field of view angle (in degrees). Only applicable in perspective mode. Since [member keep_aspect] locks one axis, [code]fov[/code] sets the other axis' field of view angle.
            </summary>
        </member>
        <member name="P:Godot.Camera.Size">
            <summary>
            The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since [member keep_aspect] locks on axis, [code]size[/code] sets the other axis' size length.
            </summary>
        </member>
        <member name="P:Godot.Camera.Near">
            <summary>
            The distance to the near culling boundary for this Camera relative to its local z-axis.
            </summary>
        </member>
        <member name="P:Godot.Camera.Far">
            <summary>
            The distance to the far culling boundary for this Camera relative to its local z-axis.
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectRayNormal(Godot.Vector2)">
            <summary>
            Returns a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectLocalRayNormal(Godot.Vector2)">
            <summary>
            Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectRayOrigin(Godot.Vector2)">
            <summary>
            Returns a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
            </summary>
        </member>
        <member name="M:Godot.Camera.UnprojectPosition(Godot.Vector3)">
            <summary>
            Returns the 2D coordinate in the [Viewport] rectangle that maps to the given 3D point in worldspace.
            </summary>
        </member>
        <member name="M:Godot.Camera.IsPositionBehind(Godot.Vector3)">
            <summary>
            Returns [code]true[/code] if the given position is behind the Camera. Note that a position which returns [code]false[/code] may still be outside the Camera's field of view.
            </summary>
        </member>
        <member name="M:Godot.Camera.ProjectPosition(Godot.Vector2)">
            <summary>
            Returns the 3D point in worldspace that maps to the given 2D coordinate in the [Viewport] rectangle.
            </summary>
        </member>
        <member name="M:Godot.Camera.SetPerspective(System.Single,System.Single,System.Single)">
            <summary>
            Sets the camera projection to perspective mode, by specifying a [i]FOV[/i] Y angle in degrees (FOV means Field of View), and the [i]near[/i] and [i]far[/i] clip planes in worldspace units.
            </summary>
        </member>
        <member name="M:Godot.Camera.SetOrthogonal(System.Single,System.Single,System.Single)">
            <summary>
            Sets the camera projection to orthogonal mode, by specifying a width and the [i]near[/i] and [i]far[/i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)
            </summary>
        </member>
        <member name="M:Godot.Camera.MakeCurrent">
            <summary>
            Makes this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it's added.
            </summary>
        </member>
        <member name="M:Godot.Camera.ClearCurrent">
            <summary>
            If this is the current Camera, remove it from being current. If it is inside the node tree, request to make the next Camera current, if any.
            </summary>
        </member>
        <member name="M:Godot.Camera.GetCameraTransform">
            <summary>
            Gets the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.
            </summary>
        </member>
        <member name="T:Godot.Camera2D">
            <summary>
            Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem] based nodes.
            This node is intended to be a simple helper to get things going quickly and it may happen often that more functionality is desired to change how the camera works. To make your own custom camera node, simply inherit from [Node2D] and change the transform of the canvas by calling get_viewport().set_canvas_transform(m) in [Viewport].
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Offset">
            <summary>
            The camera's offset, useful for looking around or camera shake animations.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.AnchorMode">
            <summary>
            The Camera2D's anchor point. See [code]ANCHOR_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Rotating">
            <summary>
            If [code]true[/code] the camera rotates with the target. Default value: [code]false[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Current">
            <summary>
            If [code]true[/code] the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera [code]current[/code] will disable this one.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.Zoom">
            <summary>
            The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2x zoom in, and [code]Vector2(4, 4)[/code] for a 4x zoom out.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.CustomViewport">
            <summary>
            The custom [Viewport] node attached to the [code]Camera2D[/code]. If null or not a [Viewport], uses the default viewport instead.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitLeft">
            <summary>
            Left scroll limit in pixels. The camera stops moving when reaching this value.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitTop">
            <summary>
            Top scroll limit in pixels. The camera stops moving when reaching this value.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitRight">
            <summary>
            Right scroll limit in pixels. The camera stops moving when reaching this value.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitBottom">
            <summary>
            Bottom scroll limit in pixels. The camera stops moving when reaching this value.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.LimitSmoothed">
            <summary>
            If [code]true[/code] the camera smoothly stops when reaches its limits. Default value: [code]false[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginHEnabled">
            <summary>
            If [code]true[/code] the camera only moves when reaching the horizontal drag margins. If [code]false[/code] the camera moves horizontally regardless of margins. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginVEnabled">
            <summary>
            If [code]true[/code] the camera only moves when reaching the vertical drag margins. If [code]false[/code] the camera moves vertically regardless of margins. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingEnabled">
            <summary>
            If [code]true[/code] the camera smoothly moves towards the target at [member smoothing_speed]. Default value: [code]false[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.SmoothingSpeed">
            <summary>
            Speed in pixels per second of the camera's smoothing effect when [member smoothing_enabled] is [code]true[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.OffsetV">
            <summary>
            The vertical offset of the camera, relative to the drag margins. Default value: [code]0[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.OffsetH">
            <summary>
            The horizontal offset of the camera, relative to the drag margins. Default value: [code]0[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginLeft">
            <summary>
            Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginTop">
            <summary>
            Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginRight">
            <summary>
            Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.DragMarginBottom">
            <summary>
            Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawScreen">
            <summary>
            If [code]true[/code] draws the camera's screen rectangle in the editor. Default value: [code]false[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawLimits">
            <summary>
            If [code]true[/code] draws the camera's limits rectangle in the editor. Default value: [code]true[/code]
            </summary>
        </member>
        <member name="P:Godot.Camera2D.EditorDrawDragMargin">
            <summary>
            If [code]true[/code] draws the camera's drag margin rectangle in the editor. Default value: [code]false[/code]
            </summary>
        </member>
        <member name="M:Godot.Camera2D.MakeCurrent">
            <summary>
            Make this the current 2D camera for the scene (viewport and layer), in case there's many cameras in the scene.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ClearCurrent">
            <summary>
            Removes any [code]Camera2D[/code] from the ancestor [Viewport]'s internal currently-assigned camera.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraPosition">
            <summary>
            Return the camera position.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.GetCameraScreenCenter">
            <summary>
            Returns the location of the [code]Camera2D[/code]'s screen-center, relative to the origin.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ForceUpdateScroll">
            <summary>
            Force the camera to update scroll immediately.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.ResetSmoothing">
            <summary>
            Set the camera's position immediately to its current smoothing destination.
            This has no effect if smoothing is disabled.
            </summary>
        </member>
        <member name="M:Godot.Camera2D.Align">
            <summary>
            Align the camera to the tracked node
            </summary>
        </member>
        <member name="T:Godot.CanvasItem">
            <summary>
            Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.
            Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.
            Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).
            Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.
            Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Visible">
            <summary>
            If [code]true[/code] this [code]CanvasItem[/code] is drawn. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Modulate">
            <summary>
            The color applied to textures on this [code]CanvasItem[/code]. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque "white").
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.SelfModulate">
            <summary>
            The color applied to textures on this [code]CanvasItem[/code]. This is not inherited by children [code]CanvasItem[/code]s. Default value: [code]Color(1, 1, 1, 1)[/code] (opaque "white")..
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowBehindParent">
            <summary>
            If [code]true[/code] the object draws behind its parent. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.ShowOnTop">
            <summary>
            If [code]true[/code] the object draws on top of its parent. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.LightMask">
            <summary>
            The rendering layers in which this [code]CanvasItem[/code] responds to [Light2D] nodes. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.Material">
            <summary>
            The material applied to textures on this [code]CanvasItem[/code]. Default value: [code]null[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasItem.UseParentMaterial">
            <summary>
            If [code]true[/code] the parent [code]CanvasItem[/code]'s [member material] property is used as this one's material. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem._Draw">
            <summary>
            Called (if exists) to draw the canvas item.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasItem">
            <summary>
            Return the canvas item RID used by [VisualServer] for this item.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsVisibleInTree">
            <summary>
            Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and its inherited visibility is also [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Show">
            <summary>
            Show the CanvasItem currently hidden.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Hide">
            <summary>
            Hide the CanvasItem currently visible.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.Update">
            <summary>
            Queue the CanvasItem for update. [code]NOTIFICATION_DRAW[/code] will be called on idle time to request redraw.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetAsToplevel(System.Boolean)">
            <summary>
            Sets as top level. This means that it will not inherit transform from parent canvas items.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsSetAsToplevel">
            <summary>
            Return if set as toplevel. See [method set_as_toplevel].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawLine(Godot.Vector2,Godot.Vector2,Godot.Color,System.Single,System.Boolean)">
            <summary>
            Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolyline(Godot.Vector2[],Godot.Color,System.Single,System.Boolean)">
            <summary>
            Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolylineColors(Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            Draws interconnected line segments with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultiline(Godot.Vector2[],Godot.Color,System.Single,System.Boolean)">
            <summary>
            Draws multiple, parallel lines with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawMultilineColors(Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            Draws multiple, parallel lines with a uniform [code]width[/code], segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawRect(Godot.Rect2,Godot.Color,System.Boolean)">
            <summary>
            Draws a colored rectangle.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawCircle(Godot.Vector2,System.Single,Godot.Color)">
            <summary>
            Draws a colored circle.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTexture(Godot.Texture,Godot.Vector2,System.Nullable{Godot.Color},Godot.Texture)">
            <summary>
            Draws a texture at a given position.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRect(Godot.Texture,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            Draws a textured rectangle at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawTextureRectRegion(Godot.Texture,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture,System.Boolean)">
            <summary>
            Draws a textured rectangle region at a given position, optionally modulated by a color. Transpose swaps the x and y coordinates when reading the texture.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawStyleBox(Godot.StyleBox,Godot.Rect2)">
            <summary>
            Draws a styled rectangle.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPrimitive(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture,System.Single,Godot.Texture)">
            <summary>
            Draws a custom primitive, 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawPolygon(Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Texture,Godot.Texture,System.Boolean)">
            <summary>
            Draws a polygon of any amount of points, convex or concave.
            &lt;param name="uvs"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawColoredPolygon(Godot.Vector2[],Godot.Color,Godot.Vector2[],Godot.Texture,Godot.Texture,System.Boolean)">
            <summary>
            Draws a colored polygon of any amount of points, convex or concave.
            &lt;param name="uvs"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawString(Godot.Font,Godot.Vector2,System.String,System.Nullable{Godot.Color},System.Int32)">
            <summary>
            Draws a string using a custom font.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawChar(Godot.Font,Godot.Vector2,System.String,System.String,System.Nullable{Godot.Color})">
            <summary>
            Draws a string character using a custom font. Returns the advance, depending on the char width and kerning with an optional next char.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransform(Godot.Vector2,System.Single,Godot.Vector2)">
            <summary>
            Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.DrawSetTransformMatrix(Godot.Transform2D)">
            <summary>
            Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetTransform">
            <summary>
            Get the transform matrix of this item.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransform">
            <summary>
            Get the global transform matrix of this item.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalTransformWithCanvas">
            <summary>
            Get the global transform matrix of this item in relation to the canvas.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportTransform">
            <summary>
            Get this item's transform in relation to the viewport.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetViewportRect">
            <summary>
            Get the viewport's boundaries as a [Rect2].
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvasTransform">
            <summary>
            Get the transform matrix of this item's canvas.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetLocalMousePosition">
            <summary>
            Get the mouse position relative to this item's position.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetGlobalMousePosition">
            <summary>
            Get the global position of the mouse.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetCanvas">
            <summary>
            Return the [RID] of the [World2D] canvas where this item is in.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.GetWorld2d">
            <summary>
            Get the [World2D] where this item is in.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], children will be updated with local transform data.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsLocalTransformNotificationEnabled">
            <summary>
            Returns [code]true[/code] if local transform notifications are communicated to children.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.SetNotifyTransform(System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], children will be updated with global transform data.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.IsTransformNotificationEnabled">
            <summary>
            Returns [code]true[/code] if global transform notifications are communicated to children.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeCanvasPositionLocal(Godot.Vector2)">
            <summary>
            Assigns [code]screen_point[/code] as this node's new local transform.
            </summary>
        </member>
        <member name="M:Godot.CanvasItem.MakeInputLocal(Godot.InputEvent)">
            <summary>
            Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space.
            </summary>
        </member>
        <member name="T:Godot.CanvasItemMaterial">
            <summary>
            [code]CanvasItemMaterial[/code]s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a [ShaderMaterial] to more fully customize a material's interactions with a [CanvasItem].
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.BlendMode">
            <summary>
            The manner in which a material's rendering is applied to underlying textures.
            </summary>
        </member>
        <member name="P:Godot.CanvasItemMaterial.LightMode">
            <summary>
            The manner in which material reacts to lighting.
            </summary>
        </member>
        <member name="T:Godot.CanvasLayer">
            <summary>
            Canvas drawing layer. [CanvasItem] nodes that are direct or indirect children of a [code]CanvasLayer[/code] will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a [code]CanvasLayer[/code] with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below).
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Layer">
            <summary>
            Layer index for draw order. Lower values are drawn first. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Offset">
            <summary>
            The layer's base offset.
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.RotationDegrees">
            <summary>
            The layer's rotation in degrees.
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Rotation">
            <summary>
            The layer's rotation in radians.
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Scale">
            <summary>
            The layer's scale.
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.Transform">
            <summary>
            The layer's transform.
            </summary>
        </member>
        <member name="P:Godot.CanvasLayer.CustomViewport">
            <summary>
            The custom [Viewport] node assigned to the [code]CanvasLayer[/code]. If null, uses the default viewport instead.
            </summary>
        </member>
        <member name="M:Godot.CanvasLayer.GetWorld2d">
            <summary>
            Return the [World2D] used by this layer.
            </summary>
        </member>
        <member name="T:Godot.CanvasModulate">
            <summary>
            [code]CanvasModulate[/code] tints the canvas elements using its assigned [code]color[/code].
            </summary>
        </member>
        <member name="P:Godot.CanvasModulate.Color">
            <summary>
            The tint color to apply.
            </summary>
        </member>
        <member name="T:Godot.CapsuleMesh">
            <summary>
            Class representing a capsule-shaped [PrimitiveMesh].
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Radius">
            <summary>
            Radius of the capsule mesh. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.MidHeight">
            <summary>
            Height of the capsule mesh from the center point. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.RadialSegments">
            <summary>
            Number of radial segments on the capsule mesh. Defaults to 64.
            </summary>
        </member>
        <member name="P:Godot.CapsuleMesh.Rings">
            <summary>
            Number of rings along the height of the capsule. Defaults to 8.
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape">
            <summary>
            Capsule shape for collisions.
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape.Radius">
            <summary>
            The capsule's radius.
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape.Height">
            <summary>
            The capsule's height.
            </summary>
        </member>
        <member name="T:Godot.CapsuleShape2D">
            <summary>
            Capsule shape for 2D collisions.
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Radius">
            <summary>
            The capsule's radius.
            </summary>
        </member>
        <member name="P:Godot.CapsuleShape2D.Height">
            <summary>
            The capsule's height.
            </summary>
        </member>
        <member name="T:Godot.CenterContainer">
            <summary>
            CenterContainer Keeps children controls centered. This container keeps all children to their minimum size, in the center.
            </summary>
        </member>
        <member name="P:Godot.CenterContainer.UseTopLeft">
            <summary>
            If [code]true[/code] centers children relative to the [code]CenterContainer[/code]'s top left corner. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="T:Godot.CheckBox">
            <summary>
            A checkbox allows the user to make a binary choice (choosing only one of two possible options), for example Answer 'yes' or 'no'.
            </summary>
        </member>
        <member name="T:Godot.CheckButton">
            <summary>
            CheckButton is a toggle button displayed as a check field.
            </summary>
        </member>
        <member name="T:Godot.CircleShape2D">
            <summary>
            Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast.
            </summary>
        </member>
        <member name="P:Godot.CircleShape2D.Radius">
            <summary>
            The circle's radius.
            </summary>
        </member>
        <member name="T:Godot.ClassDB">
            <summary>
            Provides access to metadata stored for every available class.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetClassList">
            <summary>
            Returns the names of all the classes available.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetInheritersFromClass(System.String)">
            <summary>
            Returns the names of all the classes that directly or indirectly inherit from 'class'.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.GetParentClass(System.String)">
            <summary>
            Returns the parent class of 'class'.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassExists(System.String)">
            <summary>
            Returns whether the specified 'class' is available or not.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsParentClass(System.String,System.String)">
            <summary>
            Returns whether 'inherits' is an ancestor of 'class' or not.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.CanInstance(System.String)">
            <summary>
            Returns true if you can instance objects from the specified 'class', false in other case.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.Instance(System.String)">
            <summary>
            Creates an instance of 'class'.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasSignal(System.String,System.String)">
            <summary>
            Return whether 'class' or its ancestry has a signal called 'signal' or not.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignal(System.String,System.String)">
            <summary>
            Returns the 'signal' data of 'class' or its ancestry. The returned value is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetSignalList(System.String,System.Boolean)">
            <summary>
            Returns an array with all the signals of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] as described in [class_get_signal].
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetPropertyList(System.String,System.Boolean)">
            <summary>
            Returns an array with all the properties of 'class' or its ancestry if 'no_inheritance' is false.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetProperty(Godot.Object,System.String)">
            <summary>
            Returns the value of 'property' of 'class' or its ancestry.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassSetProperty(Godot.Object,System.String,System.Object)">
            <summary>
            Sets 'property' value of 'class' to 'value'.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasMethod(System.String,System.String,System.Boolean)">
            <summary>
            Return whether 'class' (or its ancestry if 'no_inheritance' is false) has a method called 'method' or not.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetMethodList(System.String,System.Boolean)">
            <summary>
            Returns an array with all the methods of 'class' or its ancestry if 'no_inheritance' is false. Every element of the array is a [Dictionary] with the following keys: args, default_args, flags, id, name, return: (class_name, hint, hint_string, name, type, usage).
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstantList(System.String,System.Boolean)">
            <summary>
            Returns an array with the names all the integer constants of 'class' or its ancestry.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassHasIntegerConstant(System.String,System.String)">
            <summary>
            Return whether 'class' or its ancestry has an integer constant called 'name' or not.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetIntegerConstant(System.String,System.String)">
            <summary>
            Returns the value of the integer constant 'name' of 'class' or its ancestry. Always returns 0 when the constant could not be found.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.ClassGetCategory(System.String)">
            <summary>
            Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required.
            </summary>
        </member>
        <member name="M:Godot.ClassDB.IsClassEnabled(System.String)">
            <summary>
            Returns whether this class is enabled or not.
            </summary>
        </member>
        <member name="T:Godot.CollisionObject">
            <summary>
            CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
            </summary>
        </member>
        <member name="P:Godot.CollisionObject.InputRayPickable">
            <summary>
            If [code]true[/code] the [CollisionObject]'s shapes will respond to [RayCast]s. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.CollisionObject.InputCaptureOnDrag">
            <summary>
            If [code]true[/code] the [code]CollisionObject[/code] will continue to receive input events as the mouse is dragged across its shapes. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.CollisionObject._InputEvent(Godot.Object,Godot.InputEvent,Godot.Vector3,Godot.Vector3,System.Int32)">
            <summary>
            Accepts unhandled [InputEvent]s. [code]click_position[/code] is the clicked location in world space and [code]click_normal[/code] is the normal vector extending from the clicked surface of the [Shape] at [code]shape_idx[/code]. Connect to the [code]input_event[/code] signal to easily pick up these events.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.GetRid">
            <summary>
            Returns the object's [RID].
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.CreateShapeOwner(Godot.Object)">
            <summary>
            Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.RemoveShapeOwner(System.Int32)">
            <summary>
            Removes the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.GetShapeOwners">
            <summary>
            Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerSetTransform(System.Int32,Godot.Transform)">
            <summary>
            Sets the [Transform] of the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetTransform(System.Int32)">
            <summary>
            Returns the shape owner's [Transform].
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetOwner(System.Int32)">
            <summary>
            Returns the parent object of the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerSetDisabled(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] disables the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.IsShapeOwnerDisabled(System.Int32)">
            <summary>
            If [code]true[/code] the shape owner and its shapes are disabled.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerAddShape(System.Int32,Godot.Shape)">
            <summary>
            Adds a [Shape] to the shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShapeCount(System.Int32)">
            <summary>
            Returns the number of shapes the given shape owner contains.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShape(System.Int32,System.Int32)">
            <summary>
            Returns the [Shape] with the given id from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerGetShapeIndex(System.Int32,System.Int32)">
            <summary>
            Returns the child index of the [Shape] with the given id from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerRemoveShape(System.Int32,System.Int32)">
            <summary>
            Removes a shape from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeOwnerClearShapes(System.Int32)">
            <summary>
            Removes all shapes from the shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject.ShapeFindOwner(System.Int32)">
            <summary>
            Returns the [code]owner_id[/code] of the given shape.
            </summary>
        </member>
        <member name="T:Godot.CollisionObject2D">
            <summary>
            CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision [Shape2D]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
            </summary>
        </member>
        <member name="P:Godot.CollisionObject2D.InputPickable">
            <summary>
            If [code]true[/code] this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D._InputEvent(Godot.Object,Godot.InputEvent,System.Int32)">
            <summary>
            Accepts unhandled [InputEvent]s. [code]shape_idx[/code] is the child index of the clicked [Shape2D]. Connect to the [code]input_event[/code] signal to easily pick up these events.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetRid">
            <summary>
            Returns the object's [RID].
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.CreateShapeOwner(Godot.Object)">
            <summary>
            Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.RemoveShapeOwner(System.Int32)">
            <summary>
            Removes the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.GetShapeOwners">
            <summary>
            Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetTransform(System.Int32,Godot.Transform2D)">
            <summary>
            Sets the [Transform2D] of the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetTransform(System.Int32)">
            <summary>
            Returns the shape owner's [Transform2D].
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetOwner(System.Int32)">
            <summary>
            Returns the parent object of the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetDisabled(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] disables the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerDisabled(System.Int32)">
            <summary>
            If [code]true[/code] the shape owner and its shapes are disabled.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerSetOneWayCollision(System.Int32,System.Boolean)">
            <summary>
            If [code]enable[/code] is [code]true[/code], collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.IsShapeOwnerOneWayCollisionEnabled(System.Int32)">
            <summary>
            Returns [code]true[/code] if collisions for the shape owner originating from this [code]CollisionObject2D[/code] will not be reported to collided with [code]CollisionObject2D[/code]s.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerAddShape(System.Int32,Godot.Shape2D)">
            <summary>
            Adds a [Shape2D] to the shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeCount(System.Int32)">
            <summary>
            Returns the number of shapes the given shape owner contains.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShape(System.Int32,System.Int32)">
            <summary>
            Returns the [Shape2D] with the given id from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerGetShapeIndex(System.Int32,System.Int32)">
            <summary>
            Returns the child index of the [Shape2D] with the given id from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerRemoveShape(System.Int32,System.Int32)">
            <summary>
            Removes a shape from the given shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeOwnerClearShapes(System.Int32)">
            <summary>
            Removes all shapes from the shape owner.
            </summary>
        </member>
        <member name="M:Godot.CollisionObject2D.ShapeFindOwner(System.Int32)">
            <summary>
            Returns the [code]owner_id[/code] of the given shape.
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon">
            <summary>
            Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at runtime. Creates a [Shape] for gameplay. Properties modified during gameplay will have no effect.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Depth">
            <summary>
            Length that the resulting collision extends in either direction perpendicular to its polygon.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Disabled">
            <summary>
            If true, no collision will be produced.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon.Polygon">
            <summary>
            Array of vertices which define the polygon.
            </summary>
        </member>
        <member name="T:Godot.CollisionPolygon2D">
            <summary>
            Provides a 2D collision polygon to a [CollisionObject2D] parent. Polygon can be drawn in the editor or specified by a list of vertices.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.BuildMode">
            <summary>
            Collision build mode. Use one of the [code]BUILD_*[/code] constants. Default value: [code]BUILD_SOLIDS[/code].
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Polygon">
            <summary>
            The polygon's list of vertices. The final point will be connected to the first.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.Disabled">
            <summary>
            If [code]true[/code] no collisions will be detected.
            </summary>
        </member>
        <member name="P:Godot.CollisionPolygon2D.OneWayCollision">
            <summary>
            If [code]true[/code] only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects.
            </summary>
        </member>
        <member name="T:Godot.CollisionShape">
            <summary>
            Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area] to give it a detection shape, or add it to a [PhysicsBody] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.
            </summary>
        </member>
        <member name="P:Godot.CollisionShape.Shape">
            <summary>
            The actual shape owned by this collision shape.
            </summary>
        </member>
        <member name="P:Godot.CollisionShape.Disabled">
            <summary>
            A disabled collision shape has no effect in the world.
            </summary>
        </member>
        <member name="M:Godot.CollisionShape.ResourceChanged(Godot.Resource)">
            <summary>
            If this method exists within a script it will be called whenever the shape resource has been modified.
            </summary>
        </member>
        <member name="M:Godot.CollisionShape.MakeConvexFromBrothers">
            <summary>
            Sets the collision shape's shape to the addition of all its convexed [MeshInstance] siblings geometry.
            </summary>
        </member>
        <member name="T:Godot.CollisionShape2D">
            <summary>
            Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an [Area2D] to give it a detection shape, or add it to a [PhysicsBody2D] to create a solid object. [b]IMPORTANT[/b]: this is an Editor-only helper to create shapes, use [method get_shape] to get the actual shape.
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Shape">
            <summary>
            The actual shape owned by this collision shape.
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.Disabled">
            <summary>
            A disabled collision shape has no effect in the world.
            </summary>
        </member>
        <member name="P:Godot.CollisionShape2D.OneWayCollision">
            <summary>
            Sets whether this collision shape should only detect collision on one side (top or bottom).
            </summary>
        </member>
        <member name="T:Godot.ColorPicker">
            <summary>
            This is a simple color picker [Control]. It's useful for selecting a color from an RGB/RGBA colorspace.
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.Color">
            <summary>
            The currently selected color.
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.EditAlpha">
            <summary>
            If [code]true[/code], shows an alpha channel slider (transparency).
            </summary>
        </member>
        <member name="P:Godot.ColorPicker.RawMode">
            <summary>
            If [code]true[/code], allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).
            </summary>
        </member>
        <member name="M:Godot.ColorPicker.AddPreset(Godot.Color)">
            <summary>
            Adds the current selected to color to a list of colors (presets), the presets will be displayed in the color picker and the user will be able to select them, notice that the presets list is only for this color picker.
            </summary>
        </member>
        <member name="T:Godot.ColorPickerButton">
            <summary>
            Encapsulates a [ColorPicker] making it accesible by pressing a button, pressing the button will toggle the [ColorPicker] visibility
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.Color">
            <summary>
            The currently selected color.
            </summary>
        </member>
        <member name="P:Godot.ColorPickerButton.EditAlpha">
            <summary>
            If [code]true[/code] the alpha channel in the displayed [ColorPicker] will be visible. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPicker">
            <summary>
            Returns the [code]ColorPicker[/code] that this [code]ColorPickerButton[/code] toggles.
            </summary>
        </member>
        <member name="M:Godot.ColorPickerButton.GetPopup">
            <summary>
            Returns the control's [PopupPanel] which allows you to connect to Popup Signals. This allows you to handle events when the ColorPicker is shown or hidden.
            </summary>
        </member>
        <member name="T:Godot.ColorRect">
            <summary>
            An object that is represented on the canvas as a rect with color. [Color] is used to set or get color info for the rect.
            </summary>
        </member>
        <member name="P:Godot.ColorRect.Color">
            <summary>
            The color to fill the [code]ColorRect[/code].
            [codeblock]
            $ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect node's color to red
            [/codeblock]
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape">
            <summary>
            Concave polygon shape resource, which can be set into a [PhysicsBody] or area. This shape is created by feeding a list of triangles.
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape.SetFaces(Godot.Vector3[])">
            <summary>
            Set the faces (an array of triangles).
            </summary>
        </member>
        <member name="M:Godot.ConcavePolygonShape.GetFaces">
            <summary>
            Return the faces (an array of triangles).
            </summary>
        </member>
        <member name="T:Godot.ConcavePolygonShape2D">
            <summary>
            Concave polygon 2D shape resource for physics. It is made out of segments and is very optimal for complex polygonal concave collisions. It is really not advised to use for [RigidBody2D] nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.
            The main difference between a [ConvexPolygonShape2D] and a [code]ConcavePolygonShape2D[/code] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
            </summary>
        </member>
        <member name="P:Godot.ConcavePolygonShape2D.Segments">
            <summary>
            The array of points that make up the [code]ConcavePolygonShape2D[/code]'s line segments.
            </summary>
        </member>
        <member name="T:Godot.ConeTwistJoint">
            <summary>
            The joint can rotate the bodies across an axis defined by the local x-axes of the [Joint].
            The twist axis is initiated as the x-axis of the [Joint].
            Once the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies.
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.SwingSpan">
            <summary>
            Swing is rotation from side to side, around the axis perpendicular to the twist axis.
            The swing span defines, how much rotation will not get corrected allong the swing axis.
            Could be defined as looseness in the [code]ConeTwistJoint[/code].
            If below 0.05, this behaviour is locked. Default value: [code]PI/4[/code].
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.TwistSpan">
            <summary>
            Twist is the rotation around the twist axis, this value defined how far the joint can twist.
            Twist is locked if below 0.05.
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Bias">
            <summary>
            The speed with which the swing or twist will take place.
            The higher, the faster.
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Softness">
            <summary>
            The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint.
            </summary>
        </member>
        <member name="P:Godot.ConeTwistJoint.Relaxation">
            <summary>
            Defines, how fast the swing- and twist-speed-difference on both sides gets synced.
            </summary>
        </member>
        <member name="T:Godot.ConfigFile">
            <summary>
            This helper class can be used to store [Variant] values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:
            [codeblock]
            [section]
            some_key=42
            string_example="Hello World!"
            a_vector=Vector3( 1, 0, 2 )
            [/codeblock]
            The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.
            The following example shows how to parse an INI-style file from the system, read its contents and store new values in it:
            [codeblock]
            var config = ConfigFile.new()
            var err = config.load("user://settings.cfg")
            if err == OK: # if not, something went wrong with the file loading
            # Look for the display/width pair, and default to 1024 if missing
            var screen_width = get_value("display", "width", 1024)
            # Store a variable if and only if it hasn't been defined yet
            if not config.has_section_key("audio", "mute"):
            config.set_value("audio", "mute", false)
            # Save the changes by overwriting the previous file
            config.save("user://settings.cfg")
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.SetValue(System.String,System.String,System.Object)">
            <summary>
            Assigns a value to the specified key of the the specified section. If the section and/or the key do not exist, they are created. Passing a [code]null[/code] value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetValue(System.String,System.String,System.Object)">
            <summary>
            Returns the current value for the specified section and key. If the section and/or the key do not exist, the method returns the value of the optional [code]default[/code] argument, or [code]null[/code] if it is omitted.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSection(System.String)">
            <summary>
            Returns [code]true[/code] if the specified section exists.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.HasSectionKey(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if the specified section-key pair exists.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSections">
            <summary>
            Returns an array of all defined section identifiers.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.GetSectionKeys(System.String)">
            <summary>
            Returns an array of all defined key identifiers in the specified section.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.EraseSection(System.String)">
            <summary>
            Deletes the specified section along with all the key-value pairs inside.
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Load(System.String)">
            <summary>
            Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ConfigFile object which the method was called on. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].
            </summary>
        </member>
        <member name="M:Godot.ConfigFile.Save(System.String)">
            <summary>
            Saves the contents of the ConfigFile object to the file specified as a parameter. The output file uses an INI-style structure. Returns one of the [code]OK[/code], [code]FAILED[/code] or [code]ERR_*[/code] constants listed in [@GlobalScope]. If the load was successful, the return value is [code]OK[/code].
            </summary>
        </member>
        <member name="T:Godot.ConfirmationDialog">
            <summary>
            Dialog for confirmation of actions. This dialog inherits from [AcceptDialog], but has by default an OK and Cancel button (in host OS order).
            </summary>
        </member>
        <member name="M:Godot.ConfirmationDialog.GetCancel">
            <summary>
            Return the cancel button.
            </summary>
        </member>
        <member name="T:Godot.Container">
            <summary>
            Base node for containers. A [code]Container[/code] contains other controls and automatically arranges them in a certain way.
            A Control can inherit this to create custom container classes.
            </summary>
        </member>
        <member name="M:Godot.Container.QueueSort">
            <summary>
            Queue resort of the contained children. This is called automatically anyway, but can be called upon request.
            </summary>
        </member>
        <member name="M:Godot.Container.FitChildInRect(Godot.Control,Godot.Rect2)">
            <summary>
            Fit a child control in a given rect. This is mainly a helper for creating custom container classes.
            </summary>
        </member>
        <member name="T:Godot.Control">
            <summary>
            Base class for all User Interface or [i]UI[/i] related nodes. [code]Control[/code] features a bounding rectangle that defines its extents, an anchor position relative to its parent and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.
            For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from [code]Control[/code] and [Container] nodes.
            [b]User Interface nodes and input[/b]
            Godot sends input events to the scene's root node first, by calling [method Node._input]. [method Node._input] forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls [method MainLoop._input_event]. Call [method accept_event] so no other node receives the event. Once you accepted an input, it becomes handled so [method Node._unhandled_input] will not process it.
            Only one [code]Control[/code] node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call [method grab_focus]. [code]Control[/code] nodes lose focus when another node grabs it, or if you hide the node in focus.
            Set [member mouse_filter] to MOUSE_FILTER_IGNORE to tell a [code]Control[/code] node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.
            [Theme] resources change the Control's appearance. If you change the [Theme] on a [code]Control[/code] node, it affects all of its children. To override some of the theme's parameters, call one of the [code]add_*_override[/code] methods, like [method add_font_override]. You can override the theme with the inspector.
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorLeft">
            <summary>
            Anchors the left edge of the node to the origin, the center or the end of its parent container. It changes how the left margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorTop">
            <summary>
            Anchors the top edge of the node to the origin, the center or the end of its parent container. It changes how the top margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorRight">
            <summary>
            Anchors the right edge of the node to the origin, the center or the end of its parent container. It changes how the right margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].
            </summary>
        </member>
        <member name="P:Godot.Control.AnchorBottom">
            <summary>
            Anchors the bottom edge of the node to the origin, the center, or the end of its parent container. It changes how the bottom margin updates when the node moves or changes size. Use one of the [code]ANCHOR_*[/code] constants. Default value: [code]ANCHOR_BEGIN[/code].
            </summary>
        </member>
        <member name="P:Godot.Control.MarginLeft">
            <summary>
            Distance between the node's left edge and its parent container, based on [member anchor_left].
            </summary>
        </member>
        <member name="P:Godot.Control.MarginTop">
            <summary>
            Distance between the node's top edge and its parent container, based on [member anchor_top].
            </summary>
        </member>
        <member name="P:Godot.Control.MarginRight">
            <summary>
            Distance between the node's right edge and its parent container, based on [member anchor_right].
            </summary>
        </member>
        <member name="P:Godot.Control.MarginBottom">
            <summary>
            Distance between the node's bottom edge and its parent container, based on [member anchor_bottom].
            Margins are often controlled by one or multiple parent [Container] nodes. Margins update automatically when you move or resize the node.
            </summary>
        </member>
        <member name="P:Godot.Control.GrowHorizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Control.GrowVertical">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Control.RectPosition">
            <summary>
            The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by [member rect_pivot_offset].
            </summary>
        </member>
        <member name="P:Godot.Control.RectGlobalPosition">
            <summary>
            The node's global position, relative to the world (usually to the top-left corner of the window).
            </summary>
        </member>
        <member name="P:Godot.Control.RectSize">
            <summary>
            The size of the node's bounding rectangle, in pixels. [Container] nodes update this property automatically.
            </summary>
        </member>
        <member name="P:Godot.Control.RectMinSize">
            <summary>
            The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes.
            </summary>
        </member>
        <member name="P:Godot.Control.RectRotation">
            <summary>
            The node's rotation around its pivot, in degrees. See [member rect_pivot_offset] to change the pivot's position.
            </summary>
        </member>
        <member name="P:Godot.Control.RectScale">
            <summary>
            The node's scale, relative to its [member rect_size]. Change this property to scale the node around its [member rect_pivot_offset].
            </summary>
        </member>
        <member name="P:Godot.Control.RectPivotOffset">
            <summary>
            By default, the node's pivot is its top-left corner. When you change its [member rect_scale], it will scale around this pivot. Set this property to [member rect_size] / 2 to center the pivot in the node's rectangle.
            </summary>
        </member>
        <member name="P:Godot.Control.RectClipContent">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Control.HintTooltip">
            <summary>
            Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments.
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourLeft">
            <summary>
            Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the left arrow on the keyboard or left on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the left of this one.
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourTop">
            <summary>
            Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab, the top arrow on the keyboard or top on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourRight">
            <summary>
            Tells Godot which node it should give keyboard focus to if the user presses Tab, the right arrow on the keyboard or right on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNeighbourBottom">
            <summary>
            Tells Godot which node it should give keyboard focus to if the user presses Tab, the down arrow on the keyboard, or down on a gamepad. The node must be a [code]Control[/code]. If this property is not set, Godot will give focus to the closest [code]Control[/code] to the bottom of this one.
            If the user presses Tab, Godot will give focus to the closest node to the right first, then to the bottom. If the user presses Shift+Tab, Godot will look to the left of the node, then above it.
            </summary>
        </member>
        <member name="P:Godot.Control.FocusNext">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusPrevious">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Control.FocusMode">
            <summary>
            The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals.
            </summary>
        </member>
        <member name="P:Godot.Control.MouseFilter">
            <summary>
            Controls whether the control will be able to receive mouse button input events through [method _gui_input] and how these events should be handled. Use one of the [code]MOUSE_FILTER_*[/code] constants. See the constants to learn what each does.
            </summary>
        </member>
        <member name="P:Godot.Control.MouseDefaultCursorShape">
            <summary>
            The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsHorizontal">
            <summary>
            Tells the parent [Container] nodes how they should resize and place the node on the X axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does.
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsVertical">
            <summary>
            Tells the parent [Container] nodes how they should resize and place the node on the Y axis. Use one of the [code]SIZE_*[/code] constants to change the flags. See the constants to learn what each does.
            </summary>
        </member>
        <member name="P:Godot.Control.SizeFlagsStretchRatio">
            <summary>
            If the node and at least one of its neighbours uses the [code]SIZE_EXPAND[/code] size flag, the parent [Container] will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space.
            </summary>
        </member>
        <member name="P:Godot.Control.Theme">
            <summary>
            Changing this property replaces the current [Theme] resource this node and all its [code]Control[/code] children use.
            </summary>
        </member>
        <member name="M:Godot.Control._GetMinimumSize">
            <summary>
            Returns the minimum size this Control can shrink to. The node can never be smaller than this minimum size.
            </summary>
        </member>
        <member name="M:Godot.Control._GuiInput(Godot.InputEvent)">
            <summary>
            The node's parent forwards input events to this method. Use it to process and accept inputs on UI elements. See [method accept_event].
            Replaces Godot 2's [code]_input_event[/code].
            </summary>
        </member>
        <member name="M:Godot.Control.CanDropData(Godot.Vector2,System.Object)">
            <summary>
            Godot calls this method to test if [code]data[/code] from a control's [method get_drag_data] can be dropped at [code]position[/code]. [code]position[/code] is local to this control.
            This method should only be used to test the data. Process the data in [method drop_data].
            [codeblock]
            extends Control
            func can_drop_data(position, data):
            # check position if it is relevant to you
            # otherwise just check data
            return typeof(data) == TYPE_DICTIONARY and data.has('expected')
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Control.DropData(Godot.Vector2,System.Object)">
            <summary>
            Godot calls this method to pass you the [code]data[/code] from a control's [method get_drag_data] result. Godot first calls [method can_drop_data] to test if [code]data[/code] is allowed to drop at [code]position[/code] where [code]position[/code] is local to this control.
            [codeblock]
            extends ColorRect
            func can_drop_data(position, data):
            return typeof(data) == TYPE_DICTIONARY and data.has('color')
            func drop_data(position, data):
            color = data['color']
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Control.GetDragData(Godot.Vector2)">
            <summary>
            Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Return null if there is no data to drag. Controls that want to receive drop data should implement [method can_drop_data] and [method drop_data]. [code]position[/code] is local to this control. Drag may be forced with [method force_drag].
            A preview that will follow the mouse that should represent the data can be set with [method set_drag_preview]. A good time to set the preview is in this method.
            [codeblock]
            extends Control
            func get_drag_data(position):
            var mydata = make_data()
            set_drag_preview(make_preview(mydata))
            return mydata
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Control.HasPoint(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.AcceptEvent">
            <summary>
            Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to [method Node._unhandled_input] or [method Node._unhandled_key_input].
            </summary>
        </member>
        <member name="M:Godot.Control.GetMinimumSize">
            <summary>
            Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.
            </summary>
        </member>
        <member name="M:Godot.Control.GetCombinedMinimumSize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsPreset(Godot.Control.LayoutPreset,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetMarginsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorsAndMarginsPreset(Godot.Control.LayoutPreset,Godot.Control.LayoutPresetMode,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchor(Godot.Margin,System.Single,System.Boolean,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetAnchorAndMargin(Godot.Margin,System.Single,System.Single,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetBegin(Godot.Vector2)">
            <summary>
            Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:Godot.Control.SetEnd(Godot.Vector2)">
            <summary>
            Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:Godot.Control.SetRotation(System.Single)">
            <summary>
            Set the rotation (in radians).
            </summary>
        </member>
        <member name="M:Godot.Control.GetBegin">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetEnd">
            <summary>
            Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
            </summary>
        </member>
        <member name="M:Godot.Control.GetRotation">
            <summary>
            Return the rotation (in radians)
            </summary>
        </member>
        <member name="M:Godot.Control.GetParentAreaSize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetRect">
            <summary>
            Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_position], [method get_size]).
            </summary>
        </member>
        <member name="M:Godot.Control.GetGlobalRect">
            <summary>
            Return position and size of the Control, relative to the top-left corner of the [i]window[/i] Control. This is a helper (see [method get_global_position], [method get_size]).
            </summary>
        </member>
        <member name="M:Godot.Control.ShowModal(System.Boolean)">
            <summary>
            Display a Control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.
            </summary>
        </member>
        <member name="M:Godot.Control.HasFocus">
            <summary>
            Return whether the Control is the current focused control (see [method set_focus_mode]).
            </summary>
        </member>
        <member name="M:Godot.Control.GrabFocus">
            <summary>
            Steal the focus from another control and become the focused control (see [method set_focus_mode]).
            </summary>
        </member>
        <member name="M:Godot.Control.ReleaseFocus">
            <summary>
            Give up the focus, no other control will be able to receive keyboard input.
            </summary>
        </member>
        <member name="M:Godot.Control.GetFocusOwner">
            <summary>
            Return which control is owning the keyboard focus, or null if no one.
            </summary>
        </member>
        <member name="M:Godot.Control.AddIconOverride(System.String,Godot.Texture)">
            <summary>
            Overrides the [code]name[/code] icon in the [theme] resource the node uses. If [code]icon[/code] is empty, Godot clears the override.
            </summary>
        </member>
        <member name="M:Godot.Control.AddShaderOverride(System.String,Godot.Shader)">
            <summary>
            Overrides the [code]name[/code] shader in the [theme] resource the node uses. If [code]shader[/code] is empty, Godot clears the override.
            </summary>
        </member>
        <member name="M:Godot.Control.AddStyleboxOverride(System.String,Godot.StyleBox)">
            <summary>
            Overrides the [code]name[/code] [Stylebox] in the [theme] resource the node uses. If [code]stylebox[/code] is empty, Godot clears the override.
            </summary>
        </member>
        <member name="M:Godot.Control.AddFontOverride(System.String,Godot.Font)">
            <summary>
            Overrides the [code]name[/code] font in the [theme] resource the node uses. If [code]font[/code] is empty, Godot clears the override.
            </summary>
        </member>
        <member name="M:Godot.Control.AddColorOverride(System.String,Godot.Color)">
            <summary>
            Overrides the color in the [theme] resource the node uses.
            </summary>
        </member>
        <member name="M:Godot.Control.AddConstantOverride(System.String,System.Int32)">
            <summary>
            Overrides an integer constant in the [Theme] resource the node uses. If the [code]constant[/code] is invalid, Godot clears the override. See [member Theme.INVALID_CONSTANT] for more information.
            </summary>
        </member>
        <member name="M:Godot.Control.GetIcon(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetStylebox(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetFont(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetColor(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetConstant(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasIconOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasShaderOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasStyleboxOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasFontOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasColorOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasConstantOverride(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasIcon(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasStylebox(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasFont(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasColor(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.HasConstant(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetParentControl">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.GetTooltip(System.Nullable{Godot.Vector2})">
            <summary>
            Return the tooltip, which will appear when the cursor is resting over this control.
            &lt;param name="atPosition"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Control.GetCursorShape(System.Nullable{Godot.Vector2})">
            <summary>
            Returns the mouse cursor shape the control displays on mouse hover, one of the [code]CURSOR_*[/code] constants.
            &lt;param name="position"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Control.ForceDrag(System.Object,Godot.Control)">
            <summary>
            Forces drag and bypasses [method get_drag_data] and [method set_drag_preview] by passing [code]data[/code] and [code]preview[/code]. Drag will start even if the mouse is neither over nor pressed on this control.
            The methods [method can_drop_data] and [method drop_data] must be implemented on controls that want to receive drop data.
            </summary>
        </member>
        <member name="M:Godot.Control.GrabClickFocus">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragForwarding(Godot.Control)">
            <summary>
            Forwards the handling of this control's drag and drop to [code]target[/code] control.
            Forwarding can be implemented in the target control similar to the methods [method get_drag_data], [method can_drop_data], and [method drop_data] but with two differences:
            1. The function name must be suffixed with [b]_fw[/b]
            2. The function must take an extra argument that is the control doing the forwarding
            [codeblock]
            # ThisControl.gd
            extends Control
            func _ready():
            set_drag_forwarding(target_control)
            # TargetControl.gd
            extends Control
            func can_drop_data_fw(position, data, from_control):
            return true
            func drop_data_fw(position, data, from_control):
            my_handle_data(data)
            func get_drag_data_fw(position, from_control):
            set_drag_preview(my_preview)
            return my_data()
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Control.SetDragPreview(Godot.Control)">
            <summary>
            Shows the given control at the mouse pointer. A good time to call this method is in [method get_drag_data].
            </summary>
        </member>
        <member name="M:Godot.Control.WarpMouse(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Control.MinimumSizeChanged">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape">
            <summary>
            Convex polygon shape resource, which can be added to a [PhysicsBody] or area.
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape.Points">
            <summary>
            The list of 3D points forming the convex polygon shape.
            </summary>
        </member>
        <member name="T:Godot.ConvexPolygonShape2D">
            <summary>
            Convex Polygon Shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).
            The main difference between a [code]ConvexPolygonShape2D[/code] and a [ConcavePolygonShape2D] is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection.
            </summary>
        </member>
        <member name="P:Godot.ConvexPolygonShape2D.Points">
            <summary>
            The polygon's list of vertices. Can be in either clockwise or counterclockwise order.
            </summary>
        </member>
        <member name="M:Godot.ConvexPolygonShape2D.SetPointCloud(Godot.Vector2[])">
            <summary>
            Currently, this method does nothing.
            </summary>
        </member>
        <member name="M:Godot.CSharpScript.New(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.CubeMap">
            <summary>
            A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods.
            </summary>
        </member>
        <member name="P:Godot.CubeMap.Flags">
            <summary>
            The render flags for the [code]CubeMap[/code]. See the [code]FLAG_*[/code] constants for details.
            </summary>
        </member>
        <member name="P:Godot.CubeMap.StorageMode">
            <summary>
            The [code]CubeMap[/code]'s storage mode. See [code]STORAGE_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.CubeMap.LossyStorageQuality">
            <summary>
            The lossy storage quality of the [code]CubeMap[/code] if the storage mode is set to STORAGE_COMPRESS_LOSSY.
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetWidth">
            <summary>
            Returns the [code]CubeMap[/code]'s width.
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetHeight">
            <summary>
            Returns the [code]CubeMap[/code]'s height.
            </summary>
        </member>
        <member name="M:Godot.CubeMap.SetSide(Godot.CubeMap.Side,Godot.Image)">
            <summary>
            Sets an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
            </summary>
        </member>
        <member name="M:Godot.CubeMap.GetSide(Godot.CubeMap.Side)">
            <summary>
            Returns an [Image] for a side of the [code]CubeMap[/code] using one of the [code]SIDE_*[/code] constants or an integer 0-5.
            </summary>
        </member>
        <member name="T:Godot.CubeMesh">
            <summary>
            Generate an axis-aligned cuboid [PrimitiveMesh].
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.Size">
            <summary>
            Size of the cuboid mesh. Defaults to (2, 2, 2).
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideWidth">
            <summary>
            Number of extra edge loops inserted along the x-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideHeight">
            <summary>
            Number of extra edge loops inserted along the y-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.CubeMesh.SubdivideDepth">
            <summary>
            Number of extra edge loops inserted along the z-axis. Defaults to 0.
            </summary>
        </member>
        <member name="T:Godot.Curve">
            <summary>
            A curve that can be saved and re-used for other objects. By default it ranges between [code]0[/code] and [code]1[/code] on the y-axis and positions points relative to the [code]0.5[/code] y-position.
            </summary>
        </member>
        <member name="P:Godot.Curve.MinValue">
            <summary>
            The minimum value the curve can reach. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Curve.MaxValue">
            <summary>
            The maximum value the curve can reach. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.Curve.BakeResolution">
            <summary>
            The number of points to include in the baked (i.e. cached) curve data.
            </summary>
        </member>
        <member name="M:Godot.Curve.AddPoint(Godot.Vector2,System.Single,System.Single,Godot.Curve.TangentMode,Godot.Curve.TangentMode)">
            <summary>
            Adds a point to the curve. For each side, if the [code]*_mode[/code] is [code]TANGENT_LINEAR[/code], the [code]*_tangent[/code] angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the [code]*_tangent[/code] angle if [code]*_mode[/code] is set to [code]TANGENT_FREE[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.RemovePoint(System.Int32)">
            <summary>
            Removes the point at [code]index[/code] from the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve.ClearPoints">
            <summary>
            Removes all points from the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointPosition(System.Int32)">
            <summary>
            Returns the curve coordinates for the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointValue(System.Int32,System.Single)">
            <summary>
            Assigns the vertical position [code]y[/code] to the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointOffset(System.Int32,System.Single)">
            <summary>
            Sets the offset from [code]0.5[/code]
            </summary>
        </member>
        <member name="M:Godot.Curve.Interpolate(System.Single)">
            <summary>
            Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve.InterpolateBaked(System.Single)">
            <summary>
            Returns the y value for the point that would exist at x-position [code]offset[/code] along the curve using the baked cache. Bakes the curve's points if not already baked.
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftTangent(System.Int32)">
            <summary>
            Returns the left tangent angle (in degrees) for the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightTangent(System.Int32)">
            <summary>
            Returns the right tangent angle (in degrees) for the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointLeftMode(System.Int32)">
            <summary>
            Returns the left [code]TangentMode[/code] for the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.GetPointRightMode(System.Int32)">
            <summary>
            Returns the right [code]TangentMode[/code] for the point at [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftTangent(System.Int32,System.Single)">
            <summary>
            Sets the left tangent angle for the point at [code]index[/code] to [code]tangent[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightTangent(System.Int32,System.Single)">
            <summary>
            Sets the right tangent angle for the point at [code]index[/code] to [code]tangent[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointLeftMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            Sets the left [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.SetPointRightMode(System.Int32,Godot.Curve.TangentMode)">
            <summary>
            Sets the right [code]TangentMode[/code] for the point at [code]index[/code] to [code]mode[/code].
            </summary>
        </member>
        <member name="M:Godot.Curve.CleanDupes">
            <summary>
            Removes points that are closer than [code]CMP_EPSILON[/code] (0.00001) units to their neighbor on the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve.Bake">
            <summary>
            Recomputes the baked cache of points for the curve.
            </summary>
        </member>
        <member name="T:Godot.Curve2D">
            <summary>
            This class describes a Bezier curve in 2D space. It is mainly used to give a shape to a [Path2D], but can be manually sampled for other purposes.
            It keeps a cache of precalculated points along the curve, to speed further calculations up.
            </summary>
        </member>
        <member name="P:Godot.Curve2D.BakeInterval">
            <summary>
            The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointCount">
            <summary>
            Returns the number of points describing the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.AddPoint(Godot.Vector2,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2},System.Int32)">
            <summary>
            Adds a point to a curve, at "position", with control points "in" and "out".
            If "at_position" is given, the point is inserted before the point number "at_position", moving that point (and every point after) after the inserted point. If "at_position" is not given, or is an illegal value (at_position &lt;0 or at_position &gt;= [method get_point_count]), the point will be appended at the end of the point list.
            &lt;param name="@in"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            &lt;param name="@out"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            Sets the position for the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointPosition(System.Int32)">
            <summary>
            Returns the position of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointIn(System.Int32,Godot.Vector2)">
            <summary>
            Sets the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointIn(System.Int32)">
            <summary>
            Returns the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve2D.SetPointOut(System.Int32,Godot.Vector2)">
            <summary>
            Sets the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetPointOut(System.Int32)">
            <summary>
            Returns the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve2D.RemovePoint(System.Int32)">
            <summary>
            Deletes the point "idx" from the curve. Sends an error to the console if "idx" is out of bounds.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.ClearPoints">
            <summary>
            Removes all points from the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolate(System.Int32,System.Single)">
            <summary>
            Returns the position between the vertex "idx" and the vertex "idx"+1, where "t" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of "t" outside the range (0.0 &gt;= t  &lt;=1) give strange, but predictable results.
            If "idx" is out of bounds it is truncated to the first or last vertex, and "t" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Interpolatef(System.Single)">
            <summary>
            Returns the position at the vertex "fofs". It calls [method interpolate] using the integer part of fofs as "idx", and its fractional part as "t".
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedLength">
            <summary>
            Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.
            </summary>
        </member>
        <member name="M:Godot.Curve2D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            Returns a point within the curve at position "offset", where "offset" is measured as a pixel distance along the curve.
            To do that, it finds the two cached points where the "offset" lies between, then interpolates the values. This interpolation is cubic if "cubic" is set to true, or linear if set to false.
            Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
            </summary>
        </member>
        <member name="M:Godot.Curve2D.GetBakedPoints">
            <summary>
            Returns the cache of points as a [PoolVector2Array].
            </summary>
        </member>
        <member name="M:Godot.Curve2D.Tessellate(System.Int32,System.Single)">
            <summary>
            Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.
            This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.
            "max_stages" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
            "tolerance_degrees" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.
            </summary>
        </member>
        <member name="T:Godot.Curve3D">
            <summary>
            This class describes a Bezier curve in 3D space. It is mainly used to give a shape to a [Path], but can be manually sampled for other purposes.
            It keeps a cache of precalculated points along the curve, to speed further calculations up.
            </summary>
        </member>
        <member name="P:Godot.Curve3D.BakeInterval">
            <summary>
            The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the [method get_baked_points] or [method get_baked_length] function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointCount">
            <summary>
            Returns the number of points describing the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.AddPoint(Godot.Vector3,System.Nullable{Godot.Vector3},System.Nullable{Godot.Vector3},System.Int32)">
            <summary>
            Adds a point to a curve, at "position", with control points "in" and "out".
            If "at_position" is given, the point is inserted before the point number "at_position", moving that point (and every point after) after the inserted point. If "at_position" is not given, or is an illegal value (at_position &lt;0 or at_position &gt;= [method get_point_count]), the point will be appended at the end of the point list.
            &lt;param name="@in"&gt;If the param is null, then the default value is new Vector3(0, 0, 0)&lt;/param&gt;
            &lt;param name="@out"&gt;If the param is null, then the default value is new Vector3(0, 0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointPosition(System.Int32,Godot.Vector3)">
            <summary>
            Sets the position for the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointPosition(System.Int32)">
            <summary>
            Returns the position of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointTilt(System.Int32,System.Single)">
            <summary>
            Sets the tilt angle in radians for the point "idx". If the index is out of bounds, the function sends an error to the console.
            The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a [PathFollow], this tilt is an offset over the natural tilt the PathFollow calculates.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointTilt(System.Int32)">
            <summary>
            Returns the tilt angle in radians for the point "idx". If the index is out of bounds, the function sends an error to the console, and returns 0.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointIn(System.Int32,Godot.Vector3)">
            <summary>
            Sets the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointIn(System.Int32)">
            <summary>
            Returns the position of the control point leading to the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve3D.SetPointOut(System.Int32,Godot.Vector3)">
            <summary>
            Sets the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetPointOut(System.Int32)">
            <summary>
            Returns the position of the control point leading out of the vertex "idx". If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve3D.RemovePoint(System.Int32)">
            <summary>
            Deletes the point "idx" from the curve. Sends an error to the console if "idx" is out of bounds.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.ClearPoints">
            <summary>
            Removes all points from the curve.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolate(System.Int32,System.Single)">
            <summary>
            Returns the position between the vertex "idx" and the vertex "idx"+1, where "t" controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of "t" outside the range (0.0 &gt;= t  &lt;=1) give strange, but predictable results.
            If "idx" is out of bounds it is truncated to the first or last vertex, and "t" is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0).
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Interpolatef(System.Single)">
            <summary>
            Returns the position at the vertex "fofs". It calls [method interpolate] using the integer part of fofs as "idx", and its fractional part as "t".
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedLength">
            <summary>
            Returns the total length of the curve, based on the cached points. Given enough density (see [method set_bake_interval]), it should be approximate enough.
            </summary>
        </member>
        <member name="M:Godot.Curve3D.InterpolateBaked(System.Single,System.Boolean)">
            <summary>
            Returns a point within the curve at position "offset", where "offset" is measured as a distance in 3D units along the curve.
            To do that, it finds the two cached points where the "offset" lies between, then interpolates the values. This interpolation is cubic if "cubic" is set to true, or linear if set to false.
            Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough).
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedPoints">
            <summary>
            Returns the cache of points as a [PoolVector3Array].
            </summary>
        </member>
        <member name="M:Godot.Curve3D.GetBakedTilts">
            <summary>
            Returns the cache of tilts as a [RealArray].
            </summary>
        </member>
        <member name="M:Godot.Curve3D.Tessellate(System.Int32,System.Single)">
            <summary>
            Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.
            This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.
            "max_stages" controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!
            "tolerance_degrees" controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided.
            </summary>
        </member>
        <member name="T:Godot.CurveTexture">
            <summary>
            Renders a given [Curve] provided to it. Simplifies the task of drawing curves and/or saving them as image files.
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="P:Godot.CurveTexture.Curve">
            <summary>
            The [code]curve[/code] rendered onto the texture.
            </summary>
        </member>
        <member name="T:Godot.CylinderMesh">
            <summary>
            Class representing a cylindrical [PrimitiveMesh].
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.TopRadius">
            <summary>
            Top radius of the cylinder. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.BottomRadius">
            <summary>
            Bottom radius of the cylinder. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Height">
            <summary>
            Full height of the cylinder. Defaults to 2.0.
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.RadialSegments">
            <summary>
            Number of radial segments on the cylinder. Defaults to 64.
            </summary>
        </member>
        <member name="P:Godot.CylinderMesh.Rings">
            <summary>
            Number of edge rings along the height of the cylinder. Defaults to 4.
            </summary>
        </member>
        <member name="T:Godot.DampedSpringJoint2D">
            <summary>
            Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length.
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Length">
            <summary>
            The spring joint's maximum length. The two attached bodies cannot stretch it past this value. Default value: [code]50[/code]
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.RestLength">
            <summary>
            When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. Default value: [code]0[/code]
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Stiffness">
            <summary>
            The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length. Default value: [code]20[/code]
            </summary>
        </member>
        <member name="P:Godot.DampedSpringJoint2D.Damping">
            <summary>
            The spring joint's damping ratio. A value between [code]0[/code] and [code]1[/code]. When the two bodies move into different directions the system tries to align them to the spring axis again. A high [code]damping[/code] value forces the attached bodies to align faster. Default value: [code]1[/code]
            </summary>
        </member>
        <member name="T:Godot.DirectionalLight">
            <summary>
            A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit1">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowSplit3">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowBlendSplits">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowNormalBias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowBiasSplitScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowDepthRange">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.DirectionalLight.DirectionalShadowMaxDistance">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Directory">
            <summary>
            Directory type. It is used to manage directories and their content (not restricted to the project folder).
            Here is an example on how to iterate through the files of a directory:
            [codeblock]
            func dir_contents(path):
            var dir = Directory.new()
            if dir.open(path) == OK:
            dir.list_dir_begin()
            var file_name = dir.get_next()
            while (file_name != ""):
            if dir.current_is_dir():
            print("Found directory: " + file_name)
            else:
            print("Found file: " + file_name)
            file_name = dir.get_next()
            else:
            print("An error occurred when trying to access the path.")
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Directory.Open(System.String)">
            <summary>
            Open an existing directory of the filesystem. The [i]path[/i] argument can be within the project tree ([code]res://folder[/code]), the user directory ([code]user://folder[/code]) or an absolute path of the user filesystem (e.g. [code]/tmp/folder[/code] or [code]C:\tmp\folder[/code]).
            The method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirBegin(System.Boolean,System.Boolean)">
            <summary>
            Initialise the stream used to list all files and directories using the [method get_next] function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with [method list_dir_end].
            If you pass [code]skip_navigational[/code], then [code].[/code] and [code]..[/code] would be filtered out.
            If you pass [code]skip_hidden[/code], then hidden files would be filtered out.
            </summary>
        </member>
        <member name="M:Godot.Directory.GetNext">
            <summary>
            Return the next element (file or directory) in the current directory (including [code].[/code] and [code]..[/code], unless [code]skip_navigational[/code] was given to [method list_dir_begin]).
            The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. [method list_dir_end] would not be mandatory in such a case).
            </summary>
        </member>
        <member name="M:Godot.Directory.CurrentIsDir">
            <summary>
            Return whether the current item processed with the last [method get_next] call is a directory ([code].[/code] and [code]..[/code] are considered directories).
            </summary>
        </member>
        <member name="M:Godot.Directory.ListDirEnd">
            <summary>
            Close the current stream opened with [method list_dir_begin] (whether it has been fully processed with [method get_next] or not does not matter).
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDriveCount">
            <summary>
            On Windows, return the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0.
            </summary>
        </member>
        <member name="M:Godot.Directory.GetDrive(System.Int32)">
            <summary>
            On Windows, return the name of the drive (partition) passed as an argument (e.g. [code]C:[/code]). On other platforms, or if the requested drive does not existed, the method returns an empty String.
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDrive">
            <summary>
            Returns the currently opened directory's drive index. See [method get_drive] to convert returned index to the name of the drive.
            </summary>
        </member>
        <member name="M:Godot.Directory.ChangeDir(System.String)">
            <summary>
            Change the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. [code]newdir[/code] or [code]../newdir[/code]), or an absolute path (e.g. [code]/tmp/newdir[/code] or [code]res://somedir/newdir[/code]).
            The method returns one of the error code constants defined in [@GlobalScope] (OK or ERR_*).
            </summary>
        </member>
        <member name="M:Godot.Directory.GetCurrentDir">
            <summary>
            Return the absolute path to the currently opened directory (e.g. [code]res://folder[/code] or [code]C:\tmp\folder[/code]).
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDir(System.String)">
            <summary>
            Create a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see [method make_dir_recursive]).
            The method returns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:Godot.Directory.MakeDirRecursive(System.String)">
            <summary>
            Create a target directory and all necessary intermediate directories in its path, by calling [method make_dir] recursively. The argument can be relative to the current directory, or an absolute path.
            Return one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:Godot.Directory.FileExists(System.String)">
            <summary>
            Return whether the target file exists. The argument can be relative to the current directory, or an absolute path.
            </summary>
        </member>
        <member name="M:Godot.Directory.DirExists(System.String)">
            <summary>
            Return whether the target directory exists. The argument can be relative to the current directory, or an absolute path.
            </summary>
        </member>
        <member name="M:Godot.Directory.GetSpaceLeft">
            <summary>
            On Unix desktop systems, return the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1.
            </summary>
        </member>
        <member name="M:Godot.Directory.Copy(System.String,System.String)">
            <summary>
            Copy the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
            Returns one of the error code constants defined in [@GlobalScope] (OK, FAILED or ERR_*).
            </summary>
        </member>
        <member name="M:Godot.Directory.Rename(System.String,System.String)">
            <summary>
            Rename (move) the [i]from[/i] file to the [i]to[/i] destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
            Return one of the error code constants defined in [@GlobalScope] (OK or FAILED).
            </summary>
        </member>
        <member name="M:Godot.Directory.Remove(System.String)">
            <summary>
            Delete the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.
            Return one of the error code constants defined in [@GlobalScope] (OK or FAILED).
            </summary>
        </member>
        <member name="T:Godot.DynamicFont">
            <summary>
            DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.Size">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.UseMipmaps">
            <summary>
            If [code]true[/code] mipmapping is used.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.UseFilter">
            <summary>
            If [code]true[/code] filtering is used.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingTop">
            <summary>
            Extra spacing at the top in pixels.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingBottom">
            <summary>
            Extra spacing at the bottom in pixels.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingChar">
            <summary>
            Extra character spacing in pixels.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.ExtraSpacingSpace">
            <summary>
            Extra space spacing in pixels.
            </summary>
        </member>
        <member name="P:Godot.DynamicFont.FontData">
            <summary>
            The font data.
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.AddFallback(Godot.DynamicFontData)">
            <summary>
            Adds a fallback font.
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.SetFallback(System.Int32,Godot.DynamicFontData)">
            <summary>
            Sets the fallback font at index [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.GetFallback(System.Int32)">
            <summary>
            Returns the fallback font at index [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.RemoveFallback(System.Int32)">
            <summary>
            Removes the fallback font at index [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.DynamicFont.GetFallbackCount">
            <summary>
            Returns the number of fallback fonts.
            </summary>
        </member>
        <member name="T:Godot.DynamicFontData">
            <summary>
            Used with [DynamicFont] to describe the location of a vector font file for dynamic rendering at runtime.
            </summary>
        </member>
        <member name="P:Godot.DynamicFontData.Hinting">
            <summary>
            The font hinting mode used by FreeType.
            </summary>
        </member>
        <member name="P:Godot.DynamicFontData.FontPath">
            <summary>
            The path to the vector font file.
            </summary>
        </member>
        <member name="M:Godot.EncodedObjectAsID.SetObjectId(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.EncodedObjectAsID.GetObjectId">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Engine">
            <summary>
            The [code]Engine[/code] class allows you to query and modify the game's run-time parameters, such as frames per second, time scale, and others.
            </summary>
        </member>
        <member name="P:Godot.Engine.EditorHint">
            <summary>
            If [code]true[/code], it is running inside the editor. Useful for tool scripts.
            </summary>
        </member>
        <member name="P:Godot.Engine.IterationsPerSecond">
            <summary>
            The number of fixed iterations per second (for fixed process and physics).
            </summary>
        </member>
        <member name="P:Godot.Engine.TargetFps">
            <summary>
            The desired frames per second. If the hardware cannot keep up, this setting may not be respected. Defaults to 0, which indicates no limit.
            </summary>
        </member>
        <member name="P:Godot.Engine.TimeScale">
            <summary>
            Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed.
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesDrawn">
            <summary>
            Returns the total number of frames drawn.
            </summary>
        </member>
        <member name="M:Godot.Engine.GetFramesPerSecond">
            <summary>
            Returns the frames per second of the running game.
            </summary>
        </member>
        <member name="M:Godot.Engine.GetMainLoop">
            <summary>
            Returns the main loop object (see [MainLoop] and [SceneTree]).
            </summary>
        </member>
        <member name="M:Godot.Engine.GetVersionInfo">
            <summary>
            Returns the current engine version information in a Dictionary.
            "major"    - Holds the major version number as an int
            "minor"    - Holds the minor version number as an int
            "patch"    - Holds the patch version number as an int
            "status"   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String
            "build"    - Holds the build name (e.g. "custom-build") as a String
            "string"   - major + minor + patch + status + build in a single String
            </summary>
        </member>
        <member name="M:Godot.Engine.IsInPhysicsFrame">
            <summary>
            Returns [code]true[/code] if the game is inside the fixed process and physics phase of the game loop.
            </summary>
        </member>
        <member name="M:Godot.Engine.HasSingleton(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Engine.GetSingleton(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Environment">
            <summary>
            Resource for environment nodes (like [WorldEnvironment]) that define multiple environment operations (such as background [Sky] or [Color], ambient light, fog, depth-of-field...).	These parameters affect the final render of the scene. The order of these operations is:
            - DOF Blur
            - Motion Blur
            - Bloom
            - Tonemap (auto exposure)
            - Adjustments
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundMode">
            <summary>
            Defines the mode of background.
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSky">
            <summary>
            [Sky] resource defined as background.
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundSkyCustomFov">
            <summary>
            [Sky] resource's custom field of view.
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundColor">
            <summary>
            Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes).
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundEnergy">
            <summary>
            Power of light emitted by the background.
            </summary>
        </member>
        <member name="P:Godot.Environment.BackgroundCanvasMaxLayer">
            <summary>
            Maximum layer id (if using Layer background mode).
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightColor">
            <summary>
            [Color] of the ambient light.
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightEnergy">
            <summary>
            Energy of the ambient light. The higher the value, the stronger the light.
            </summary>
        </member>
        <member name="P:Godot.Environment.AmbientLightSkyContribution">
            <summary>
            Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogEnabled">
            <summary>
            Enables the fog. Needs fog_height_enabled and/or for_depth_enabled to actually display fog.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogColor">
            <summary>
            Fog's [Color].
            </summary>
        </member>
        <member name="P:Godot.Environment.FogSunColor">
            <summary>
            Sun [Color].
            </summary>
        </member>
        <member name="P:Godot.Environment.FogSunAmount">
            <summary>
            Amount of sun that affects the fog rendering.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthEnabled">
            <summary>
            Enables the fog depth.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthBegin">
            <summary>
            Fog's depth starting distance from the camera.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogDepthCurve">
            <summary>
            Value defining the fog depth intensity.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogTransmitEnabled">
            <summary>
            Enables fog's light transmission. If enabled, lets reflections light to be transmitted by the fog.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogTransmitCurve">
            <summary>
            Amount of light that the fog transmits.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightEnabled">
            <summary>
            Enables the fog height.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightMin">
            <summary>
            Minimum height of fog.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightMax">
            <summary>
            Maximum height of fog.
            </summary>
        </member>
        <member name="P:Godot.Environment.FogHeightCurve">
            <summary>
            Value defining the fog height intensity.
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapMode">
            <summary>
            Tonemapping mode.
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapExposure">
            <summary>
            Default exposure for tonemap.
            </summary>
        </member>
        <member name="P:Godot.Environment.TonemapWhite">
            <summary>
            White reference value for tonemap.
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureEnabled">
            <summary>
            Enables the tonemapping auto exposure mode of the scene renderer. If activated, the renderer will automatically determine the exposure setting to adapt to the illumination of the scene and the observed light.
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureScale">
            <summary>
            Scale of the auto exposure effect. Affects the intensity of auto exposure.
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMinLuma">
            <summary>
            Minimum luminance value for the auto exposure.
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureMaxLuma">
            <summary>
            Maximum luminance value for the auto exposure.
            </summary>
        </member>
        <member name="P:Godot.Environment.AutoExposureSpeed">
            <summary>
            Speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure.
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsMaxSteps">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeIn">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsFadeOut">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsDepthTolerance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsReflectionsRoughness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoRadius">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoIntensity">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoRadius2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoIntensity2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoBias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoLightAffect">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoQuality">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoBlur">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.SsaoEdgeSharpness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarEnabled">
            <summary>
            Enables the far blur effect.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarDistance">
            <summary>
            Distance from the camera where the far blur effect affects the rendering.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarTransition">
            <summary>
            Transition between no-blur area and far blur.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarAmount">
            <summary>
            Amount of far blur.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurFarQuality">
            <summary>
            Quality of the far blur quality.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearEnabled">
            <summary>
            Enables the near blur effect.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearDistance">
            <summary>
            Distance from the camera where the near blur effect affects the rendering.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearTransition">
            <summary>
            Transition between near blur and no-blur area.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearAmount">
            <summary>
            Amount of near blur.
            </summary>
        </member>
        <member name="P:Godot.Environment.DofBlurNearQuality">
            <summary>
            Quality of the near blur quality.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowEnabled">
            <summary>
            Enables glow rendering.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__1">
            <summary>
            First level of glow (most local).
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__2">
            <summary>
            Second level of glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__3">
            <summary>
            Third level of glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__4">
            <summary>
            Fourth level of glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__5">
            <summary>
            Fifth level of glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__6">
            <summary>
            Sixth level of glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowLevels__7">
            <summary>
            Seventh level of glow (most global).
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowIntensity">
            <summary>
            Glow intensity.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowStrength">
            <summary>
            Glow strength.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBloom">
            <summary>
            Bloom value (global glow).
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBlendMode">
            <summary>
            Glow blending mode.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrThreshold">
            <summary>
            Bleed threshold of the HDR glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowHdrScale">
            <summary>
            Bleed scale of the HDR glow.
            </summary>
        </member>
        <member name="P:Godot.Environment.GlowBicubicUpscale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentEnabled">
            <summary>
            Enables the adjustment_* options provided by this resource. If false, adjustments modifications will have no effect on the rendered scene.
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentBrightness">
            <summary>
            Global brightness value of the rendered scene (default value is 1).
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentContrast">
            <summary>
            Global contrast value of the rendered scene (default value is 1).
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentSaturation">
            <summary>
            Global color saturation value of the rendered scene (default value is 1).
            </summary>
        </member>
        <member name="P:Godot.Environment.AdjustmentColorCorrection">
            <summary>
            Applies the provided [Texture] resource to affect the global color aspect of the rendered scene.
            </summary>
        </member>
        <member name="T:Godot.File">
            <summary>
            File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.
            Here's a sample on how to write and read from a file:
            [codeblock]
            func save(content):
            var file = File.new()
            file.open("user://save_game.dat", file.WRITE)
            file.store_string(content)
            file.close()
            func load():
            var file = File.new()
            file.open("user://save_game.dat", file.READ)
            var content = file.get_as_text()
            file.close()
            return content
            [/codeblock]
            </summary>
        </member>
        <member name="P:Godot.File.EndianSwap">
            <summary>
            If [code]true[/code] the file's endianness is swapped. Use this if you're dealing with files written in big endian machines.
            Note that this is about the file format, not CPU type. This is always reset to [code]false[/code] whenever you open the file.
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncrypted(System.String,System.Int32,System.Byte[])">
            <summary>
            Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it.
            </summary>
        </member>
        <member name="M:Godot.File.OpenEncryptedWithPass(System.String,System.Int32,System.String)">
            <summary>
            Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it.
            </summary>
        </member>
        <member name="M:Godot.File.OpenCompressed(System.String,System.Int32,System.Int32)">
            <summary>
            Opens a compressed file for reading or writing. Use COMPRESSION_* constants to set [code]compression_mode[/code].
            </summary>
        </member>
        <member name="M:Godot.File.Open(System.String,System.Int32)">
            <summary>
            Opens the file for writing or reading, depending on the flags.
            </summary>
        </member>
        <member name="M:Godot.File.Close">
            <summary>
            Closes the currently opened file.
            </summary>
        </member>
        <member name="M:Godot.File.GetPath">
            <summary>
            Returns the path as a [String] for the current open file.
            </summary>
        </member>
        <member name="M:Godot.File.GetPathAbsolute">
            <summary>
            Returns the absolute path as a [String] for the current open file.
            </summary>
        </member>
        <member name="M:Godot.File.IsOpen">
            <summary>
            Returns [code]true[/code] if the file is currently opened.
            </summary>
        </member>
        <member name="M:Godot.File.Seek(System.Int32)">
            <summary>
            Change the file reading/writing cursor to the specified position (in bytes from the beginning of the file).
            </summary>
        </member>
        <member name="M:Godot.File.SeekEnd(System.Int32)">
            <summary>
            Changes the file reading/writing cursor to the specified position (in bytes from the end of the file). Note that this is an offset, so you should use negative numbers or the cursor will be at the end of the file.
            </summary>
        </member>
        <member name="M:Godot.File.GetPosition">
            <summary>
            Returns the file cursor's position.
            </summary>
        </member>
        <member name="M:Godot.File.GetLen">
            <summary>
            Returns the size of the file in bytes.
            </summary>
        </member>
        <member name="M:Godot.File.EofReached">
            <summary>
            Returns [code]true[/code] if the file cursor has reached the end of the file.
            </summary>
        </member>
        <member name="M:Godot.File.Get8">
            <summary>
            Returns the next 8 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:Godot.File.Get16">
            <summary>
            Returns the next 16 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:Godot.File.Get32">
            <summary>
            Returns the next 32 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:Godot.File.Get64">
            <summary>
            Returns the next 64 bits from the file as an integer.
            </summary>
        </member>
        <member name="M:Godot.File.GetFloat">
            <summary>
            Returns the next 32 bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:Godot.File.GetDouble">
            <summary>
            Returns the next 64 bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:Godot.File.GetReal">
            <summary>
            Returns the next bits from the file as a floating point number.
            </summary>
        </member>
        <member name="M:Godot.File.GetBuffer(System.Int32)">
            <summary>
            Returns next [code]len[/code] bytes of the file as a [PoolByteArray].
            </summary>
        </member>
        <member name="M:Godot.File.GetLine">
            <summary>
            Returns the next line of the file as a [String].
            </summary>
        </member>
        <member name="M:Godot.File.GetAsText">
            <summary>
            Returns the whole file as a [String].
            </summary>
        </member>
        <member name="M:Godot.File.GetMd5(System.String)">
            <summary>
            Returns an MD5 String representing the file at the given path or an empty [String] on failure.
            </summary>
        </member>
        <member name="M:Godot.File.GetSha256(System.String)">
            <summary>
            Returns a SHA-256 [String] representing the file at the given path or an empty [String] on failure.
            </summary>
        </member>
        <member name="M:Godot.File.GetError">
            <summary>
            Returns the last error that happened when trying to perform operations. Compare with the [code]ERR_FILE_*[/code] constants from [@GlobalScope].
            </summary>
        </member>
        <member name="M:Godot.File.GetVar">
            <summary>
            Returns the next [Variant] value from the file.
            </summary>
        </member>
        <member name="M:Godot.File.GetCsvLine(System.String)">
            <summary>
            Returns the next value of the file in CSV (Comma Separated Values) format. You can pass a different delimiter to use other than the default "," (comma).
            </summary>
        </member>
        <member name="M:Godot.File.Store8(System.Int32)">
            <summary>
            Stores an integer as 8 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.Store16(System.Int32)">
            <summary>
            Stores an integer as 16 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.Store32(System.Int32)">
            <summary>
            Stores an integer as 32 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.Store64(System.Int32)">
            <summary>
            Stores an integer as 64 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreFloat(System.Single)">
            <summary>
            Stores a floating point number as 32 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreDouble(System.Single)">
            <summary>
            Stores a floating point number as 64 bits in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreReal(System.Single)">
            <summary>
            Stores a floating point number in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreBuffer(System.Byte[])">
            <summary>
            Stores the given array of bytes in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreLine(System.String)">
            <summary>
            Stores the given [String] as a line in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreString(System.String)">
            <summary>
            Stores the given [String] in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StoreVar(System.Object)">
            <summary>
            Stores any Variant value in the file.
            </summary>
        </member>
        <member name="M:Godot.File.StorePascalString(System.String)">
            <summary>
            Stores the given [String] as a line in the file in Pascal format (i.e. also store the length of the string).
            </summary>
        </member>
        <member name="M:Godot.File.GetPascalString">
            <summary>
            Returns a [String] saved in Pascal format from the file.
            </summary>
        </member>
        <member name="M:Godot.File.FileExists(System.String)">
            <summary>
            Returns [code]true[/code] if the file exists in the given path.
            </summary>
        </member>
        <member name="M:Godot.File.GetModifiedTime(System.String)">
            <summary>
            Returns the last time the [code]file[/code] was modified in unix timestamp format or returns a [String] "ERROR IN [code]file[/code]". This unix timestamp can be converted to datetime by using [method OS.get_datetime_from_unix_time].
            </summary>
        </member>
        <member name="T:Godot.FileDialog">
            <summary>
            FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ModeOverridesTitle">
            <summary>
            If [code]true[/code], changing the [code]mode[/code] property will set the window title accordingly (e. g. setting mode to [code]MODE_OPEN_FILE[/code] will change the window title to "Open a File").
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Mode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Access">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.Filters">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.ShowHiddenFiles">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentDir">
            <summary>
            The current working directory of the file dialog.
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentFile">
            <summary>
            The currently selected file of the file dialog.
            </summary>
        </member>
        <member name="P:Godot.FileDialog.CurrentPath">
            <summary>
            The currently selected file path of the file dialog.
            </summary>
        </member>
        <member name="M:Godot.FileDialog.ClearFilters">
            <summary>
            Clear all the added filters in the dialog.
            </summary>
        </member>
        <member name="M:Godot.FileDialog.AddFilter(System.String)">
            <summary>
            Add a custom filter. Filter format is: "mask ; description", example (C++): dialog-&gt;add_filter("*.png ; PNG Images");
            </summary>
        </member>
        <member name="M:Godot.FileDialog.GetVbox">
            <summary>
            Return the vertical box container of the dialog, custom controls can be added to it.
            </summary>
        </member>
        <member name="M:Godot.FileDialog.DeselectItems">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.FileDialog.Invalidate">
            <summary>
            Invalidate and update the current dialog content list.
            </summary>
        </member>
        <member name="T:Godot.Font">
            <summary>
            Font contains a unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.
            </summary>
        </member>
        <member name="M:Godot.Font.Draw(Godot.RID,Godot.Vector2,System.String,System.Nullable{Godot.Color},System.Int32)">
            <summary>
            Draw "string" into a canvas item using the font at a given position, with "modulate" color, and optionally clipping the width. "position" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Font.GetAscent">
            <summary>
            Return the font ascent (number of pixels above the baseline).
            </summary>
        </member>
        <member name="M:Godot.Font.GetDescent">
            <summary>
            Return the font descent (number of pixels below the baseline).
            </summary>
        </member>
        <member name="M:Godot.Font.GetHeight">
            <summary>
            Return the total font height (ascent plus descent) in pixels.
            </summary>
        </member>
        <member name="M:Godot.Font.IsDistanceFieldHint">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Font.GetStringSize(System.String)">
            <summary>
            Return the size of a string, taking kerning and advance into account.
            </summary>
        </member>
        <member name="M:Godot.Font.DrawChar(Godot.RID,Godot.Vector2,System.Int32,System.Int32,System.Nullable{Godot.Color})">
            <summary>
            Draw character "char" into a canvas item using the font at a given position, with "modulate" color, and optionally kerning if "next" is passed. clipping the width. "position" specifies the baseline, not the top. To draw from the top, [i]ascent[/i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Font.UpdateChanges">
            <summary>
            After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it.
            </summary>
        </member>
        <member name="T:Godot.FuncRef">
            <summary>
            In GDScript, functions are not [i]first-class objects[/i]. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.
            However, by creating a [code]FuncRef[/code] using the [method @GDScript.funcref] function, a reference to a function in a given object can be created, passed around and called.
            </summary>
        </member>
        <member name="M:Godot.FuncRef.CallFunc(System.Object[])">
            <summary>
            Calls the referenced function previously set by [method set_function] or [method @GDScript.funcref].
            </summary>
        </member>
        <member name="M:Godot.FuncRef.SetInstance(Godot.Object)">
            <summary>
            The object containing the referenced function. This object must be of a type actually inheriting from [Object], not a built-in type such as [int], [Vector2] or [Dictionary].
            </summary>
        </member>
        <member name="M:Godot.FuncRef.SetFunction(System.String)">
            <summary>
            The name of the referenced function to call on the object, without parentheses or any parameters.
            </summary>
        </member>
        <member name="P:Godot.GDNative.Library">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNative.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNative.Terminate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNative.CallNative(System.String,System.String,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.LoadOnce">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Singleton">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.SymbolPrefix">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GDNativeLibrary.Reloadable">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetConfigFile">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentLibraryPath">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GDNativeLibrary.GetCurrentDependencies">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.GDScript">
            <summary>
            A script implemented in the GDScript programming language. The script exends the functionality of all objects that instance it.
            [method new] creates a new instance of the script. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
            </summary>
        </member>
        <member name="M:Godot.GDScript.New(System.Object[])">
            <summary>
            Returns a new instance of the script.
            For example:
            [codeblock]
            var MyClass = load("myclass.gd")
            var instance = MyClass.new()
            assert(instance.get_script() == MyClass)
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.GDScript.GetAsByteCode">
            <summary>
            Returns byte code for the script source code.
            </summary>
        </member>
        <member name="T:Godot.GDScriptFunctionState">
            <summary>
            Calling [method @GDScript.yield] within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling [method resume] on this state object.
            </summary>
        </member>
        <member name="M:Godot.GDScriptFunctionState.Resume(System.Object)">
            <summary>
            Resume execution of the yielded function call.
            If handed an argument, return the argument from the [method @GDScript.yield] call in the yielded function call. You can pass e.g. an [Array] to hand multiple arguments.
            This function returns what the resumed function call returns, possibly another function state if yielded again.
            </summary>
        </member>
        <member name="M:Godot.GDScriptFunctionState.IsValid(System.Boolean)">
            <summary>
            Check whether the function call may be resumed. This is not the case if the function state was already resumed.
            If [code]extended_check[/code] is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of [method GDScriptFunctionState.resume], but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point.
            </summary>
        </member>
        <member name="T:Godot.Generic6DOFJoint">
            <summary>
            The first 3 dof axes are linear axes, which represent translation of Bodies, and the latter 3 dof axes represent the angular motion. Each axis can be either locked, or limited.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__enabled">
            <summary>
            If [code]true[/code] the linear motion across the x-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__upperDistance">
            <summary>
            The maximum difference between the pivot points' x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__lowerDistance">
            <summary>
            The minimum difference between the pivot points' x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__softness">
            <summary>
            A factor applied to the movement across the x-axis The lower, the slower the movement.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__restitution">
            <summary>
            The amount of restitution on the x-axis movement The lower, the more momentum gets lost.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitX__damping">
            <summary>
            The amount of damping that happens at the x-motion.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__enabled">
            <summary>
            If [code]true[/code] rotation across the x-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__upperAngle">
            <summary>
            The minimum rotation in positive direction to break loose and rotate around the x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__lowerAngle">
            <summary>
            The minimum rotation in negative direction to break loose and rotate around the x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__softness">
            <summary>
            The speed of all rotations across the x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__restitution">
            <summary>
            The amount of rotational restitution across the x-axis. The lower, the more restitution occurs.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__damping">
            <summary>
            The amount of rotational damping across the x-axis.
            The lower, the longer an impulse from one side takes to travel to the other side.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__forceLimit">
            <summary>
            The maximum amount of force that can occur, when rotating around x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitX__erp">
            <summary>
            When rotating across x-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__enabled">
            <summary>
            If [code]true[/code] a rotating motor at the x-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__targetVelocity">
            <summary>
            Target speed for the motor at the x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorX__forceLimit">
            <summary>
            Maximum acceleration for the motor at the x-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__enabled">
            <summary>
            If [code]true[/code] the linear motion across the y-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__upperDistance">
            <summary>
            The maximum difference between the pivot points' y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__lowerDistance">
            <summary>
            The minimum difference between the pivot points' y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__softness">
            <summary>
            A factor applied to the movement across the y-axis The lower, the slower the movement.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__restitution">
            <summary>
            The amount of restitution on the y-axis movement The lower, the more momentum gets lost.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitY__damping">
            <summary>
            The amount of damping that happens at the y-motion.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__enabled">
            <summary>
            If [code]true[/code] rotation across the y-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__upperAngle">
            <summary>
            The minimum rotation in positive direction to break loose and rotate around the y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__lowerAngle">
            <summary>
            The minimum rotation in negative direction to break loose and rotate around the y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__softness">
            <summary>
            The speed of all rotations across the y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__restitution">
            <summary>
            The amount of rotational restitution across the y-axis. The lower, the more restitution occurs.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__damping">
            <summary>
            The amount of rotational damping across the y-axis. The lower, the more dampening occurs.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__forceLimit">
            <summary>
            The maximum amount of force that can occur, when rotating around y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitY__erp">
            <summary>
            When rotating across y-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__enabled">
            <summary>
            If [code]true[/code] a rotating motor at the y-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__targetVelocity">
            <summary>
            Target speed for the motor at the y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorY__forceLimit">
            <summary>
            Maximum acceleration for the motor at the y-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__enabled">
            <summary>
            If [code]true[/code] the linear motion across the z-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__upperDistance">
            <summary>
            The maximum difference between the pivot points' z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__lowerDistance">
            <summary>
            The minimum difference between the pivot points' z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__softness">
            <summary>
            A factor applied to the movement across the z-axis The lower, the slower the movement.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__restitution">
            <summary>
            The amount of restitution on the z-axis movement The lower, the more momentum gets lost.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.LinearLimitZ__damping">
            <summary>
            The amount of damping that happens at the z-motion.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__enabled">
            <summary>
            If [code]true[/code] rotation across the z-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__upperAngle">
            <summary>
            The minimum rotation in positive direction to break loose and rotate around the z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__lowerAngle">
            <summary>
            The minimum rotation in negative direction to break loose and rotate around the z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__softness">
            <summary>
            The speed of all rotations across the z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__restitution">
            <summary>
            The amount of rotational restitution across the z-axis. The lower, the more restitution occurs.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__damping">
            <summary>
            The amount of rotational damping across the z-axis. The lower, the more dampening occurs.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__forceLimit">
            <summary>
            The maximum amount of force that can occur, when rotating around z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularLimitZ__erp">
            <summary>
            When rotating across z-axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__enabled">
            <summary>
            If [code]true[/code] a rotating motor at the z-axis is enabled.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__targetVelocity">
            <summary>
            Target speed for the motor at the z-axis.
            </summary>
        </member>
        <member name="P:Godot.Generic6DOFJoint.AngularMotorZ__forceLimit">
            <summary>
            Maximum acceleration for the motor at the z-axis.
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildBoxPlanes(Godot.Vector3)">
            <summary>
            Returns an array with 6 [Plane]s that describe the sides of a box centered at the origin. The box size is defined by [code]extents[/code], which represents one (positive) corner of the box (i.e. half its actual size).
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildCylinderPlanes(System.Single,System.Single,System.Int32,Godot.Vector3.Axis)">
            <summary>
            Returns an array of [Plane]s closely bounding a faceted cylinder centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the round part of the cylinder. The parameter [code]axis[/code] describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z).
            </summary>
        </member>
        <member name="M:Godot.Geometry.BuildCapsulePlanes(System.Single,System.Single,System.Int32,System.Int32,Godot.Vector3.Axis)">
            <summary>
            Returns an array of [Plane]s closely bounding a faceted capsule centered at the origin with radius [code]radius[/code] and height [code]height[/code]. The parameter [code]sides[/code] defines how many planes will be generated for the side part of the capsule, whereas [code]lats[/code] gives the number of latitudinal steps at the bottom and top of the capsule. The parameter [code]axis[/code] describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z).
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsCircle(Godot.Vector2,Godot.Vector2,Godot.Vector2,System.Single)">
            <summary>
            Given the 2d segment ([code]segment_from[/code], [code]segment_to[/code]), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position [code]circle_position[/code] and has radius [code]circle_radius[/code]. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not).
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsSegment2d(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Checks if the two segments ([code]from_a[/code], [code]to_a[/code]) and ([code]from_b[/code], [code]to_b[/code]) intersect. If yes, return the point of intersection as [Vector2]. If no intersection takes place, returns an empty [Variant].
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointsBetweenSegments2d(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Given the two 2d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector2Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointsBetweenSegments(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Given the two 3d segments ([code]p1[/code], [code]p2[/code]) and ([code]q1[/code], [code]q2[/code]), finds those two points on the two segments that are closest to each other. Returns a [PoolVector3Array] that contains this point on ([code]p1[/code], [code]p2[/code]) as well the accompanying point on ([code]q1[/code], [code]q2[/code]).
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegment2d(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns the 2d point on the 2d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the 3d point on the 3d segment ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point will always be inside the specified segment.
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegmentUncapped2d(Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns the 2d point on the 2d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetClosestPointToSegmentUncapped(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Returns the 3d point on the 3d line defined by ([code]s1[/code], [code]s2[/code]) that is closest to [code]point[/code]. The returned point can be inside the segment ([code]s1[/code], [code]s2[/code]) or outside of it, i.e. somewhere on the line extending from the segment.
            </summary>
        </member>
        <member name="M:Godot.Geometry.GetUv84NormalBit(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Geometry.RayIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Tests if the 3d ray starting at [code]from[/code] with the direction of [code]dir[/code] intersects the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsTriangle(Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Tests if the segment ([code]from[/code], [code]to[/code]) intersects the triangle [code]a[/code], [code]b[/code], [code]c[/code]. If yes, returns the point of intersection as [Vector3]. If no intersection takes place, an empty [Variant] is returned.
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsSphere(Godot.Vector3,Godot.Vector3,Godot.Vector3,System.Single)">
            <summary>
            Checks if the segment ([code]from[/code], [code]to[/code]) intersects the sphere that is located at [code]sphere_position[/code] and has radius [code]sphere_radius[/code]. If no, returns an empty [PoolVector3Array]. If yes, returns a [PoolVector3Array] containing the point of intersection and the sphere's normal at the point of intersection.
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsCylinder(Godot.Vector3,Godot.Vector3,System.Single,System.Single)">
            <summary>
            Checks if the segment ([code]from[/code], [code]to[/code]) intersects the cylinder with height [code]height[/code] that is centered at the origin and has radius [code]radius[/code]. If no, returns an empty [PoolVector3Array]. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection.
            </summary>
        </member>
        <member name="M:Godot.Geometry.SegmentIntersectsConvex(Godot.Vector3,Godot.Vector3,System.Object[])">
            <summary>
            Given a convex hull defined though the [Plane]s in the array [code]planes[/code], tests if the segment ([code]from[/code], [code]to[/code]) intersects with that hull. If an intersection is found, returns a [PoolVector3Array] containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty.
            </summary>
        </member>
        <member name="M:Godot.Geometry.PointIsInsideTriangle(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.Vector2)">
            <summary>
            Returns if [code]point[/code] is inside the triangle specified by [code]a[/code], [code]b[/code] and [code]c[/code].
            </summary>
        </member>
        <member name="M:Godot.Geometry.TriangulatePolygon(Godot.Vector2[])">
            <summary>
            Triangulates the polygon specified by the points in [code]polygon[/code]. Returns a [PoolIntArray] where each triangle consists of three consecutive point indices into [code]polygon[/code] (i.e. the returned array will have [code]n * 3[/code] elements, with [code]n[/code] being the number of found triangles). If the triangulation did not succeed, an empty [PoolIntArray] is returned.
            </summary>
        </member>
        <member name="M:Godot.Geometry.ConvexHull2d(Godot.Vector2[])">
            <summary>
            Given an array of [Vector2]s, returns the convex hull as a list of points in counter-clockwise order. The last point is the same as the first one.
            </summary>
        </member>
        <member name="M:Godot.Geometry.ClipPolygon(Godot.Vector3[],Godot.Plane)">
            <summary>
            Clips the polygon defined by the points in [code]points[/code] against the [code]plane[/code] and returns the points of the clipped polygon.
            </summary>
        </member>
        <member name="M:Godot.Geometry.MakeAtlas(Godot.Vector2[])">
            <summary>
            Given an array of [Vector2]s representing tiles, builds an atlas. The returned dictionary has two keys: [code]points[/code] is a vector of [Vector2] that specifies the positions of each tile, [code]size[/code] contains the overall size of the whole atlas as [Vector2].
            </summary>
        </member>
        <member name="T:Godot.GeometryInstance">
            <summary>
            Base node for geometry based visual instances. Shares some common functionality like visibility and custom materials.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.MaterialOverride">
            <summary>
            The material override for the whole geometry.
            If there is a material in material_override, it will be used instead of any material set in any material slot of the mesh.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.CastShadow">
            <summary>
            The selected shadow casting flag. See SHADOW_CASTING_SETTING_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.ExtraCullMargin">
            <summary>
            The extra distance added to the GeometryInstance's bounding box ([AABB]) to increase its cull box.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.UseInBakedLight">
            <summary>
            If [code]true[/code] this GeometryInstance will be used when baking lights using a [GIProbe] and/or any other form of baked lighting.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMinDistance">
            <summary>
            The GeometryInstance's min LOD distance.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMinHysteresis">
            <summary>
            The GeometryInstance's min LOD margin.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMaxDistance">
            <summary>
            The GeometryInstance's max LOD distance.
            </summary>
        </member>
        <member name="P:Godot.GeometryInstance.LodMaxHysteresis">
            <summary>
            The GeometryInstance's max LOD margin.
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Subdiv">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Extents">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.DynamicRange">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Energy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Propagation">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Bias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.NormalBias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Interior">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Compress">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbe.Data">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GIProbe.Bake(Godot.Node,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GIProbe.DebugBake">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Bounds">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.CellSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.ToCellXform">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.DynamicData">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.DynamicRange">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Energy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Bias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.NormalBias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Propagation">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Interior">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GIProbeData.Compress">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.AttachThread">
            <summary>
            Attaches the current thread to the mono runtime.
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.DetachThread">
            <summary>
            Detaches the current thread from the mono runtime.
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsFinalizingDomain">
            <summary>
            Returns whether the scripts domain is being finalized.
            </summary>
        </member>
        <member name="M:Godot.GodotSharp.IsDomainLoaded">
            <summary>
            Returns whether the scripts domain is loaded.
            </summary>
        </member>
        <member name="T:Godot.Gradient">
            <summary>
            Given a set of colors, this node will interpolate them in order, meaning, that if you have color 1, color 2 and color3, the ramp will interpolate (generate the colors between two colors) from color 1 to color 2 and from color 2 to color 3. Initially the ramp will have 2 colors (black and white), one (black) at ramp lower offset offset 0 and the other (white) at the ramp higher offset 1.
            </summary>
        </member>
        <member name="P:Godot.Gradient.Offsets">
            <summary>
            Gradient's offsets returned as a [PoolRealArray].
            </summary>
        </member>
        <member name="P:Godot.Gradient.Colors">
            <summary>
            Gradient's colors returned as a [PoolColorArray].
            </summary>
        </member>
        <member name="M:Godot.Gradient.AddPoint(System.Single,Godot.Color)">
            <summary>
            Adds the specified color to the end of the ramp, with the specified offset
            </summary>
        </member>
        <member name="M:Godot.Gradient.RemovePoint(System.Int32)">
            <summary>
            Removes the color at the index [i]offset[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetOffset(System.Int32,System.Single)">
            <summary>
            Sets the offset for the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetOffset(System.Int32)">
            <summary>
            Returns the offset of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.SetColor(System.Int32,Godot.Color)">
            <summary>
            Sets the color of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetColor(System.Int32)">
            <summary>
            Returns the color of the ramp color at index [i]point[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.Interpolate(System.Single)">
            <summary>
            Returns the interpolated color specified by [i]offset[/i]
            </summary>
        </member>
        <member name="M:Godot.Gradient.GetPointCount">
            <summary>
            Returns the number of colors in the ramp
            </summary>
        </member>
        <member name="T:Godot.GradientTexture">
            <summary>
            Uses a [Gradient] to fill the texture data, the gradient will be filled from left to right using colors obtained from the gradient, this means that the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see [method set_width]).
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Gradient">
            <summary>
            The [Gradient] that will be used to fill the texture.
            </summary>
        </member>
        <member name="P:Godot.GradientTexture.Width">
            <summary>
            The number of color samples that will be obtained from the [Gradient].
            </summary>
        </member>
        <member name="T:Godot.GraphEdit">
            <summary>
            GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNodes slots is disabled by default.
            It is greatly advised to enable low processor usage mode (see [method OS.set_low_processor_usage_mode]) when using GraphEdits.
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.RightDisconnects">
            <summary>
            If [code]true[/code], enables disconnection of existing connections in the GraphEdit by dragging the right end.
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.ScrollOffset">
            <summary>
            The scroll offset.
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.SnapDistance">
            <summary>
            The snapping distance in pixels.
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.UseSnap">
            <summary>
            If [code]true[/code], enables snapping.
            </summary>
        </member>
        <member name="P:Godot.GraphEdit.Zoom">
            <summary>
            The current zoom value.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ConnectNode(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Create a connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode. If the connection already exists, no connection is created.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsNodeConnected(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Return true if the 'from_port' slot of 'from' GraphNode is connected to the 'to_port' slot of 'to' GraphNode.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.DisconnectNode(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Remove the connection between 'from_port' slot of 'from' GraphNode and 'to_port' slot of 'to' GraphNode, if connection exists.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.GetConnectionList">
            <summary>
            Return an Array containing the list of connections. A connection consists in a structure of the form {from_slot: 0, from: "GraphNode name 0", to_slot: 1, to: "GraphNode name 1" }
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.ClearConnections">
            <summary>
            Remove all connections between nodes.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidRightDisconnectType(System.Int32)">
            <summary>
            Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidRightDisconnectType(System.Int32)">
            <summary>
            Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidLeftDisconnectType(System.Int32)">
            <summary>
            Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidLeftDisconnectType(System.Int32)">
            <summary>
            Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.AddValidConnectionType(System.Int32,System.Int32)">
            <summary>
            Makes possible the connection between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.RemoveValidConnectionType(System.Int32,System.Int32)">
            <summary>
            Makes it not possible to connect between two different slot types. The type is defined with the [method GraphNode.set_slot] method.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.IsValidConnectionType(System.Int32,System.Int32)">
            <summary>
            Returns whether it's possible to connect slots of the specified types.
            </summary>
        </member>
        <member name="M:Godot.GraphEdit.SetSelected(Godot.Node)">
            <summary>
            Sets the specified [code]node[/code] as the one selected.
            </summary>
        </member>
        <member name="T:Godot.GraphNode">
            <summary>
            A GraphNode is a container defined by a title. It can have 1 or more input and output slots, which can be enabled (shown) or disabled (not shown) and have different (incompatible) types. Colors can also be assigned to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input and output connections are left and right slots, but only enabled slots are counted as connections.
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Title">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Offset">
            <summary>
            The offset of the GraphNode, relative to the scroll offset of the [GraphEdit]. Note that you cannot use position directly, as [GraphEdit] is a [Container].
            </summary>
        </member>
        <member name="P:Godot.GraphNode.ShowClose">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Resizable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Selected">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Comment">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GraphNode.Overlay">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.SetSlot(System.Int32,System.Boolean,System.Int32,Godot.Color,System.Boolean,System.Int32,Godot.Color,Godot.Texture,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearSlot(System.Int32)">
            <summary>
            Disable input and output slot whose index is 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.ClearAllSlots">
            <summary>
            Disable all input and output slots of the GraphNode.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledLeft(System.Int32)">
            <summary>
            Return true if left (input) slot 'idx' is enabled. False otherwise.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeLeft(System.Int32)">
            <summary>
            Return the (integer) type of left (input) 'idx' slot.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorLeft(System.Int32)">
            <summary>
            Return the color set to 'idx' left (input) slot.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.IsSlotEnabledRight(System.Int32)">
            <summary>
            Return true if right (output) slot 'idx' is enabled. False otherwise.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotTypeRight(System.Int32)">
            <summary>
            Return the (integer) type of right (output) 'idx' slot.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetSlotColorRight(System.Int32)">
            <summary>
            Return the color set to 'idx' right (output) slot.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputCount">
            <summary>
            Return the number of enabled output slots (connections) of the GraphNode.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputCount">
            <summary>
            Return the number of enabled input slots (connections) to the GraphNode.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputPosition(System.Int32)">
            <summary>
            Return the position of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputType(System.Int32)">
            <summary>
            Return the type of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionOutputColor(System.Int32)">
            <summary>
            Return the color of the output connection 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputPosition(System.Int32)">
            <summary>
            Return the position of the input connection 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputType(System.Int32)">
            <summary>
            Return the type of the input connection 'idx'.
            </summary>
        </member>
        <member name="M:Godot.GraphNode.GetConnectionInputColor(System.Int32)">
            <summary>
            Return the color of the input connection 'idx'.
            </summary>
        </member>
        <member name="T:Godot.GridContainer">
            <summary>
            Grid container will arrange its children in a grid like structure, the grid columns are specified using the [method set_columns] method and the number of rows will be equal to the number of children in the container divided by the number of columns, for example: if the container has 5 children, and 2 columns, there will be 3 rows in the container. Notice that grid layout will preserve the columns and rows for every size of the container.
            </summary>
        </member>
        <member name="P:Godot.GridContainer.Columns">
            <summary>
            The number of columns in the [code]GridContainer[/code]. If modified, [code]GridContainer[/code] reorders its children to accommodate the new layout.
            </summary>
        </member>
        <member name="T:Godot.GridMap">
            <summary>
            GridMap lets you place meshes on a grid interactively. It works both from the editor and can help you create in-game level editors.
            GridMaps use a [MeshLibrary] which contain a list of tiles: meshes with materials plus optional collisions and extra elements.
            A GridMap contains a collection of cells. Each grid cell refers to a [MeshLibrary] item. All cells in the map have the same dimensions.
            A GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells.
            </summary>
        </member>
        <member name="P:Godot.GridMap.Theme">
            <summary>
            The assigned [MeshLibrary].
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellSize">
            <summary>
            The dimensions of the grid's cells.
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellOctantSize">
            <summary>
            The size of each octant measured in number of cells. This applies to all three axis.
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterX">
            <summary>
            If [code]true[/code] grid items are centered on the X axis.
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterY">
            <summary>
            If [code]true[/code] grid items are centered on the Y axis.
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellCenterZ">
            <summary>
            If [code]true[/code] grid items are centered on the Z axis.
            </summary>
        </member>
        <member name="P:Godot.GridMap.CellScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionLayer">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.GridMap.CollisionMask">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetCellItem(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the mesh index for the cell referenced by its grid-based X, Y and Z coordinates.
            A negative item index will clear the cell.
            Optionally, the item's orientation can be passed.
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            The [MeshLibrary] item index located at the grid-based X, Y and Z coordinates. If the cell is empty, [INVALID_CELL_ITEM] will be returned.
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetCellItemOrientation(System.Int32,System.Int32,System.Int32)">
            <summary>
            The orientation of the cell at the grid-based X, Y and Z coordinates. -1 is retuned if the cell is empty.
            </summary>
        </member>
        <member name="M:Godot.GridMap.WorldToMap(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.MapToWorld(System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.ResourceChanged(Godot.Resource)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.SetClip(System.Boolean,System.Boolean,System.Int32,Godot.Vector3.Axis)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.Clear">
            <summary>
            Clear all cells.
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetUsedCells">
            <summary>
            Array of [Vector3] with the non empty cell coordinates in the grid map.
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetMeshes">
            <summary>
            Array of [Transform] and [Mesh] references corresponding to the non empty cells in the grid. The transforms are specified in world space.
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetBakeMeshes">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.GetBakeMeshInstance(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.ClearBakedMeshes">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.GridMap.MakeBakedMeshes(System.Boolean,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.GrooveJoint2D">
            <summary>
            Groove constraint for 2D physics. This is useful for making a body "slide" through a segment placed in another.
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.Length">
            <summary>
            The groove's length. The groove is from the joint's origin towards [member length] along the joint's local y axis. Default value: [code]50[/code]
            </summary>
        </member>
        <member name="P:Godot.GrooveJoint2D.InitialOffset">
            <summary>
            The body B's initial anchor position defined by the joint's origin and a local offset [member initial_offset] along the joint's y axis (along the groove). Default value: [code]25[/code]
            </summary>
        </member>
        <member name="T:Godot.HBoxContainer">
            <summary>
            Horizontal box container. See [BoxContainer].
            </summary>
        </member>
        <member name="T:Godot.HingeJoint">
            <summary>
            Normally uses the z-axis of body A as the hinge axis, another axis can be specified when adding it manually though.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Params__bias">
            <summary>
            The speed with which the two bodies get pulled together when they move in different directions.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__enable">
            <summary>
            If [code]true[/code] the hinges maximum and minimum rotation, defined by [member angular_limit/lower] and [member angular_limit/upper] has effects.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__upper">
            <summary>
            The maximum rotation. only active if [member angular_limit/enable] is [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__lower">
            <summary>
            The minimum rotation. only active if [member angular_limit/enable] is [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__bias">
            <summary>
            The speed with which the rotation across the axis perpendicular to the hinge gets corrected.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__softness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.AngularLimit__relaxation">
            <summary>
            The lower this value, the more the rotation gets slowed down.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__enable">
            <summary>
            When activated, a motor turns the hinge.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__targetVelocity">
            <summary>
            Target speed for the motor.
            </summary>
        </member>
        <member name="P:Godot.HingeJoint.Motor__maxImpulse">
            <summary>
            Maximum acceleration for the motor.
            </summary>
        </member>
        <member name="T:Godot.HScrollBar">
            <summary>
            Horizontal scroll bar. See [ScrollBar]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:Godot.HSeparator">
            <summary>
            Horizontal separator. See [Separator]. It is used to separate objects vertically, though (but it looks horizontal!).
            </summary>
        </member>
        <member name="T:Godot.HSlider">
            <summary>
            Horizontal slider. See [Slider]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:Godot.HSplitContainer">
            <summary>
            Horizontal split container. See [SplitContainer]. This goes from left to right.
            </summary>
        </member>
        <member name="T:Godot.HTTPClient">
            <summary>
            Hyper-text transfer protocol client (sometimes called "User Agent"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases.
            Note that this client only needs to connect to a host once (see [method connect_to_host]) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See [method request] for a full example and to get started.
            A [code]HTTPClient[/code] should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. "try again, but over here"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.
            For more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616).
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.BlockingModeEnabled">
            <summary>
            If [code]true[/code], execution will block until all data is read from the response.
            </summary>
        </member>
        <member name="P:Godot.HTTPClient.Connection">
            <summary>
            The connection to use for this client.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ConnectToHost(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Connect to a host. This needs to be done before any requests are sent.
            The host should not have http:// prepended but will strip the protocol identifier if provided.
            If no [code]port[/code] is specified (or [code]-1[/code] is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if [code]use_ssl[/code] is enabled).
            [code]verify_host[/code] will check the SSL identity of the host if set to [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.RequestRaw(Godot.HTTPClient.Method,System.String,System.String[],System.Byte[])">
            <summary>
            Sends a raw request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].
            Headers are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].
            Sends the body data raw, as a byte array and does not encode it in any way.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Request(Godot.HTTPClient.Method,System.String,System.String[],System.String)">
            <summary>
            Sends a request to the connected host. The URL parameter is just the part after the host, so for [code]http://somehost.com/index.php[/code], it is [code]index.php[/code].
            Headers are HTTP request headers. For available HTTP methods, see [code]METHOD_*[/code].
            To create a POST request with query strings to push to the server, do:
            [codeblock]
            var fields = {"username" : "user", "password" : "pass"}
            var queryString = httpClient.query_string_from_dict(fields)
            var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(queryString.length())]
            var result = httpClient.request(httpClient.METHOD_POST, "index.php", headers, queryString)
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Close">
            <summary>
            Closes the current connection, allowing reuse of this [code]HTTPClient[/code].
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.HasResponse">
            <summary>
            If [code]true[/code] this [code]HTTPClient[/code] has a response available.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.IsResponseChunked">
            <summary>
            If [code]true[/code] this [code]HTTPClient[/code] has a response that is chunked.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseCode">
            <summary>
            Returns the response's HTTP status code.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeaders">
            <summary>
            Returns the response headers.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseHeadersAsDictionary">
            <summary>
            Returns all response headers as dictionary where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where "; " is used as separator.
            Structure: ("key":"value1; value2")
            Example: (content-length:12), (Content-Type:application/json; charset=UTF-8)
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetResponseBodyLength">
            <summary>
            Returns the response's body length.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.ReadResponseBodyChunk">
            <summary>
            Reads one chunk from the response.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.SetReadChunkSize(System.Int32)">
            <summary>
            Sets the size of the buffer used and maximum bytes to read per iteration. see [method read_response_body_chunk]
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.GetStatus">
            <summary>
            Returns a STATUS_* enum constant. Need to call [method poll] in order to get status updates.
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.Poll">
            <summary>
            This needs to be called in order to have any request processed. Check results with [method get_status]
            </summary>
        </member>
        <member name="M:Godot.HTTPClient.QueryStringFromDict(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:
            [codeblock]
            var fields = {"username": "user", "password": "pass"}
            String queryString = httpClient.query_string_from_dict(fields)
            returns:= "username=user&amp;password=pass"
            [/codeblock]
            Furthermore, if a key has a null value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.
            [codeblock]
            var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}
            String queryString = httpClient.query_string_from_dict(fields)
            returns:= "single=123&amp;not_valued&amp;multiple=22&amp;multiple=33&amp;multiple=44"
            [/codeblock]
            </summary>
        </member>
        <member name="T:Godot.HTTPRequest">
            <summary>
            A node with the ability to send HTTP requests. Uses [HTTPClient] internally.
            Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP.
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.DownloadFile">
            <summary>
            The file to download into. Will output any received file into it.
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.UseThreads">
            <summary>
            If [code]true[/code] multithreading is used to improve performance.
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.BodySizeLimit">
            <summary>
            Maximum allowed size for response bodies.
            </summary>
        </member>
        <member name="P:Godot.HTTPRequest.MaxRedirects">
            <summary>
            Maximum number of allowed redirects.
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.Request(System.String,System.String[],System.Boolean,Godot.HTTPClient.Method,System.String)">
            <summary>
            Creates request on the underlying [HTTPClient]. If there is no configuration errors, it tries to connect using [method HTTPClient.connect_to_host] and passes parameters onto [method HTTPClient.request].
            Returns [code]OK[/code] if request is successfully created. (Does not imply that the server has responded), [code]ERR_UNCONFIGURED[/code] if not in the tree, [code]ERR_BUSY[/code] if still processing previous request, [code]ERR_INVALID_PARAMETER[/code] if given string is not a valid URL format, or [code]ERR_CANT_CONNECT[/code] if not using thread and the [HTTPClient] cannot connect to host.
            &lt;param name="customHeaders"&gt;If the param is null, then the default value is new string[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.CancelRequest">
            <summary>
            Cancels the current request.
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetHttpClientStatus">
            <summary>
            Returns the current status of the underlying [HTTPClient]. See [code]STATUS_*[/code] enum on [HTTPClient].
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetDownloadedBytes">
            <summary>
            Returns the amount of bytes this HTTPRequest downloaded.
            </summary>
        </member>
        <member name="M:Godot.HTTPRequest.GetBodySize">
            <summary>
            Returns the response body length.
            </summary>
        </member>
        <member name="T:Godot.Image">
            <summary>
            Native image datatype. Contains image data, which can be converted to a [Texture], and several functions to interact with it. The maximum width and height for an [code]Image[/code] is 16384 pixels.
            </summary>
        </member>
        <member name="P:Godot.Image.Data">
            <summary>
            Holds all of the image's color data in a given format. See [code]FORMAT_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Image.GetWidth">
            <summary>
            Returns the image's width.
            </summary>
        </member>
        <member name="M:Godot.Image.GetHeight">
            <summary>
            Returns the image's height.
            </summary>
        </member>
        <member name="M:Godot.Image.GetSize">
            <summary>
            Returns the image's size (width and height).
            </summary>
        </member>
        <member name="M:Godot.Image.HasMipmaps">
            <summary>
            Returns [code]true[/code] if the image has generated mipmaps.
            </summary>
        </member>
        <member name="M:Godot.Image.GetFormat">
            <summary>
            Returns the image’s format. See [code]FORMAT_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Image.GetData">
            <summary>
            Returns the image's raw data.
            </summary>
        </member>
        <member name="M:Godot.Image.Convert(Godot.Image.Format)">
            <summary>
            Converts the image's format. See [code]FORMAT_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Image.GetMipmapOffset(System.Int32)">
            <summary>
            Returns the offset where the image's mipmap with index [code]mipmap[/code] is stored in the [code]data[/code] dictionary.
            </summary>
        </member>
        <member name="M:Godot.Image.ResizeToPo2(System.Boolean)">
            <summary>
            Resizes the image to the nearest power of 2 for the width and height. If [code]square[/code] is [code]true[/code] then set width and height to be the same.
            </summary>
        </member>
        <member name="M:Godot.Image.Resize(System.Int32,System.Int32,Godot.Image.Interpolation)">
            <summary>
            Resizes the image to the given [code]width[/code] and [code]height[/code]. New pixels are calculated using [code]interpolation[/code]. See [code]interpolation[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Image.ShrinkX2">
            <summary>
            Shrinks the image by a factor of 2.
            </summary>
        </member>
        <member name="M:Godot.Image.ExpandX2Hq2x">
            <summary>
            Stretches the image and enlarges it by a factor of 2. No interpolation is done.
            </summary>
        </member>
        <member name="M:Godot.Image.Crop(System.Int32,System.Int32)">
            <summary>
            Crops the image to the given [code]width[/code] and [code]height[/code]. If the specified size is larger than the current size, the extra area is filled with black pixels.
            </summary>
        </member>
        <member name="M:Godot.Image.FlipX">
            <summary>
            Flips the image horizontally.
            </summary>
        </member>
        <member name="M:Godot.Image.FlipY">
            <summary>
            Flips the image vertically.
            </summary>
        </member>
        <member name="M:Godot.Image.GenerateMipmaps">
            <summary>
            Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0.
            </summary>
        </member>
        <member name="M:Godot.Image.ClearMipmaps">
            <summary>
            Removes the image's mipmaps.
            </summary>
        </member>
        <member name="M:Godot.Image.Create(System.Int32,System.Int32,System.Boolean,Godot.Image.Format)">
            <summary>
            Creates an empty image of given size and format. See [code]FORMAT_*[/code] constants. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.
            </summary>
        </member>
        <member name="M:Godot.Image.CreateFromData(System.Int32,System.Int32,System.Boolean,Godot.Image.Format,System.Byte[])">
            <summary>
            Creates a new image of given size and format. See [code]FORMAT_*[/code] constants. Fills the image with the given raw data. If [code]use_mipmaps[/code] is true then generate mipmaps for this image. See the [code]generate_mipmaps[/code] method.
            </summary>
        </member>
        <member name="M:Godot.Image.IsEmpty">
            <summary>
            Returns [code]true[/code] if the image has no data.
            </summary>
        </member>
        <member name="M:Godot.Image.Load(System.String)">
            <summary>
            Loads an image from file [code]path[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.SavePng(System.String)">
            <summary>
            Saves the image as a PNG file to [code]path[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.DetectAlpha">
            <summary>
            Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are below a certain threshold or the maximum value. Returns ALPHA_NONE if no data for alpha values is found.
            </summary>
        </member>
        <member name="M:Godot.Image.IsInvisible">
            <summary>
            Returns [code]true[/code] if all the image's pixels have an alpha value of 0. Returns [code]false[/code] if any pixel has an alpha value higher than 0.
            </summary>
        </member>
        <member name="M:Godot.Image.Compress(Godot.Image.CompressMode,Godot.Image.CompressSource,System.Single)">
            <summary>
            Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See [code]COMPRESS_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Image.Decompress">
            <summary>
            Decompresses the image if it is compressed. Returns an error if decompress function is not available.
            </summary>
        </member>
        <member name="M:Godot.Image.IsCompressed">
            <summary>
            Returns [code]true[/code] if the image is compressed.
            </summary>
        </member>
        <member name="M:Godot.Image.FixAlphaEdges">
            <summary>
            Blends low-alpha pixels with nearby pixels.
            </summary>
        </member>
        <member name="M:Godot.Image.PremultiplyAlpha">
            <summary>
            Multiplies color values with alpha values. Resulting color values for a pixel are [code](color * alpha)/256[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.SrgbToLinear">
            <summary>
            Converts the raw data from the sRGB colorspace to a linear scale.
            </summary>
        </member>
        <member name="M:Godot.Image.NormalmapToXy">
            <summary>
            Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count.
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            Copies [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dst[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.BlitRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            Blits [code]src_rect[/code] area from [code]src[/code] image to this image at the coordinates given by [code]dst[/code]. [code]src[/code] pixel is copied onto [code]dst[/code] if the corresponding [code]mask[/code] pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRect(Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image at coordinates [code]dest[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.BlendRectMask(Godot.Image,Godot.Image,Godot.Rect2,Godot.Vector2)">
            <summary>
            Alpha-blends [code]src_rect[/code] from [code]src[/code] image to this image using [code]mask[/code] image at coordinates [code]dst[/code]. Alpha channels are required for both [code]src[/code] and [code]mask[/code]. [code]dst[/code] pixels and [code]src[/code] pixels will blend if the corresponding mask pixel's alpha value is not 0. [code]src[/code] image and [code]mask[/code] image [b]must[/b] have the same size (width and height) but they can have different formats.
            </summary>
        </member>
        <member name="M:Godot.Image.Fill(Godot.Color)">
            <summary>
            Fills the image with a given [Color].
            </summary>
        </member>
        <member name="M:Godot.Image.GetUsedRect">
            <summary>
            Returns a [Rect2] enclosing the visible portion of the image.
            </summary>
        </member>
        <member name="M:Godot.Image.GetRect(Godot.Rect2)">
            <summary>
            Returns a new image that is a copy of the image's area specified with [code]rect[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.CopyFrom(Godot.Image)">
            <summary>
            Copies [code]src[/code] image to this image.
            </summary>
        </member>
        <member name="M:Godot.Image.Lock">
            <summary>
            Locks the data for writing access.
            </summary>
        </member>
        <member name="M:Godot.Image.Unlock">
            <summary>
            Unlocks the data and prevents changes.
            </summary>
        </member>
        <member name="M:Godot.Image.SetPixel(System.Int32,System.Int32,Godot.Color)">
            <summary>
            Sets the [Color] of the pixel at [code](x, y)[/code] if the image is locked. Example:
            [codeblock]
            var img = Image.new()
            img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
            img.lock()
            img.set_pixel(x, y, color) # Works
            img.unlock()
            img.set_pixel(x, y, color) # Does not have an effect
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            Returns the color of the pixel at [code](x, y)[/code] if the image is locked. If the image is unlocked it always returns a [Color] with the value [code](0, 0, 0, 1.0)[/code].
            </summary>
        </member>
        <member name="M:Godot.Image.LoadPngFromBuffer(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Image.LoadJpgFromBuffer(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ImageTexture">
            <summary>
            A [Texture] based on an [Image]. Can be created from an [Image] with [method create_from_image].
            </summary>
        </member>
        <member name="P:Godot.ImageTexture.Storage">
            <summary>
            The storage type (raw, lossy, or compressed).
            </summary>
        </member>
        <member name="P:Godot.ImageTexture.LossyQuality">
            <summary>
            The storage quality for [code]ImageTexture[/code].STORAGE_COMPRESS_LOSSY.
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.Create(System.Int32,System.Int32,Godot.Image.Format,System.Int32)">
            <summary>
            Create a new [code]ImageTexture[/code] with "width" and "height".
            "format" one of [Image].FORMAT_*.
            "flags" one or more of [Texture].FLAG_*.
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.CreateFromImage(Godot.Image,System.Int32)">
            <summary>
            Create a new [code]ImageTexture[/code] from an [Image] with "flags" from [Texture].FLAG_*.
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.GetFormat">
            <summary>
            Return the format of the [code]ImageTexture[/code], one of [Image].FORMAT_*.
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.Load(System.String)">
            <summary>
            Load an [code]ImageTexture[/code].
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.SetData(Godot.Image)">
            <summary>
            Set the [Image] of this [code]ImageTexture[/code].
            </summary>
        </member>
        <member name="M:Godot.ImageTexture.SetSizeOverride(Godot.Vector2)">
            <summary>
            Resizes the [code]ImageTexture[/code] to the specified dimensions.
            </summary>
        </member>
        <member name="T:Godot.ImmediateGeometry">
            <summary>
            Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.Begin(Godot.Mesh.PrimitiveType,Godot.Texture)">
            <summary>
            Begin drawing (And optionally pass a texture override). When done call end(). For more information on how this works, search for glBegin() glEnd() references.
            For the type of primitive, use the [Mesh].PRIMITIVE_* enumerations.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetNormal(Godot.Vector3)">
            <summary>
            The next vertex's normal.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetTangent(Godot.Plane)">
            <summary>
            The next vertex's tangent (and binormal facing).
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetColor(Godot.Color)">
            <summary>
            The current drawing color.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetUv(Godot.Vector2)">
            <summary>
            The next vertex's UV.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.SetUv2(Godot.Vector2)">
            <summary>
            The next vertex's second layer UV.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.AddVertex(Godot.Vector3)">
            <summary>
            Adds a vertex with the currently set color/uv/etc.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.AddSphere(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Simple helper to draw a uvsphere, with given latitudes, longitude and radius.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.End">
            <summary>
            Ends a drawing context and displays the results.
            </summary>
        </member>
        <member name="M:Godot.ImmediateGeometry.Clear">
            <summary>
            Clears everything that was drawn using begin/end.
            </summary>
        </member>
        <member name="T:Godot.Input">
            <summary>
            A Singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the Project Settings / Input Map tab. Or be set with [InputMap].
            </summary>
        </member>
        <member name="M:Godot.Input.IsKeyPressed(System.Int32)">
            <summary>
            Returns [code]true[/code] if you are pressing the key. You can pass [code]KEY_*[/code], which are pre-defined constants listed in [@GlobalScope].
            </summary>
        </member>
        <member name="M:Godot.Input.IsMouseButtonPressed(System.Int32)">
            <summary>
            Returns [code]true[/code] if you are pressing the mouse button. You can pass [code]BUTTON_*[/code], which are pre-defined constants listed in [@GlobalScope].
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyButtonPressed(System.Int32,System.Int32)">
            <summary>
            Returns [code]true[/code] if you are pressing the joypad button. (see [code]JOY_*[/code] constants in [@GlobalScope])
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionPressed(System.String)">
            <summary>
            Returns [code]true[/code] if you are pressing the action event.
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustPressed(System.String)">
            <summary>
            Returns [code]true[/code] when the user starts pressing the action event, meaning it's true only on the frame that the user pressed down the button.
            This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.
            </summary>
        </member>
        <member name="M:Godot.Input.IsActionJustReleased(System.String)">
            <summary>
            Returns [code]true[/code] when the user stops pressing the action event, meaning it's true only on the frame that the user released the button.
            </summary>
        </member>
        <member name="M:Godot.Input.AddJoyMapping(System.String,System.Boolean)">
            <summary>
            Add a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.
            </summary>
        </member>
        <member name="M:Godot.Input.RemoveJoyMapping(System.String)">
            <summary>
            Removes all mappings from the internal db that match the given uid.
            </summary>
        </member>
        <member name="M:Godot.Input.JoyConnectionChanged(System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Input.IsJoyKnown(System.Int32)">
            <summary>
            Returns [code]true[/code] if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in the [code]JOY_*[/code] constants (see [@GlobalScope]). Unknown joypads are not expected to match these constants, but you can still retrieve events from them.
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxis(System.Int32,System.Int32)">
            <summary>
            Returns the current value of the joypad axis at given index (see [code]JOY_*[/code] constants in [@GlobalScope])
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyName(System.Int32)">
            <summary>
            Returns the name of the joypad at the specified device index
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyGuid(System.Int32)">
            <summary>
            Returns a SDL2 compatible device guid on platforms that use gamepad remapping. Returns "Default Gamepad" otherwise.
            </summary>
        </member>
        <member name="M:Godot.Input.GetConnectedJoypads">
            <summary>
            Returns an [Array] containing the device IDs of all currently connected joypads.
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationStrength(System.Int32)">
            <summary>
            Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyVibrationDuration(System.Int32)">
            <summary>
            Returns the duration of the current vibration effect in seconds.
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyButtonString(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyButtonIndexFromString(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxisString(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Input.GetJoyAxisIndexFromString(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Input.StartJoyVibration(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. weak_magnitude is the strength of the weak motor (between 0 and 1) and strong_magnitude is the strength of the strong motor (between 0 and 1). duration is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).
            Note that not every hardware is compatible with long effect durations, it is recommended to restart an effect if in need to play it for more than a few seconds.
            </summary>
        </member>
        <member name="M:Godot.Input.StopJoyVibration(System.Int32)">
            <summary>
            Stops the vibration of the joypad.
            </summary>
        </member>
        <member name="M:Godot.Input.GetGravity">
            <summary>
            If the device has an accelerometer, this will return the gravity. Otherwise, it returns an empty [Vector3].
            </summary>
        </member>
        <member name="M:Godot.Input.GetAccelerometer">
            <summary>
            If the device has an accelerometer, this will return the acceleration. Otherwise, it returns an empty [Vector3].
            </summary>
        </member>
        <member name="M:Godot.Input.GetMagnetometer">
            <summary>
            If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes.
            </summary>
        </member>
        <member name="M:Godot.Input.GetGyroscope">
            <summary>
            If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's x, y, and z axis. Otherwise, it returns an empty [Vector3].
            </summary>
        </member>
        <member name="M:Godot.Input.GetLastMouseSpeed">
            <summary>
            Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion.
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseButtonMask">
            <summary>
            Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time the bits are added together.
            </summary>
        </member>
        <member name="M:Godot.Input.SetMouseMode(Godot.Input.MouseMode)">
            <summary>
            Set the mouse mode. See the constants for more information.
            </summary>
        </member>
        <member name="M:Godot.Input.GetMouseMode">
            <summary>
            Return the mouse mode. See the constants for more information.
            </summary>
        </member>
        <member name="M:Godot.Input.WarpMousePosition(Godot.Vector2)">
            <summary>
            Sets the mouse position to the specified vector.
            </summary>
        </member>
        <member name="M:Godot.Input.ActionPress(System.String)">
            <summary>
            This will simulate pressing the specified action.
            </summary>
        </member>
        <member name="M:Godot.Input.ActionRelease(System.String)">
            <summary>
            If the specified action is already pressed, this will release it.
            </summary>
        </member>
        <member name="M:Godot.Input.SetCustomMouseCursor(Godot.Resource,Godot.Input.CursorShape,System.Nullable{Godot.Vector2})">
            <summary>
            Set a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. See enum [code]CURSOR_*[/code] for the list of shapes.
            &lt;param name="hotspot"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Input.ParseInputEvent(Godot.InputEvent)">
            <summary>
            Feeds an [InputEvent] to the game. Can be used to artificially trigger input events from code.
            </summary>
        </member>
        <member name="T:Godot.InputEvent">
            <summary>
            Base class of all sort of input event. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEvent.Device">
            <summary>
            The event's device ID.
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsPressed">
            <summary>
            Returns [code]true[/code] if this input event is pressed. Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsAction(System.String)">
            <summary>
            Returns [code]true[/code] if this input event matches a pre-defined action of any type.
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionPressed(System.String)">
            <summary>
            Returns [code]true[/code] if the given action is being pressed (and is not an echo event for KEY events). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionReleased(System.String)">
            <summary>
            Returns [code]true[/code] if the given action is released (i.e. not pressed). Not relevant for the event types [code]MOUSE_MOTION[/code], [code]SCREEN_DRAG[/code] or [code]NONE[/code].
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsEcho">
            <summary>
            Returns [code]true[/code] if this input event is an echo event (only for events of type KEY).
            </summary>
        </member>
        <member name="M:Godot.InputEvent.AsText">
            <summary>
            Returns a [String] representation of the event.
            </summary>
        </member>
        <member name="M:Godot.InputEvent.ActionMatch(Godot.InputEvent)">
            <summary>
            Returns [code]true[/code] if this event matches [code]event[/code].
            </summary>
        </member>
        <member name="M:Godot.InputEvent.ShortcutMatch(Godot.InputEvent)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.InputEvent.IsActionType">
            <summary>
            Returns [code]true[/code] if this input event's type is one of the [code]InputEvent[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.InputEvent.XformedBy(Godot.Transform2D,System.Nullable{Godot.Vector2})">
            <summary>
            &lt;param name="localOfs"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="T:Godot.InputEventAction">
            <summary>
            Contains a generic action which can be targeted from several type of inputs. Actions can be created from the project settings menu [code]Project &gt; Project Settings &gt; Input Map[/code]. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Action">
            <summary>
            The action's name. Actions are accessed via this [String].
            </summary>
        </member>
        <member name="P:Godot.InputEventAction.Pressed">
            <summary>
            If [code]true[/code] the action's state is pressed. If [code]false[/code] the action's state is released.
            </summary>
        </member>
        <member name="P:Godot.InputEventGesture.Position">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadButton">
            <summary>
            Input event type for gamepad buttons. For joysticks see [InputEventJoypadMotion].
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.ButtonIndex">
            <summary>
            Button identifier. One of the [code]JOY_BUTTON_*[/code] constants from [@global Scope].
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressure">
            <summary>
            Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from [code]0[/code] to [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadButton.Pressed">
            <summary>
            If [code]true[/code] the button's state is pressed. If [code]false[/code] the button's state is released.
            </summary>
        </member>
        <member name="T:Godot.InputEventJoypadMotion">
            <summary>
            Stores information about joystick motions. One [code]InputEventJoypadMotion[/code] represents one axis at a time.
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.Axis">
            <summary>
            Axis identifier. Use one of the [code]JOY_AXIS_*[/code] constants in [@global Scope].
            </summary>
        </member>
        <member name="P:Godot.InputEventJoypadMotion.AxisValue">
            <summary>
            Current position of the joystick on the given axis. The value ranges from [code]-1.0[/code] to [code]1.0[/code]. A value of [code]0[/code] means the axis is in its resting position.
            </summary>
        </member>
        <member name="T:Godot.InputEventKey">
            <summary>
            Stores key presses on the keyboard. Supports key presses, key releases and [member echo] events.
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Pressed">
            <summary>
            If [code]true[/code] the key's state is pressed. If [code]false[/code] the key's state is released.
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Scancode">
            <summary>
            Key scancode, one of the [code]KEY_*[/code] constants in [@global Scope].
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Unicode">
            <summary>
            Key unicode identifier when relevant.
            </summary>
        </member>
        <member name="P:Godot.InputEventKey.Echo">
            <summary>
            If [code]true[/code] the key was already pressed before this event. It means the user is holding the key down.
            </summary>
        </member>
        <member name="M:Godot.InputEventKey.GetScancodeWithModifiers">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.InputEventMagnifyGesture.Factor">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.InputEventMouse">
            <summary>
            Stores general mouse events information.
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.ButtonMask">
            <summary>
            Mouse button mask identifier, one of or a bitwise combination of the BUTTON_MASK_* constants in [@GlobalScope].
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.Position">
            <summary>
            Mouse local position relative to the [Viewport]. If used in [method Control._gui_input] the position is relative to the current [Control] which is under the mouse.
            </summary>
        </member>
        <member name="P:Godot.InputEventMouse.GlobalPosition">
            <summary>
            Mouse position relative to the current [Viewport] when used in [method Control._gui_input], otherwise is at 0,0.
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseButton">
            <summary>
            Contains mouse click information. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Factor">
            <summary>
            TO TALK in PR, reduz said : i think it's used for apple touch but i don't remember what it does
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.ButtonIndex">
            <summary>
            Mouse button identifier, one of the BUTTON_* or BUTTON_WHEEL_* constants in [@GlobalScope].
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Pressed">
            <summary>
            If [code]true[/code] the mouse button's state is pressed. If [code]false[/code] the mouse button's state is released.
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseButton.Doubleclick">
            <summary>
            If [code]true[/code] the mouse button's state is a double-click. If [code]false[/code] the mouse button's state is released.
            </summary>
        </member>
        <member name="T:Godot.InputEventMouseMotion">
            <summary>
            Contains mouse motion information. Supports relative, absolute positions and speed. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Relative">
            <summary>
            Mouse position relative to the previous position (position at the last frame).
            </summary>
        </member>
        <member name="P:Godot.InputEventMouseMotion.Speed">
            <summary>
            Mouse speed.
            </summary>
        </member>
        <member name="P:Godot.InputEventPanGesture.Delta">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenDrag">
            <summary>
            Contains screen drag information. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Index">
            <summary>
            Drag event index in the case of a multi-drag event.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Position">
            <summary>
            Drag position.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Relative">
            <summary>
            Drag position relative to its start position.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenDrag.Speed">
            <summary>
            Drag speed.
            </summary>
        </member>
        <member name="T:Godot.InputEventScreenTouch">
            <summary>
            Stores multi-touch press/release information. Supports touch press, touch release and [member index] for multi-touch count and order.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Index">
            <summary>
            Touch index in the case of a multi-touch event. One index = one finger.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Position">
            <summary>
            Touch position.
            </summary>
        </member>
        <member name="P:Godot.InputEventScreenTouch.Pressed">
            <summary>
            If [code]true[/code] the touch's state is pressed. If [code]false[/code] the touch's state is released.
            </summary>
        </member>
        <member name="T:Godot.InputEventWithModifiers">
            <summary>
            Contains keys events information with modifiers support like [code]SHIFT[/code] or [code]ALT[/code]. See [method Node._input].
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Alt">
            <summary>
            State of the Alt modifier.
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Shift">
            <summary>
            State of the Shift modifier.
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Control">
            <summary>
            State of the Ctrl modifier.
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Meta">
            <summary>
            State of the Meta modifier.
            </summary>
        </member>
        <member name="P:Godot.InputEventWithModifiers.Command">
            <summary>
            State of the Command modifier.
            </summary>
        </member>
        <member name="T:Godot.InputMap">
            <summary>
            Manages all [InputEventAction] which can be created/modified from the project settings menu [code]Project &gt; Project Settings &gt; Input Map[/code] or in code with [method add_action] and [method action_add_event]. See [method Node._input].
            </summary>
        </member>
        <member name="M:Godot.InputMap.HasAction(System.String)">
            <summary>
            Returns [code]true[/code] if the [code]InputMap[/code] has a registered action with the given name.
            </summary>
        </member>
        <member name="M:Godot.InputMap.GetActions">
            <summary>
            Returns an array of all actions in the [code]InputMap[/code].
            </summary>
        </member>
        <member name="M:Godot.InputMap.AddAction(System.String)">
            <summary>
            Adds an (empty) action to the [code]InputMap[/code]. An [InputEvent] can then be added to this action with [method action_add_event].
            </summary>
        </member>
        <member name="M:Godot.InputMap.EraseAction(System.String)">
            <summary>
            Removes an action from the [code]InputMap[/code].
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionAddEvent(System.String,Godot.InputEvent)">
            <summary>
            Adds an [InputEvent] to an action. This [InputEvent] will trigger the action.
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionHasEvent(System.String,Godot.InputEvent)">
            <summary>
            Returns [true] if an action has an [InputEvent] associated with it.
            </summary>
        </member>
        <member name="M:Godot.InputMap.ActionEraseEvent(System.String,Godot.InputEvent)">
            <summary>
            Removes an [InputEvent] from an action.
            </summary>
        </member>
        <member name="M:Godot.InputMap.GetActionList(System.String)">
            <summary>
            Returns an array of [InputEvent]s associated with a given action.
            </summary>
        </member>
        <member name="M:Godot.InputMap.EventIsAction(Godot.InputEvent,System.String)">
            <summary>
            Returns [true] if the given event is part of an existing action. This method ignores keyboard modifiers if the given [InputEvent] is not pressed (for proper release detection). See [method action_has_event] if you don't want this behavior.
            </summary>
        </member>
        <member name="M:Godot.InputMap.LoadFromGlobals">
            <summary>
            Clears all [InputEventAction] in the [code]InputMap[/code] and load it anew from [ProjectSettings].
            </summary>
        </member>
        <member name="T:Godot.InstancePlaceholder">
            <summary>
            Turning on the option [b]Load As Placeholder[/b] for an instanced scene in the editor causes it to be replaced by an InstancePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling [method replace_by_instance]. This is useful to avoid loading large scenes all at once by loading parts of it selectively.
            The InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.GetStoredValues(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.ReplaceByInstance(Godot.PackedScene)">
            <summary>
            Replace this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided.
            </summary>
        </member>
        <member name="M:Godot.InstancePlaceholder.GetInstancePath">
            <summary>
            Retrieve the path to the [PackedScene] resource file that is loaded by default when calling [method replace_by_instance].
            </summary>
        </member>
        <member name="T:Godot.InterpolatedCamera">
            <summary>
            InterpolatedCamera is a [Camera] which smoothly moves to match a target node's position and rotation.
            If it is not [member enabled] or does not have a valid target set, InterpolatedCamera acts like a normal Camera.
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Target">
            <summary>
            The target's [NodePath].
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Speed">
            <summary>
            How quickly the camera moves toward its target. Higher values will result in tighter camera motion.
            </summary>
        </member>
        <member name="P:Godot.InterpolatedCamera.Enabled">
            <summary>
            If [code]true[/code] and a target is set, the camera will move automatically.
            </summary>
        </member>
        <member name="M:Godot.InterpolatedCamera.SetTarget(Godot.Object)">
            <summary>
            Sets the node to move toward and orient with.
            </summary>
        </member>
        <member name="T:Godot.IP">
            <summary>
            IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see [StreamPeerTCP] and [TCP_Server]). IP provides DNS hostname resolution support, both blocking and threaded.
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostname(System.String,Godot.IP.Type)">
            <summary>
            Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the TYPE_* constant given as "ip_type".
            </summary>
        </member>
        <member name="M:Godot.IP.ResolveHostnameQueueItem(System.String,Godot.IP.Type)">
            <summary>
            Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the TYPE_* constant given as "ip_type". Returns the queue ID if successful, or RESOLVER_INVALID_ID on error.
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemStatus(System.Int32)">
            <summary>
            Returns a queued hostname's status as a RESOLVER_STATUS_* constant, given its queue "id".
            </summary>
        </member>
        <member name="M:Godot.IP.GetResolveItemAddress(System.Int32)">
            <summary>
            Returns a queued hostname's IP address, given its queue "id". Returns an empty string on error or if resolution hasn't happened yet (see [method get_resolve_item_status]).
            </summary>
        </member>
        <member name="M:Godot.IP.EraseResolveItem(System.Int32)">
            <summary>
            Removes a given item "id" from the queue. This should be used to free a queue after it has completed to enable more queries to happen.
            </summary>
        </member>
        <member name="M:Godot.IP.GetLocalAddresses">
            <summary>
            Returns all of the user's current IPv4 and IPv6 addresses as an array.
            </summary>
        </member>
        <member name="M:Godot.IP.ClearCache(System.String)">
            <summary>
            Removes all of a "hostname"'s cached references. If no "hostname" is given then all cached IP addresses are removed.
            </summary>
        </member>
        <member name="T:Godot.ItemList">
            <summary>
            This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons,
            or both text and icon.  Tooltips are supported and may be different for every item in the list.  Selectable items in the list
            may be selected or deselected and multiple selection may be enabled.  Selection with right mouse button may also be enabled
            to allow use of popup context menus.  Items may also be 'activated' with a double click (or Enter key).
            </summary>
        </member>
        <member name="P:Godot.ItemList.SelectMode">
            <summary>
            Allow single or multiple selection. See the [code]SELECT_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowReselect">
            <summary>
            If [code]true[/code] the currently selected item may be selected again.
            </summary>
        </member>
        <member name="P:Godot.ItemList.AllowRmbSelect">
            <summary>
            If [code]true[/code] a right mouse button click can select items.
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxTextLines">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.AutoHeight">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.MaxColumns">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.SameColumnWidth">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedColumnWidth">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.IconScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ItemList.FixedIconSize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddItem(System.String,Godot.Texture,System.Boolean)">
            <summary>
            Adds an item to the item list with specified text.  Specify an icon of null for a list item with no icon.
            If selectable is true the list item will be selectable.
            </summary>
        </member>
        <member name="M:Godot.ItemList.AddIconItem(Godot.Texture,System.Boolean)">
            <summary>
            Adds an item to the item list with no text, only an icon.
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemText(System.Int32,System.String)">
            <summary>
            Sets text of item at specified index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemText(System.Int32)">
            <summary>
            Return the text for specified item index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            Set (or replace) icon of the item at the specified index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIcon(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemIconRegion(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemSelectable(System.Int32,System.Boolean)">
            <summary>
            Allow or disallow selection of the item at the specified index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemSelectable(System.Int32)">
            <summary>
            Returns whether or not the item at the specified index is selectable.
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            Disable (or enable) item at specified index.
            Disabled items are not be selectable and do not fire activation (Enter or double-click) signals.
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemDisabled(System.Int32)">
            <summary>
            Returns whether or not the item at the specified index is disabled
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            Sets a value (of any type) to be stored with the item at the specified index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemMetadata(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemCustomBgColor(System.Int32,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCustomBgColor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltipEnabled(System.Int32,System.Boolean)">
            <summary>
            Sets whether the tooltip is enabled for specified item index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsItemTooltipEnabled(System.Int32)">
            <summary>
            Returns whether the tooltip is enabled for specified item index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.SetItemTooltip(System.Int32,System.String)">
            <summary>
            Sets tooltip hint for item at specified index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemTooltip(System.Int32)">
            <summary>
            Return tooltip hint for specified item index.
            </summary>
        </member>
        <member name="M:Godot.ItemList.Select(System.Int32,System.Boolean)">
            <summary>
            Select the item at the specified index.
            Note:  This method does not trigger the item selection signal.
            </summary>
        </member>
        <member name="M:Godot.ItemList.Unselect(System.Int32)">
            <summary>
            Ensure item at specified index is not selected.
            </summary>
        </member>
        <member name="M:Godot.ItemList.IsSelected(System.Int32)">
            <summary>
            Returns whether or not item at the specified index is currently selected.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetSelectedItems">
            <summary>
            Returns the list of selected indexes.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemCount">
            <summary>
            Return count of items currently in the item list.
            </summary>
        </member>
        <member name="M:Godot.ItemList.RemoveItem(System.Int32)">
            <summary>
            Remove item at specified index from the list.
            </summary>
        </member>
        <member name="M:Godot.ItemList.Clear">
            <summary>
            Remove all items from the list.
            </summary>
        </member>
        <member name="M:Godot.ItemList.SortItemsByText">
            <summary>
            Sorts items in the list by their text.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetItemAtPosition(Godot.Vector2,System.Boolean)">
            <summary>
            Given a position within the control return the item (if any) at that point.
            </summary>
        </member>
        <member name="M:Godot.ItemList.EnsureCurrentIsVisible">
            <summary>
            Ensure selection is visible, adjusting the scroll position as necessary.
            </summary>
        </member>
        <member name="M:Godot.ItemList.GetVScroll">
            <summary>
            Returns the current vertical scroll bar for the List.
            </summary>
        </member>
        <member name="T:Godot.JavaScript">
            <summary>
            The JavaScript singleton is implemented only in HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs.
            </summary>
        </member>
        <member name="M:Godot.JavaScript.Eval(System.String,System.Boolean)">
            <summary>
            Execute the string [code]code[/code] as JavaScript code within the browser window. This is a call to the actual global JavaScript function [code]eval()[/code].
            If [code]use_global_execution_context[/code] is [code]true[/code], the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment.
            </summary>
        </member>
        <member name="T:Godot.Joint">
            <summary>
            All 3D joints link two nodes, has a priority, and can decide if the two bodies of the nodes should be able to collide with each other
            </summary>
        </member>
        <member name="P:Godot.Joint.Nodes__nodeA">
            <summary>
            The [Node], the first side of the Joint attaches to.
            </summary>
        </member>
        <member name="P:Godot.Joint.Nodes__nodeB">
            <summary>
            The [Node], the second side of the Joint attaches to.
            </summary>
        </member>
        <member name="P:Godot.Joint.Solver__priority">
            <summary>
            The order in which the solver is executed compared to the other [Joints], the lower, the earlier.
            </summary>
        </member>
        <member name="P:Godot.Joint.Collision__excludeNodes">
            <summary>
            If [code]true[/code] the two bodies of the nodes are not able to collide with each other.
            </summary>
        </member>
        <member name="T:Godot.Joint2D">
            <summary>
            Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint.
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeA">
            <summary>
            The first body attached to the joint. Must derive from [PhysicsBody2D].
            </summary>
        </member>
        <member name="P:Godot.Joint2D.NodeB">
            <summary>
            The second body attached to the joint. Must derive from [PhysicsBody2D].
            </summary>
        </member>
        <member name="P:Godot.Joint2D.Bias">
            <summary>
            When [member node_a] and [member node_b] move in different directions the [code]bias[/code] controls how fast the joint pulls them back to their original position. The lower the [code]bias[/code] the more the two bodies can pull on the joint. Default value: [code]0[/code]
            </summary>
        </member>
        <member name="P:Godot.Joint2D.DisableCollision">
            <summary>
            If [code]true[/code] [member node_a] and [member node_b] can collide. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="T:Godot.JSON">
            <summary>
            Helper class for parsing JSON data. For usage example and other important hints, see [JSONParseResult].
            </summary>
        </member>
        <member name="M:Godot.JSON.Print(System.Object,System.String,System.Boolean)">
            <summary>
            Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network.
            </summary>
        </member>
        <member name="M:Godot.JSON.Parse(System.String)">
            <summary>
            Parses a JSON encoded string and returns a [JSONParseResult] containing the result.
            </summary>
        </member>
        <member name="T:Godot.JSONParseResult">
            <summary>
            Returned by [method JSON.parse], [code]JSONParseResult[/code] contains decoded JSON or error information if JSON source not successfully parsed. You can check if JSON source was successfully parsed with [code]if json_result.error == OK[/code].
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Error">
            <summary>
            The error type if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants.
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorString">
            <summary>
            The error message if JSON source was not successfully parsed. See [@GlobalScope] ERR_* constants.
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.ErrorLine">
            <summary>
            The line number where the error occurred if JSON source was not successfully parsed.
            </summary>
        </member>
        <member name="P:Godot.JSONParseResult.Result">
            <summary>
            A [Variant] containing the parsed JSON. Use typeof() to check if it is what you expect. For example, if JSON source starts with curly braces ([code]{}[/code]) a [Dictionary] will be returned, if JSON source starts with braces ([code][][/code]) an [Array] will be returned.
            [i]Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.
            Note that JSON objects do not preserve key order like Godot dictionaries, thus you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:[/i]
            [codeblock]
            var p = JSON.parse('["hello", "world", "!"]')
            if typeof(p.result) == TYPE_ARRAY:
            print(p.result[0]) # prints 'hello'
            else:
            print("unexpected results")
            [/codeblock]
            </summary>
        </member>
        <member name="T:Godot.KinematicBody">
            <summary>
            Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:
            Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).
            Kinematic Characters: KinematicBody also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockLinearX">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockLinearY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockLinearZ">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockAngularX">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockAngularY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.AxisLockAngularZ">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.KinematicBody.Collision__safeMargin">
            <summary>
            If the body is at least this close to another body, this body will consider them to be colliding.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.MoveAndCollide(Godot.Vector3)">
            <summary>
            Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision], which contains information about the collision.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.MoveAndSlide(Godot.Vector3,System.Nullable{Godot.Vector3},System.Single,System.Int32,System.Single)">
            <summary>
            Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody[/code] or [RigidBody], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.
            [code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.
            [code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector3(0, 0, 0)[/code], everything is considered a wall. This is useful for topdown games.
            If the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.
            If the body collides, it will change direction a maximum of [code]max_slides[/code] times before it stops.
            [code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.
            Returns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].
            &lt;param name="floorNormal"&gt;If the param is null, then the default value is new Vector3(0, 0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.TestMove(Godot.Transform,Godot.Vector3)">
            <summary>
            Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnFloor">
            <summary>
            Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnCeiling">
            <summary>
            Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.IsOnWall">
            <summary>
            Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetFloorVelocity">
            <summary>
            Returns the velocity of the floor. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetSlideCount">
            <summary>
            Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody.GetSlideCollision(System.Int32)">
            <summary>
            Returns a [KinematicCollision], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).
            </summary>
        </member>
        <member name="T:Godot.KinematicBody2D">
            <summary>
            Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all (to other types of bodies, such a character or a rigid body, these are the same as a static body). They have however, two main uses:
            Simulated Motion: When these bodies are moved manually, either from code or from an AnimationPlayer (with process mode set to fixed), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).
            Kinematic Characters: KinematicBody2D also has an API for moving objects (the [method move_and_collide] and [method move_and_slide] methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics.
            </summary>
        </member>
        <member name="P:Godot.KinematicBody2D.Collision__safeMargin">
            <summary>
            If the body is at least this close to another body, this body will consider them to be colliding.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndCollide(Godot.Vector2)">
            <summary>
            Moves the body along the vector [code]rel_vec[/code]. The body will stop if it collides. Returns a [KinematicCollision2D], which contains information about the collision.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.MoveAndSlide(Godot.Vector2,System.Nullable{Godot.Vector2},System.Single,System.Int32,System.Single)">
            <summary>
            Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a [code]KinematicBody2D[/code] or [RigidBody2D], it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.
            [code]linear_velocity[/code] is a value in pixels per second. Unlike in for example [method move_and_collide], you should [i]not[/i] multiply it with [code]delta[/code] — this is done by the method.
            [code]floor_normal[/code] is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of [code]Vector2(0, 0)[/code], everything is considered a wall. This is useful for topdown games.
            If the body is standing on a slope and the horizontal speed (relative to the floor's speed) goes below [code]slope_stop_min_velocity[/code], the body will stop completely. This prevents the body from sliding down slopes when you include gravity in [code]linear_velocity[/code]. When set to lower values, the body will not be able to stand still on steep slopes.
            If the body collides, it will change direction a maximum of [code]max_bounces[/code] times before it stops.
            [code]floor_max_angle[/code] is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.
            Returns the movement that remained when the body stopped. To get more detailed information about collisions that occurred, use [method get_slide_collision].
            &lt;param name="floorNormal"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.TestMove(Godot.Transform2D,Godot.Vector2)">
            <summary>
            Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]rel_vec[/code]. Returns [code]true[/code] if a collision would occur.
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnFloor">
            <summary>
            Returns [code]true[/code] if the body is on the floor. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnCeiling">
            <summary>
            Returns [code]true[/code] if the body is on the ceiling. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.IsOnWall">
            <summary>
            Returns [code]true[/code] if the body is on a wall. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetFloorVelocity">
            <summary>
            Returns the velocity of the floor. Only updates when calling [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCount">
            <summary>
            Returns the number of times the body collided and changed direction during the last call to [method move_and_slide].
            </summary>
        </member>
        <member name="M:Godot.KinematicBody2D.GetSlideCollision(System.Int32)">
            <summary>
            Returns a [KinematicCollision2D], which contains information about a collision that occurred during the last [method move_and_slide] call. Since the body can collide several times in a single call to [method move_and_slide], you must specify the index of the collision in the range 0 to ([method get_slide_count] - 1).
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision">
            <summary>
            Contains collision data for KinematicBody collisions. When a [KinematicBody] is moved using [method KinematicBody.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.
            This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Position">
            <summary>
            The point of collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Normal">
            <summary>
            The colliding body's shape's normal at the point of collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Travel">
            <summary>
            The distance the moving object traveled before collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Remainder">
            <summary>
            The moving object's remaining movement vector.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.LocalShape">
            <summary>
            The moving object's colliding shape.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.Collider">
            <summary>
            The colliding body.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderId">
            <summary>
            The colliding body's unique [RID].
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderShape">
            <summary>
            The colliding body's shape.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderShapeIndex">
            <summary>
            The colliding shape's index. See [CollisionObject].
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderVelocity">
            <summary>
            The colliding object's velocity.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision.ColliderMetadata">
            <summary>
            The colliding body's metadata. See [Object].
            </summary>
        </member>
        <member name="T:Godot.KinematicCollision2D">
            <summary>
            Contains collision data for KinematicBody2D collisions. When a [KinematicBody2D] is moved using [method KinematicBody2D.move_and_collide], it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.
            This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Position">
            <summary>
            The point of collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Normal">
            <summary>
            The colliding body's shape's normal at the point of collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Travel">
            <summary>
            The distance the moving object traveled before collision.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Remainder">
            <summary>
            The moving object's remaining movement vector.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.LocalShape">
            <summary>
            The moving object's colliding shape.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.Collider">
            <summary>
            The colliding body.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderId">
            <summary>
            The colliding body's unique [RID].
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShape">
            <summary>
            The colliding body's shape.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderShapeIndex">
            <summary>
            The colliding shape's index. See [CollisionObject2D].
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderVelocity">
            <summary>
            The colliding object's velocity.
            </summary>
        </member>
        <member name="P:Godot.KinematicCollision2D.ColliderMetadata">
            <summary>
            The colliding body's metadata. See [Object].
            </summary>
        </member>
        <member name="T:Godot.Label">
            <summary>
            Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use [RichTextLabel] instead.
            Note that contrarily to most other [Control]s, Label's [member Control.mouse_filter] defaults to MOUSE_FILTER_IGNORE (i.e. it doesn't react to mouse input events).
            </summary>
        </member>
        <member name="P:Godot.Label.Text">
            <summary>
            The text to display on screen.
            </summary>
        </member>
        <member name="P:Godot.Label.Align">
            <summary>
            Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the [code]ALIGN_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.Label.Valign">
            <summary>
            Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the [code]VALIGN_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.Label.Autowrap">
            <summary>
            If [code]true[/code], wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. Default: false.
            </summary>
        </member>
        <member name="P:Godot.Label.ClipText">
            <summary>
            If [code]true[/code], the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely.
            </summary>
        </member>
        <member name="P:Godot.Label.Uppercase">
            <summary>
            If [code]true[/code], all the text displays as UPPERCASE.
            </summary>
        </member>
        <member name="P:Godot.Label.VisibleCharacters">
            <summary>
            Restricts the number of characters to display. Set to -1 to disable.
            </summary>
        </member>
        <member name="P:Godot.Label.PercentVisible">
            <summary>
            Limits the count of visible characters. If you set [code]percent_visible[/code] to 50, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box.
            </summary>
        </member>
        <member name="P:Godot.Label.LinesSkipped">
            <summary>
            The node ignores the first [code]lines_skipped[/code] lines before it starts to display text.
            </summary>
        </member>
        <member name="P:Godot.Label.MaxLinesVisible">
            <summary>
            Limits the lines of text the node shows on screen.
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineHeight">
            <summary>
            Returns the font size in pixels.
            </summary>
        </member>
        <member name="M:Godot.Label.GetLineCount">
            <summary>
            Returns the amount of lines of text the Label has.
            </summary>
        </member>
        <member name="M:Godot.Label.GetVisibleLineCount">
            <summary>
            Returns the number of lines shown. Useful if the [code]Label[/code] 's height cannot currently display all lines.
            </summary>
        </member>
        <member name="M:Godot.Label.GetTotalCharacterCount">
            <summary>
            Returns the total length of the text.
            </summary>
        </member>
        <member name="T:Godot.LargeTexture">
            <summary>
            A Texture capable of storing many smaller Textures with offsets.
            You can dynamically add pieces([Texture]) to this [code]LargeTexture[/code] using different offsets.
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.AddPiece(Godot.Vector2,Godot.Texture)">
            <summary>
            Add another [Texture] to this [code]LargeTexture[/code], starting on offset "ofs".
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceOffset(System.Int32,Godot.Vector2)">
            <summary>
            Sets the offset of the piece with index "idx" to "ofs".
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetPieceTexture(System.Int32,Godot.Texture)">
            <summary>
            Sets the [Texture] of the piece with index "idx" to  "ofs".
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.SetSize(Godot.Vector2)">
            <summary>
            Sets the size of this [code]LargeTexture[/code].
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.Clear">
            <summary>
            Clears the [code]LargeTexture[/code].
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceCount">
            <summary>
            Returns the number of pieces currently in this [code]LargeTexture[/code].
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceOffset(System.Int32)">
            <summary>
            Returns the offset of the piece with index "idx".
            </summary>
        </member>
        <member name="M:Godot.LargeTexture.GetPieceTexture(System.Int32)">
            <summary>
            Returns the [Texture] of the piece with index "idx".
            </summary>
        </member>
        <member name="T:Godot.Light">
            <summary>
            Light is the abstract base class for light nodes, so it shouldn't be used directly (It can't be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.
            </summary>
        </member>
        <member name="P:Godot.Light.LightColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightIndirectEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightNegative">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightSpecular">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightBakeMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.LightCullMask">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowBias">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowContact">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.ShadowReverseCullFace">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Light.EditorOnly">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Light2D">
            <summary>
            Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related). Note that Light2D can be used as a mask.
            </summary>
        </member>
        <member name="P:Godot.Light2D.Enabled">
            <summary>
            If [code]true[/code] Light2D will emit light. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.EditorOnly">
            <summary>
            If [code]true[/code] Light2D will only appear when editing the scene. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.Texture">
            <summary>
            [Texture] used for the Light2D's appearance.
            </summary>
        </member>
        <member name="P:Godot.Light2D.Offset">
            <summary>
            The offset of the Light2D's [code]texture[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.TextureScale">
            <summary>
            The [code]texture[/code]'s scale factor.
            </summary>
        </member>
        <member name="P:Godot.Light2D.Color">
            <summary>
            The Light2D's [Color].
            </summary>
        </member>
        <member name="P:Godot.Light2D.Energy">
            <summary>
            The Light2D's energy value. The larger the value, the stronger the light.
            </summary>
        </member>
        <member name="P:Godot.Light2D.Mode">
            <summary>
            The Light2D's mode. See MODE_* constants for values.
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeHeight">
            <summary>
            The height of the Light2D. Used with 2D normal mapping.
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMin">
            <summary>
            Minimum [code]z[/code] value of objects that are affected by the Light2D. Default value: [code]-1024[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeZMax">
            <summary>
            Maximum [code]Z[/code] value of objects that are affected by the Light2D. Default value: [code]1024[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMin">
            <summary>
            Minimum layer value of objects that are affected by the Light2D. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeLayerMax">
            <summary>
            Maximum layer value of objects that are affected by the Light2D. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.RangeItemCullMask">
            <summary>
            The layer mask. Only objects with a matching mask will be affected by the Light2D.
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowEnabled">
            <summary>
            If [code]true[/code] the Light2D will cast shadows. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowColor">
            <summary>
            [Color] of shadows cast by the Light2D.
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowBufferSize">
            <summary>
            Shadow buffer size. Default value: [code]2048[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowGradientLength">
            <summary>
            Smooth shadow gradient length.
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilter">
            <summary>
            Shadow filter type. Use SHADOW_FILTER_* constants to set [code]shadow_filter[/code]. Default value: [code]None[/code].
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowFilterSmooth">
            <summary>
            Smoothing value for shadows.
            </summary>
        </member>
        <member name="P:Godot.Light2D.ShadowItemCullMask">
            <summary>
            The shadow mask. Used with [LightOccluder2D] to cast shadows. Only occluders with a matching shadow mask will cast shadows.
            </summary>
        </member>
        <member name="T:Godot.LightOccluder2D">
            <summary>
            Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an [OccluderPolygon2D] in order for the shadow to be computed.
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.Occluder">
            <summary>
            The [OccluderPolygon2D] used to compute the shadow.
            </summary>
        </member>
        <member name="P:Godot.LightOccluder2D.LightMask">
            <summary>
            The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s).
            </summary>
        </member>
        <member name="T:Godot.Line2D">
            <summary>
            A line through several points in 2D space.
            </summary>
        </member>
        <member name="P:Godot.Line2D.Points">
            <summary>
            The points that form the lines. The line is drawn between every point set in this array.
            </summary>
        </member>
        <member name="P:Godot.Line2D.Width">
            <summary>
            The line's width.
            </summary>
        </member>
        <member name="P:Godot.Line2D.DefaultColor">
            <summary>
            The line's color. Will not be used if a gradient is set.
            </summary>
        </member>
        <member name="P:Godot.Line2D.Gradient">
            <summary>
            The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set.
            </summary>
        </member>
        <member name="P:Godot.Line2D.Texture">
            <summary>
            The texture used for the line's texture. Uses [code]texture_mode[/code] for drawing style.
            </summary>
        </member>
        <member name="P:Godot.Line2D.TextureMode">
            <summary>
            The style to render the [code]texture[/code] on the line. Use [code]LINE_TEXTURE_*[/code] constants. Default value: [code]LINE_TEXTURE_NONE[/code].
            </summary>
        </member>
        <member name="P:Godot.Line2D.JointMode">
            <summary>
            The style for the points between the start and the end.
            </summary>
        </member>
        <member name="P:Godot.Line2D.BeginCapMode">
            <summary>
            Controls the style of the line's first point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code].
            </summary>
        </member>
        <member name="P:Godot.Line2D.EndCapMode">
            <summary>
            Controls the style of the line's last point. Use [code]LINE_CAP_*[/code] constants. Default value: [code]LINE_CAP_NONE[/code].
            </summary>
        </member>
        <member name="P:Godot.Line2D.SharpLimit">
            <summary>
            The direction difference in radians between vector points. This value is only used if [code]joint mode[/code] is set to [code]LINE_JOINT_SHARP[/code].
            </summary>
        </member>
        <member name="P:Godot.Line2D.RoundPrecision">
            <summary>
            The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round.
            </summary>
        </member>
        <member name="M:Godot.Line2D.SetPointPosition(System.Int32,Godot.Vector2)">
            <summary>
            Overwrites the position in point [code]i[/code] with the supplied [code]position[/code].
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointPosition(System.Int32)">
            <summary>
            Returns point [code]i[/code]'s position.
            </summary>
        </member>
        <member name="M:Godot.Line2D.GetPointCount">
            <summary>
            Returns the Line2D's amount of points.
            </summary>
        </member>
        <member name="M:Godot.Line2D.AddPoint(Godot.Vector2)">
            <summary>
            Add a point at the [code]position[/code]. Appends the point at the end of the line.
            </summary>
        </member>
        <member name="M:Godot.Line2D.RemovePoint(System.Int32)">
            <summary>
            Remove the point at index [code]i[/code] from the line.
            </summary>
        </member>
        <member name="T:Godot.LineEdit">
            <summary>
            LineEdit provides a single line string editor, used for text fields.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Text">
            <summary>
            String value of the [LineEdit].
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Align">
            <summary>
            Text alignment as defined in the ALIGN_* enum.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.MaxLength">
            <summary>
            Maximum amount of characters that can be entered inside the [LineEdit]. If [code]0[/code], there is no limit.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Editable">
            <summary>
            If [code]false[/code] existing text cannot be modified and new text cannot be added.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.Secret">
            <summary>
            If [code]true[/code] every character is shown as "*".
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ExpandToTextLength">
            <summary>
            If [code]true[/code] the [LineEdit] width will increase to stay longer than the [member text]. It will [b]not[/b] compress if the [member text] is shortened.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.FocusMode">
            <summary>
            Defines how the [LineEdit] can grab focus (Keyboard and mouse, only keyboard, or none). See [code]enum FocusMode[/code] in [Control] for details.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.ContextMenuEnabled">
            <summary>
            If [code]true[/code] the context menu will appear when right clicked.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderText">
            <summary>
            Text shown when the [LineEdit] is empty. It is [b]not[/b] the [LineEdit]'s default value (see [member text]).
            </summary>
        </member>
        <member name="P:Godot.LineEdit.PlaceholderAlpha">
            <summary>
            Opacity of the [member placeholder_text]. From [code]0[/code] to [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlink">
            <summary>
            If [code]true[/code] the caret (visual cursor) blinks.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretBlinkSpeed">
            <summary>
            Duration (in seconds) of a caret's blinking cycle.
            </summary>
        </member>
        <member name="P:Godot.LineEdit.CaretPosition">
            <summary>
            The cursor's position inside the [code]LineEdit[/code]. When set, the text may scroll to accommodate it.
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Clear">
            <summary>
            Erases the [LineEdit] text.
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Select(System.Int32,System.Int32)">
            <summary>
            Selects characters inside [LineEdit] between [code]from[/code] and [code]to[/code]. By default [code]from[/code] is at the beginning and [code]to[/code] at the end.
            [codeblock]
            text = "Welcome"
            select()     # Welcome
            select(4)    # ome
            select(2, 5) # lco
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.LineEdit.SelectAll">
            <summary>
            Selects the whole [String].
            </summary>
        </member>
        <member name="M:Godot.LineEdit.Deselect">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:Godot.LineEdit.AppendAtCursor(System.String)">
            <summary>
            Adds [code]text[/code] after the cursor. If the resulting value is longer than [member max_length], nothing happens.
            </summary>
        </member>
        <member name="M:Godot.LineEdit.MenuOption(System.Int32)">
            <summary>
            Executes a given action as defined in the MENU_* enum.
            </summary>
        </member>
        <member name="M:Godot.LineEdit.GetMenu">
            <summary>
            Returns the [PopupMenu] of this [code]LineEdit[/code]. By default, this menu is displayed when right-clicking on the [LineEdit].
            </summary>
        </member>
        <member name="T:Godot.LineShape2D">
            <summary>
            Line shape for 2D collisions. It works like a 2D plane and will not allow any body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame.
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.Normal">
            <summary>
            The line's normal.
            </summary>
        </member>
        <member name="P:Godot.LineShape2D.D">
            <summary>
            The line's distance from the origin.
            </summary>
        </member>
        <member name="T:Godot.LinkButton">
            <summary>
            This kind of buttons are primarily used when the interaction with the button causes a context change (like linking to a web page).
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Text">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.LinkButton.Underline">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Listener.MakeCurrent">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Listener.ClearCurrent">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Listener.IsCurrent">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Listener.GetListenerTransform">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.MainLoop">
            <summary>
            Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [code]MainLoop[/code] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneTree] is created), unless a main [Script] is supplied, which may or not create and return a [code]MainLoop[/code].
            </summary>
        </member>
        <member name="M:Godot.MainLoop._DropFiles(System.String[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Finalize">
            <summary>
            Called before the program exits.
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Idle(System.Single)">
            <summary>
            Called each idle frame with time since last call as an only argument.
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Initialize">
            <summary>
            Called once during initialization.
            </summary>
        </member>
        <member name="M:Godot.MainLoop._InputEvent(Godot.InputEvent)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._InputText(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop._Iteration(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.InputEvent(Godot.InputEvent)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.InputText(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Init">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Iteration(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Idle(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MainLoop.Finish">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.MarginContainer">
            <summary>
            Simple margin container. Adds a left margin to anything contained.
            </summary>
        </member>
        <member name="T:Godot.Marshalls">
            <summary>
            Provides data transformation and encoding utility functions.
            </summary>
        </member>
        <member name="M:Godot.Marshalls.VariantToBase64(System.Object)">
            <summary>
            Return base64 encoded String of a given [Variant].
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToVariant(System.String)">
            <summary>
            Return [Variant] of a given base64 encoded String.
            </summary>
        </member>
        <member name="M:Godot.Marshalls.RawToBase64(System.Byte[])">
            <summary>
            Return base64 encoded String of a given [PoolByteArray].
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToRaw(System.String)">
            <summary>
            Return [PoolByteArray] of a given base64 encoded String.
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Utf8ToBase64(System.String)">
            <summary>
            Return base64 encoded String of a given utf8 String.
            </summary>
        </member>
        <member name="M:Godot.Marshalls.Base64ToUtf8(System.String)">
            <summary>
            Return utf8 String of a given base64 encoded String.
            </summary>
        </member>
        <member name="T:Godot.Material">
            <summary>
            Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.
            </summary>
        </member>
        <member name="P:Godot.Material.RenderPriority">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Material.NextPass">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.MenuButton">
            <summary>
            Special button that brings up a [PopupMenu] when clicked. That's pretty much all it does, as it's just a helper class when building GUIs.
            </summary>
        </member>
        <member name="M:Godot.MenuButton.GetPopup">
            <summary>
            Return the [PopupMenu] contained in this button.
            </summary>
        </member>
        <member name="M:Godot.MenuButton.SetDisableShortcuts(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Mesh">
            <summary>
            Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [i]surfaces[/i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.
            </summary>
        </member>
        <member name="P:Godot.Mesh.LightmapSizeHint">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateTrimeshShape">
            <summary>
            Calculate a [ConcavePolygonShape] from the mesh.
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateConvexShape">
            <summary>
            Calculate a [ConvexPolygonShape] from the mesh.
            </summary>
        </member>
        <member name="M:Godot.Mesh.CreateOutline(System.Single)">
            <summary>
            Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: Typically returns the vertices in reverse order (e.g. clockwise to anti-clockwise).
            </summary>
        </member>
        <member name="M:Godot.Mesh.GetFaces">
            <summary>
            Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle.
            </summary>
        </member>
        <member name="M:Godot.Mesh.GenerateTriangleMesh">
            <summary>
            Generate a [TriangleMesh] from the mesh.
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CreateFromSurface(Godot.ArrayMesh,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.CommitToSurface(Godot.ArrayMesh)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFormat">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertex(System.Int32,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertex(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexNormal(System.Int32,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexNormal(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexTangent(System.Int32,Godot.Plane)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexTangent(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv(System.Int32,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexUv2(System.Int32,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexUv2(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexColor(System.Int32,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexColor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexBones(System.Int32,System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexBones(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexWeights(System.Int32,System.Single[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexWeights(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetVertexMeta(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexMeta(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexEdges(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetVertexFaces(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeVertex(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeFaces(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetEdgeMeta(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetEdgeMeta(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceVertex(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceEdge(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetFaceMeta(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceMeta(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetFaceNormal(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.SetMaterial(Godot.Material)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshDataTool.GetMaterial">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.MeshInstance">
            <summary>
            MeshInstance is a node that takes a [Mesh] resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.
            </summary>
        </member>
        <member name="P:Godot.MeshInstance.Mesh">
            <summary>
            The [Mesh] resource for the instance.
            </summary>
        </member>
        <member name="P:Godot.MeshInstance.Skeleton">
            <summary>
            [NodePath] to the [Skeleton] associated with the instance.
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.SetSurfaceMaterial(System.Int32,Godot.Material)">
            <summary>
            Sets the [Material] for a surface of the [Mesh] resource.
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.GetSurfaceMaterial(System.Int32)">
            <summary>
            Returns the [Material] for a surface of the [Mesh] resource.
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateTrimeshCollision">
            <summary>
            This helper creates a [StaticBody] child node with a [ConcavePolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateConvexCollision">
            <summary>
            This helper creates a [StaticBody] child node with a [ConvexPolygonShape] collision shape calculated from the mesh geometry. It's mainly used for testing.
            </summary>
        </member>
        <member name="M:Godot.MeshInstance.CreateDebugTangents">
            <summary>
            This helper creates a [MeshInstance] child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing.
            </summary>
        </member>
        <member name="T:Godot.MeshLibrary">
            <summary>
            Library of meshes. Contains a list of [Mesh] resources, each with name and ID. Useful for GridMap or painting Terrain.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.CreateItem(System.Int32)">
            <summary>
            Create a new item in the library, supplied an id.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemName(System.Int32,System.String)">
            <summary>
            Set the name of the item.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemMesh(System.Int32,Godot.Mesh)">
            <summary>
            Set the mesh of the item.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemNavmesh(System.Int32,Godot.NavigationMesh)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemShapes(System.Int32,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.SetItemPreview(System.Int32,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemName(System.Int32)">
            <summary>
            Return the name of the item.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemMesh(System.Int32)">
            <summary>
            Return the mesh of the item.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemNavmesh(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemShapes(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemPreview(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.RemoveItem(System.Int32)">
            <summary>
            Remove the item.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.FindItemByName(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.Clear">
            <summary>
            Clear the library.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetItemList">
            <summary>
            Return the list of items.
            </summary>
        </member>
        <member name="M:Godot.MeshLibrary.GetLastUnusedItemId">
            <summary>
            Get an unused id for a new item.
            </summary>
        </member>
        <member name="T:Godot.MobileVRInterface">
            <summary>
            This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect you do need a mobile phone with a gyroscope and accelerometer.
            Note that even though there is no positional tracking the camera will assume the headset is at a height of 1.85 meters.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Iod">
            <summary>
            The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayWidth">
            <summary>
            The width of the display in centimeters.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.DisplayToLens">
            <summary>
            The distance between the display and the lenses inside of the device in centimeters.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.Oversample">
            <summary>
            The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K1">
            <summary>
            The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect.
            </summary>
        </member>
        <member name="P:Godot.MobileVRInterface.K2">
            <summary>
            The k2 lens factor, see k1.
            </summary>
        </member>
        <member name="T:Godot.MultiMesh">
            <summary>
            MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory.
            For this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.
            As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).
            Since instances may have any behavior, the AABB used for visibility must be provided by the user.
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.ColorFormat">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.TransformFormat">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.InstanceCount">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.MultiMesh.Mesh">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceTransform(System.Int32,Godot.Transform)">
            <summary>
            Set the transform for a specific instance.
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceTransform(System.Int32)">
            <summary>
            Return the transform of a specific instance.
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.SetInstanceColor(System.Int32,Godot.Color)">
            <summary>
            Set the color of a specific instance.
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetInstanceColor(System.Int32)">
            <summary>
            Get the color of a specific instance.
            </summary>
        </member>
        <member name="M:Godot.MultiMesh.GetAabb">
            <summary>
            Return the visibility AABB.
            </summary>
        </member>
        <member name="T:Godot.MultiMeshInstance">
            <summary>
            [code]MultiMeshInstance[/code] is a specialized node to instance [GeometryInstance]s based on a [MultiMesh] resource.
            This is useful to optimize the rendering of a high amount of instances of a given mesh (for example tree in a forest or grass strands).
            </summary>
        </member>
        <member name="P:Godot.MultiMeshInstance.Multimesh">
            <summary>
            The [MultiMesh] resource that will be used and shared among all instances of the [code]MultiMeshInstance[/code].
            </summary>
        </member>
        <member name="T:Godot.Mutex">
            <summary>
            A synchronization Mutex. Element used to synchronize multiple [Thread]s. Basically a binary [Semaphore]. Guarantees that only one thread can ever acquire this lock at a time. Can be used to protect a critical section. Be careful to avoid deadlocks.
            </summary>
        </member>
        <member name="M:Godot.Mutex.Lock">
            <summary>
            Lock this [code]Mutex[/code], blocks until it is unlocked by the current owner.
            </summary>
        </member>
        <member name="M:Godot.Mutex.TryLock">
            <summary>
            Try locking this [code]Mutex[/code], does not block. Returns [OK] on success, [ERR_BUSY] otherwise.
            </summary>
        </member>
        <member name="M:Godot.Mutex.Unlock">
            <summary>
            Unlock this [code]Mutex[/code], leaving it to other threads.
            </summary>
        </member>
        <member name="P:Godot.NativeScript.ClassName">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NativeScript.Library">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NativeScript.New(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Navigation">
            <summary>
            Provides navigation and pathfinding within a collection of [NavigationMesh]es. By default these will be automatically collected from child [NavigationMeshInstance] nodes, but they can also be added on the fly with [method navmesh_add]. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.
            </summary>
        </member>
        <member name="P:Godot.Navigation.UpVector">
            <summary>
            Defines which direction is up. By default this is [code](0, 1, 0)[/code], which is the world up direction.
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshAdd(Godot.NavigationMesh,Godot.Transform,Godot.Object)">
            <summary>
            Adds a [NavigationMesh]. Returns an ID for use with [method navmesh_remove] or [method navmesh_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner].
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshSetTransform(System.Int32,Godot.Transform)">
            <summary>
            Sets the transform applied to the [NavigationMesh] with the given ID.
            </summary>
        </member>
        <member name="M:Godot.Navigation.NavmeshRemove(System.Int32)">
            <summary>
            Removes the [NavigationMesh] with the given ID.
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetSimplePath(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the agent properties associated with each [NavigationMesh] (raidus, height, etc.) are considered in the path calculation, otherwise they are ignored.
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointToSegment(Godot.Vector3,Godot.Vector3,System.Boolean)">
            <summary>
            Returns the navigation point closest to the given line segment. When enabling [code]use_collision[/code], only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned.
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPoint(Godot.Vector3)">
            <summary>
            Returns the navigation point closest to the point given. Points are in local coordinate space.
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointNormal(Godot.Vector3)">
            <summary>
            Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on.
            </summary>
        </member>
        <member name="M:Godot.Navigation.GetClosestPointOwner(Godot.Vector3)">
            <summary>
            Returns the owner of the [NavigationMesh] which contains the navigation point closest to the point given. This is usually a [NavigtionMeshInstance]. For meshes added via [method navmesh_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted).
            </summary>
        </member>
        <member name="T:Godot.Navigation2D">
            <summary>
            Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of [NavigationPolygon] resources. By default these are automatically collected from child [NavigationPolygonInstance] nodes, but they can also be added on the fly with [method navpoly_add].
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolyAdd(Godot.NavigationPolygon,Godot.Transform2D,Godot.Object)">
            <summary>
            Adds a [NavigationPolygon]. Returns an ID for use with [method navpoly_remove] or [method navpoly_set_transform]. If given, a [Transform2D] is applied to the polygon. The optional [code]owner[/code] is used as return value for [method get_closest_point_owner].
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolySetTransform(System.Int32,Godot.Transform2D)">
            <summary>
            Sets the transform applied to the [NavigationPolygon] with the given ID.
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.NavpolyRemove(System.Int32)">
            <summary>
            Removes the [NavigationPolygon] with the given ID.
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetSimplePath(Godot.Vector2,Godot.Vector2,System.Boolean)">
            <summary>
            Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the path is smoothed by merging path segments where possible.
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPoint(Godot.Vector2)">
            <summary>
            Returns the navigation point closest to the point given. Points are in local coordinate space.
            </summary>
        </member>
        <member name="M:Godot.Navigation2D.GetClosestPointOwner(Godot.Vector2)">
            <summary>
            Returns the owner of the [NavigationPolygon] which contains the navigation point closest to the point given. This is usually a [NavigtionPolygonInstance]. For polygons added via [method navpoly_add], returns the owner that was given (or [code]null[/code] if the [code]owner[/code] parameter was omitted).
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.SamplePartitionType__samplePartitionType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Cell__size">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Cell__height">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__height">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__radius">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__maxClimb">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Agent__maxSlope">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Region__minSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Region__mergeSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Edge__maxLength">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Edge__maxError">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Polygon__vertsPerPoly">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Detail__sampleDistance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Detail__sampleMaxError">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__lowHangingObstacles">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__ledgeSpans">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMesh.Filter__filterWalkableLowHeightSpans">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.SetVertices(Godot.Vector3[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetVertices">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.AddPolygon(System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetPolygonCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.GetPolygon(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.ClearPolygons">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationMesh.CreateFromMesh(Godot.Mesh)">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMeshInstance.Navmesh">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationMeshInstance.Enabled">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetVertices(Godot.Vector2[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetVertices">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddPolygon(System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygonCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetPolygon(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearPolygons">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutline(Godot.Vector2[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.AddOutlineAtIndex(Godot.Vector2[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutlineCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.SetOutline(System.Int32,Godot.Vector2[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.GetOutline(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.RemoveOutline(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.ClearOutlines">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.NavigationPolygon.MakePolygonsFromOutlines">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationPolygonInstance.Navpoly">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.NavigationPolygonInstance.Enabled">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerENet">
            <summary>
            A PacketPeer implementation that should be passed to [method SceneTree.set_network_peer] after being initialized as either a client or server. Events can then be handled by connecting to [SceneTree] signals.
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerENet.CompressionMode">
            <summary>
            The compression method used for network packets. Default is no compression. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateServer(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create server that listens to connections via [code]port[/code]. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use [method set_bind_ip]. The default IP is the wildcard [code]*[/code], which listens on all available interfaces. [code]max_clients[/code] is the maximum number of clients that are allowed at once, any number up to 4096 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see [method create_client]. Returns [code]OK[/code] if a server was created, [code]ERR_ALREADY_IN_USE[/code] if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call [method close_connection] first) or [code]ERR_CANT_CREATE[/code] if the server could not be created.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CreateClient(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create client that connects to a server at address [code]ip[/code] using specified [code]port[/code]. The given IP needs to be in IPv4 or IPv6 address format, for example: [code]192.168.1.1[/code]. The [code]port[/code] is the port the server is listening on. The [code]in_bandwidth[/code] and [code]out_bandwidth[/code] parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns [code]OK[/code] if a client was created, [code]ERR_ALREADY_IN_USE[/code] if this NetworkedMultiplayerEnet instance already has an open connection (in which case you need to call [method close_connection] first) or [code]ERR_CANT_CREATE[/code] if the client could not be created.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.CloseConnection">
            <summary>
            Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerENet.SetBindIp(System.String)">
            <summary>
            The IP used when creating a server. This is set to the wildcard [code]*[/code] by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: [code]192.168.1.1[/code].
            </summary>
        </member>
        <member name="T:Godot.NetworkedMultiplayerPeer">
            <summary>
            Manages the connection to network peers. Assigns unique IDs to each client connected to the server.
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.RefuseNewConnections">
            <summary>
            If [code]true[/code] this [code]NetworkedMultiplayerPeer[/code] refuses new connections. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.NetworkedMultiplayerPeer.TransferMode">
            <summary>
            The manner in which to send packets to the [code]target_peer[/code]. See [enum TransferMode].
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.SetTargetPeer(System.Int32)">
            <summary>
            The peer to which packets will be sent. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetPacketPeer">
            <summary>
            Returns the ID of the [code]NetworkedMultiplayerPeer[/code] who sent the most recent packet.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.Poll">
            <summary>
            Waits up to 1 second to receive a new network event.
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetConnectionStatus">
            <summary>
            Returns the current state of the connection. See [enum ConnectionStatus].
            </summary>
        </member>
        <member name="M:Godot.NetworkedMultiplayerPeer.GetUniqueId">
            <summary>
            Returns the ID of this [code]NetworkedMultiplayerPeer[/code].
            </summary>
        </member>
        <member name="T:Godot.NinePatchRect">
            <summary>
            Better known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3 by 3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.Texture">
            <summary>
            The node's texture resource.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.DrawCenter">
            <summary>
            If [code]true[/code], draw the panel's center. Else, only draw the 9-slice's borders. Default value: [code]true[/code]
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.RegionRect">
            <summary>
            Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginLeft">
            <summary>
            The height of the 9-slice's left column.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginTop">
            <summary>
            The height of the 9-slice's top row.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginRight">
            <summary>
            The height of the 9-slice's right column.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.PatchMarginBottom">
            <summary>
            The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchHorizontal">
            <summary>
            Doesn't do anything at the time of writing.
            </summary>
        </member>
        <member name="P:Godot.NinePatchRect.AxisStretchVertical">
            <summary>
            Doesn't do anything at the time of writing.
            </summary>
        </member>
        <member name="T:Godot.Node">
            <summary>
            Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.
            A tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects. Nodes can also optionally be added to groups. This makes it possible to access a number of nodes from code (an "enemies" group, for example) to perform grouped actions.
            [b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.
            Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.
            This means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).
            [b]Processing:[/b] Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.
            Nodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.
            To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.
            Finally, when a node is freed with [method free] or [method queue_free], it will also free all its children.
            [b]Groups:[/b] Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See [method add_to_group], [method is_in_group] and [method remove_from_group]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [SceneTree].
            [b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers). Also take a look at the high-level networking tutorial and corresponding demos.
            </summary>
        </member>
        <member name="P:Godot.Node.PauseMode">
            <summary>
            Pause mode. How the node will behave if the [SceneTree] is paused.
            </summary>
        </member>
        <member name="P:Godot.Node.Name">
            <summary>
            The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed
            </summary>
        </member>
        <member name="P:Godot.Node.Filename">
            <summary>
            When a scene is instanced from a file, its topmost node contains the filename from which it was loaded.
            </summary>
        </member>
        <member name="P:Godot.Node.Owner">
            <summary>
            The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using [PackedScene]) all the nodes it owns will be saved with it. This allows for the creation of complex [SceneTree]s, with instancing and subinstancing.
            </summary>
        </member>
        <member name="M:Godot.Node._EnterTree">
            <summary>
            Called when the node enters the [SceneTree] (e.g. upon instancing, scene changing, or after calling [method add_child] in a script). If the node has children, its [method _enter_tree] callback will be called first, and then that of the children.
            Corresponds to the NOTIFICATION_ENTER_TREE notification in [method Object._notification].
            </summary>
        </member>
        <member name="M:Godot.Node._ExitTree">
            <summary>
            Called when the node is about to leave the [SceneTree] (e.g. upon freeing, scene changing, or after calling [method remove_child] in a script). If the node has children, its [method _exit_tree] callback will be called last, after all its children have left the tree.
            Corresponds to the NOTIFICATION_EXIT_TREE notification in [method Object._notification] and signal [signal tree_exiting]. To get notified when the node has already left the active tree, connect to the [signal tree_exited]
            </summary>
        </member>
        <member name="M:Godot.Node._Input(Godot.InputEvent)">
            <summary>
            Called when there is an input event. The input event propagates through the node tree until a node consumes it.
            It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_input].
            To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.
            For gameplay input, [method _unhandled_input] and [method _unhandled_key_input] are usually a better fit as they allow the GUI to intercept the events first.
            </summary>
        </member>
        <member name="M:Godot.Node._PhysicsProcess(System.Single)">
            <summary>
            Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the [code]delta[/code] variable should be constant.
            It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_physics_process].
            Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in [method Object._notification].
            </summary>
        </member>
        <member name="M:Godot.Node._Process(System.Single)">
            <summary>
            Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the [code]delta[/code] time since the previous frame is not constant.
            It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process].
            Corresponds to the NOTIFICATION_PROCESS notification in [method Object._notification].
            </summary>
        </member>
        <member name="M:Godot.Node._Ready">
            <summary>
            Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their [method _ready] callbacks get triggered first, and the parent node will receive the ready notification afterwards.
            Corresponds to the NOTIFICATION_READY notification in [method Object._notification]. See also the [code]onready[/code] keyword for variables.
            Usually used for initialization. For even earlier initialization, [method Object._init] may be used. Also see [method _enter_tree].
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledInput(Godot.InputEvent)">
            <summary>
            Propagated to all nodes when the previous [InputEvent] is not consumed by any nodes.
            It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_input].
            To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.
            For gameplay input, this and [method _unhandled_key_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.
            </summary>
        </member>
        <member name="M:Godot.Node._UnhandledKeyInput(Godot.InputEventKey)">
            <summary>
            Propagated to all nodes when the previous [InputEventKey] is not consumed by any nodes.
            It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with [method set_process_unhandled_key_input].
            To consume the input event and stop it propagating further to other nodes, [method SceneTree.set_input_as_handled] can be called.
            For gameplay input, this and [method _unhandled_input] are usually a better fit than [method _input] as they allow the GUI to intercept the events first.
            </summary>
        </member>
        <member name="M:Godot.Node.AddChildBelowNode(Godot.Node,Godot.Node,System.Boolean)">
            <summary>
            Adds a child node. The child is placed below the given node in the list of children.
            Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
            </summary>
        </member>
        <member name="M:Godot.Node.AddChild(Godot.Node,System.Boolean)">
            <summary>
            Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.
            Setting "legible_unique_name" [code]true[/code] creates child nodes with human-readable names, based on the name of the node being instanced instead of its type.
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveChild(Godot.Node)">
            <summary>
            Removes a child node. The node is NOT deleted and must be deleted manually.
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildCount">
            <summary>
            Returns the number of child nodes.
            </summary>
        </member>
        <member name="M:Godot.Node.GetChildren">
            <summary>
            Returns an array of references to node's children.
            </summary>
        </member>
        <member name="M:Godot.Node.GetChild(System.Int32)">
            <summary>
            Returns a child node by its index (see [method get_child_count]). This method is often used for iterating all children of a node.
            </summary>
        </member>
        <member name="M:Godot.Node.HasNode(Godot.NodePath)">
            <summary>
            Returns [code]true[/code] if the node that the [NodePath] points to exists.
            </summary>
        </member>
        <member name="M:Godot.Node.GetNode(Godot.NodePath)">
            <summary>
            Fetches a node. The [NodePath] can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a [code]null instance[/code] is returned and attempts to access it will result in an "Attempt to call &lt;method&gt; on a null instance." error.
            Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).
            [i]Example:[/i] Assume your current node is Character and the following tree:
            [codeblock]
            /root
            /root/Character
            /root/Character/Sword
            /root/Character/Backpack/Dagger
            /root/MyGame
            /root/Swamp/Alligator
            /root/Swamp/Mosquito
            /root/Swamp/Goblin
            [/codeblock]
            Possible paths are:
            [codeblock]
            get_node("Sword")
            get_node("Backpack/Dagger")
            get_node("../Swamp/Alligator")
            get_node("/root/MyGame")
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Node.GetParent">
            <summary>
            Returns the parent node of the current node, or an empty [code]Node[/code] if the node lacks a parent.
            </summary>
        </member>
        <member name="M:Godot.Node.FindNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds a descendant of this node whose name matches [code]mask[/code] as in [method String.match] (i.e. case sensitive, but '*' matches zero or more characters and '?' matches any single character except '.'). Note that it does not match against the full path, just against individual node names.
            </summary>
        </member>
        <member name="M:Godot.Node.HasNodeAndResource(Godot.NodePath)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Node.GetNodeAndResource(Godot.NodePath)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Node.IsInsideTree">
            <summary>
            Returns [code]true[/code] if this node is currently inside a [SceneTree].
            </summary>
        </member>
        <member name="M:Godot.Node.IsAParentOf(Godot.Node)">
            <summary>
            Returns [code]true[/code] if the given node is a direct or indirect child of the current node.
            </summary>
        </member>
        <member name="M:Godot.Node.IsGreaterThan(Godot.Node)">
            <summary>
            Returns [code]true[/code] if the given node occurs later in the scene hierarchy than the current node.
            </summary>
        </member>
        <member name="M:Godot.Node.GetPath">
            <summary>
            Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see [method is_inside_tree]).
            </summary>
        </member>
        <member name="M:Godot.Node.GetPathTo(Godot.Node)">
            <summary>
            Returns the relative [NodePath] from this node to the specified [code]node[/code]. Both nodes must be in the same scene or the function will fail.
            </summary>
        </member>
        <member name="M:Godot.Node.AddToGroup(System.String,System.Boolean)">
            <summary>
            Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see [method is_inside_tree]). See notes in the description, and the group methods in [SceneTree].
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveFromGroup(System.String)">
            <summary>
            Removes a node from a group. See notes in the description, and the group methods in [SceneTree].
            </summary>
        </member>
        <member name="M:Godot.Node.IsInGroup(System.String)">
            <summary>
            Returns [code]true[/code] if this node is in the specified group. See notes in the description, and the group methods in [SceneTree].
            </summary>
        </member>
        <member name="M:Godot.Node.MoveChild(Godot.Node,System.Int32)">
            <summary>
            Moves a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful.
            </summary>
        </member>
        <member name="M:Godot.Node.GetGroups">
            <summary>
            Returns an array listing the groups that the node is a member of.
            </summary>
        </member>
        <member name="M:Godot.Node.Raise">
            <summary>
            Moves this node to the top of the array of nodes of the parent node. This is often useful in GUIs ([Control] nodes), because their order of drawing depends on their order in the tree.
            </summary>
        </member>
        <member name="M:Godot.Node.RemoveAndSkip">
            <summary>
            Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed.
            </summary>
        </member>
        <member name="M:Godot.Node.GetIndex">
            <summary>
            Returns the node's index, i.e. its position among the siblings of its parent.
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTree">
            <summary>
            Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the [method get_node] function. Example output:
            [codeblock]
            TheGame
            TheGame/Menu
            TheGame/Menu/Label
            TheGame/Menu/Camera2D
            TheGame/SplashScreen
            TheGame/SplashScreen/Camera2D
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Node.PrintTreePretty">
            <summary>
            Similar to [method print_tree], this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees. Example output:
            [codeblock]
            ┖╴TheGame
            ┠╴Menu
            ┃  ┠╴Label
            ┃  ┖╴Camera2D
            ┖-SplashScreen
            ┖╴Camera2D
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateNotification(System.Int32)">
            <summary>
            Notifies the current node and all its children recursively by calling notification() on all of them.
            </summary>
        </member>
        <member name="M:Godot.Node.PropagateCall(System.String,System.Object[],System.Boolean)">
            <summary>
            Calls the given method (if present) with the arguments given in [code]args[/code] on this node and recursively on all its children. If the parent_first argument is [code]true[/code] then the method will be called on the current node first, then on all children. If it is [code]false[/code] then the children will be called first.
            &lt;param name="args"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcess(System.Boolean)">
            <summary>
            Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 fps, see [OS] to change) interval (and the [method _physics_process] callback will be called if exists). Enabled automatically if [method _physics_process] is overridden. Any calls to this before [method _ready] will be ignored.
            </summary>
        </member>
        <member name="M:Godot.Node.GetPhysicsProcessDeltaTime">
            <summary>
            Returns the time elapsed since the last physics-bound frame (see [method _physics_process]). This is always a constant value in physics processing unless the frames per second is changed in [OS].
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessing">
            <summary>
            Returns [code]true[/code] if physics processing is enabled (see [method set_physics_process]).
            </summary>
        </member>
        <member name="M:Godot.Node.GetProcessDeltaTime">
            <summary>
            Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame.
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcess(System.Boolean)">
            <summary>
            Enables or disables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the [method _process] callback will be called if exists). Enabled automatically if [method _process] is overridden. Any calls to this before [method _ready] will be ignored.
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessing">
            <summary>
            Returns [code]true[/code] if processing is enabled (see [method set_process]).
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInput(System.Boolean)">
            <summary>
            Enables or disables input processing. This is not required for GUI controls! Enabled automatically if [method _input] is overridden. Any calls to this before [method _ready] will be ignored.
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInput">
            <summary>
            Returns [code]true[/code] if the node is processing input (see [method set_process_input]).
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledInput(System.Boolean)">
            <summary>
            Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a [Control]). Enabled automatically if [method _unhandled_input] is overridden. Any calls to this before [method _ready] will be ignored.
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledInput">
            <summary>
            Returns [code]true[/code] if the node is processing unhandled input (see [method set_process_unhandled_input]).
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessUnhandledKeyInput(System.Boolean)">
            <summary>
            Enables unhandled key input processing. Enabled automatically if [method _unhandled_key_input] is overridden. Any calls to this before [method _ready] will be ignored.
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingUnhandledKeyInput">
            <summary>
            Returns [code]true[/code] if the node is processing unhandled key input (see [method set_process_unhandled_key_input]).
            </summary>
        </member>
        <member name="M:Godot.Node.CanProcess">
            <summary>
            Returns [code]true[/code] if the node can process while the scene tree is paused (see [method set_pause_mode]). Always returns [code]true[/code] if the scene tree is not paused, and [code]false[/code] if the node is not in the tree. FIXME: Why FAIL_COND?
            </summary>
        </member>
        <member name="M:Godot.Node.PrintStrayNodes">
            <summary>
            Prints all stray nodes (nodes outside the [SceneTree]). Used for debugging. Works only in debug builds.
            </summary>
        </member>
        <member name="M:Godot.Node.GetPositionInParent">
            <summary>
            Returns the node's order in the scene tree branch. For example, if called on the first child node the position is [code]0[/code].
            </summary>
        </member>
        <member name="M:Godot.Node.SetDisplayFolded(System.Boolean)">
            <summary>
            Sets the folded state of the node in the Scene dock.
            </summary>
        </member>
        <member name="M:Godot.Node.IsDisplayedFolded">
            <summary>
            Returns [code]true[/code] if the node is folded (collapsed) in the Scene dock.
            </summary>
        </member>
        <member name="M:Godot.Node.SetProcessInternal(System.Boolean)">
            <summary>
            Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal [method]_process[/code] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting ([method set_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.
            </summary>
        </member>
        <member name="M:Godot.Node.IsProcessingInternal">
            <summary>
            Returns [code]true[/code] if internal processing is enabled (see [method set_process_internal]).
            </summary>
        </member>
        <member name="M:Godot.Node.SetPhysicsProcessInternal(System.Boolean)">
            <summary>
            Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal [method]_physics_process[/code] calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting ([method set_physics_process]). Only useful for advanced uses to manipulate built-in nodes behaviour.
            </summary>
        </member>
        <member name="M:Godot.Node.IsPhysicsProcessingInternal">
            <summary>
            Returns [code]true[/code] if internal physics processing is enabled (see [method set_physics_process_internal]).
            </summary>
        </member>
        <member name="M:Godot.Node.GetTree">
            <summary>
            Returns the [SceneTree] that contains this node.
            </summary>
        </member>
        <member name="M:Godot.Node.Duplicate(System.Int32)">
            <summary>
            Duplicates the node, returning a new node.
            You can fine-tune the behavior using the [code]flags[/code]. See DUPLICATE_* constants.
            </summary>
        </member>
        <member name="M:Godot.Node.ReplaceBy(Godot.Node,System.Boolean)">
            <summary>
            Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost.
            </summary>
        </member>
        <member name="M:Godot.Node.SetSceneInstanceLoadPlaceholder(System.Boolean)">
            <summary>
            Sets whether this is an instance load placeholder. See [InstancePlaceholder].
            </summary>
        </member>
        <member name="M:Godot.Node.GetSceneInstanceLoadPlaceholder">
            <summary>
            Returns [code]true[/code] if this is an instance load placeholder. See [InstancePlaceholder].
            </summary>
        </member>
        <member name="M:Godot.Node.GetViewport">
            <summary>
            Returns the node's [Viewport].
            </summary>
        </member>
        <member name="M:Godot.Node.QueueFree">
            <summary>
            Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to [method Object.free]. Use [method Object.is_queued_for_deletion] to check whether a node will be deleted at the end of the frame.
            </summary>
        </member>
        <member name="M:Godot.Node.RequestReady">
            <summary>
            Requests that [code]_ready[/code] be called again.
            </summary>
        </member>
        <member name="M:Godot.Node.SetNetworkMaster(System.Int32,System.Boolean)">
            <summary>
            Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the [code]master[/code] and [code]slave[/code] keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If [code]recursive[/code], the given peer is recursively set as the master for all children of this node.
            </summary>
        </member>
        <member name="M:Godot.Node.GetNetworkMaster">
            <summary>
            Returns the peer ID of the network master for this node. See [method set_network_master].
            </summary>
        </member>
        <member name="M:Godot.Node.IsNetworkMaster">
            <summary>
            Returns [code]true[/code] if the local system is the master of this node.
            </summary>
        </member>
        <member name="M:Godot.Node.RpcConfig(System.String,Godot.Node.RPCMode)">
            <summary>
            Changes the RPC mode for the given [code]method[/code] to the given [code]mode[/code]. See [enum RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]sync[/code], [code]master[/code], [code]slave[/code]). By default, methods are not exposed to networking (and RPCs). Also see [method rset] and [method rset_config] for properties.
            </summary>
        </member>
        <member name="M:Godot.Node.RsetConfig(System.String,Godot.Node.RPCMode)">
            <summary>
            Changes the RPC mode for the given [code]property[/code] to the given [code]mode[/code]. See [enum RPCMode]. An alternative is annotating methods and properties with the corresponding keywords ([code]remote[/code], [code]sync[/code], [code]master[/code], [code]slave[/code]). By default, properties are not exposed to networking (and RPCs). Also see [method rpc] and [method rpc_config] for methods.
            </summary>
        </member>
        <member name="M:Godot.Node.Rpc(System.String,System.Object[])">
            <summary>
            Sends a remote procedure call request for the given [code]method[/code] to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same [NodePath], including the exact same node name. Behaviour depends on the RPC configuration for the given method, see [method rpc_config]. Methods are not exposed to RPCs by default. Also see [method rset] and [method rset_config] for properties. Returns an empty [Variant]. Note that you can only safely use RPCs on clients after you received the [code]connected_to_server[/code] signal from the [SceneTree]. You also need to keep track of the connection state, either by the [SceneTree] signals like [code]server_disconnected[/code] or by checking [code]SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED[/code].
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliable(System.String,System.Object[])">
            <summary>
            Sends a [method rpc] using an unreliable protocol. Returns an empty [Variant].
            </summary>
        </member>
        <member name="M:Godot.Node.RpcId(System.Int32,System.String,System.Object[])">
            <summary>
            Sends a [method rpc] to a specific peer identified by [code]peer_id[/code]. Returns an empty [Variant].
            </summary>
        </member>
        <member name="M:Godot.Node.RpcUnreliableId(System.Int32,System.String,System.Object[])">
            <summary>
            Sends a [method rpc] to a specific peer identified by [code]peer_id[/code] using an unreliable protocol. Returns an empty [Variant].
            </summary>
        </member>
        <member name="M:Godot.Node.Rset(System.String,System.Object)">
            <summary>
            Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see [method rset_config]. Also see [method rpc] for RPCs for methods, most information applies to this method as well.
            </summary>
        </member>
        <member name="M:Godot.Node.RsetId(System.Int32,System.String,System.Object)">
            <summary>
            Remotely changes the property's value on a specific peer identified by [code]peer_id[/code].
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliable(System.String,System.Object)">
            <summary>
            Remotely changes the property's value on other peers (and locally) using an unreliable protocol.
            </summary>
        </member>
        <member name="M:Godot.Node.RsetUnreliableId(System.Int32,System.String,System.Object)">
            <summary>
            Remotely changes property's value on a specific peer identified by [code]peer_id[/code] using an unreliable protocol.
            </summary>
        </member>
        <member name="T:Godot.Node2D">
            <summary>
            A 2D game object, with a position, rotation and scale. All 2D physics nodes and sprites inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control on the node's render order.
            </summary>
        </member>
        <member name="P:Godot.Node2D.Position">
            <summary>
            Position, relative to the node's parent.
            </summary>
        </member>
        <member name="P:Godot.Node2D.Rotation">
            <summary>
            Rotation in radians, relative to the node's parent.
            </summary>
        </member>
        <member name="P:Godot.Node2D.RotationDegrees">
            <summary>
            Rotation in degrees, relative to the node's parent.
            </summary>
        </member>
        <member name="P:Godot.Node2D.Scale">
            <summary>
            The node's scale. Unscaled value: [code](1, 1)[/code]
            </summary>
        </member>
        <member name="P:Godot.Node2D.Transform">
            <summary>
            Local [Transform2D].
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalPosition">
            <summary>
            Global position.
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotation">
            <summary>
            Global rotation in radians.
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalRotationDegrees">
            <summary>
            Global rotation in degrees.
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalScale">
            <summary>
            Global scale.
            </summary>
        </member>
        <member name="P:Godot.Node2D.GlobalTransform">
            <summary>
            Global [Transform2D].
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZIndex">
            <summary>
            Z-index. Controls the order in which the nodes render. A node with a higher Z-index will display in front of others.
            </summary>
        </member>
        <member name="P:Godot.Node2D.ZAsRelative">
            <summary>
            If [code]true[/code] the node's Z-index is relative to its parent's Z-index. If this node's Z-index is 2 and its parent's effective Z-index is 3, then this node's effective Z-index will be 2 + 3 = 5.
            </summary>
        </member>
        <member name="M:Godot.Node2D.Rotate(System.Single)">
            <summary>
            Applies a rotation to the node, in radians, starting from its current rotation.
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalX(System.Single,System.Boolean)">
            <summary>
            Applies a local translation on the node's X axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.
            </summary>
        </member>
        <member name="M:Godot.Node2D.MoveLocalY(System.Single,System.Boolean)">
            <summary>
            Applies a local translation on the node's Y axis based on the [method Node._process]'s [code]delta[/code]. If [code]scaled[/code] is false, normalizes the movement.
            </summary>
        </member>
        <member name="M:Godot.Node2D.Translate(Godot.Vector2)">
            <summary>
            Translates the node by the given [code]offset[/code] in local coordinates.
            </summary>
        </member>
        <member name="M:Godot.Node2D.GlobalTranslate(Godot.Vector2)">
            <summary>
            Adds the 'offset' vector to the node's global position.
            </summary>
        </member>
        <member name="M:Godot.Node2D.ApplyScale(Godot.Vector2)">
            <summary>
            Multiplies the current scale by the 'ratio' vector.
            </summary>
        </member>
        <member name="M:Godot.Node2D.LookAt(Godot.Vector2)">
            <summary>
            Rotates the node so it points towards the 'point'.
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetAngleTo(Godot.Vector2)">
            <summary>
            Returns the angle between the node and the 'point' in radians.
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToLocal(Godot.Vector2)">
            <summary>
            Converts a global point's coordinates to local coordinates.
            </summary>
        </member>
        <member name="M:Godot.Node2D.ToGlobal(Godot.Vector2)">
            <summary>
            Converts a local point's coordinates to global coordinates.
            </summary>
        </member>
        <member name="M:Godot.Node2D.GetRelativeTransformToParent(Godot.Node)">
            <summary>
            Returns the [Transform2D] relative to this node's parent.
            </summary>
        </member>
        <member name="T:Godot.Object">
            <summary>
            Base class for all non built-in types. Everything not a built-in type starts the inheritance chain from this class.
            Objects do not manage memory, if inheriting from one the object will most likely have to be deleted manually (call the [method free] function from the script or delete from C++).
            Some derivatives add memory management, such as [Reference] (which keeps a reference count and deletes itself automatically when no longer referenced) and [Node], which deletes the children tree when deleted.
            Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in [method _get_property_list] and handled in [method _get] and [method _set]. However, scripting languages and C++ have simpler means to export them.
            Objects also receive notifications ([method _notification]). Notifications are a simple way to notify the object about simple events, so they can all be handled together.
            </summary>
        </member>
        <member name="M:Godot.Object._Get(System.String)">
            <summary>
            Returns the given property. Returns [code]null[/code] if the [code]property[/code] does not exist.
            </summary>
        </member>
        <member name="M:Godot.Object._GetPropertyList">
            <summary>
            Returns the object's property list as an [Array] of dictionaries. Dictionaries must contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).
            </summary>
        </member>
        <member name="M:Godot.Object._Init">
            <summary>
            The virtual method called upon initialization.
            </summary>
        </member>
        <member name="M:Godot.Object._Notification(System.Int32)">
            <summary>
            Notify the object internally using an ID.
            </summary>
        </member>
        <member name="M:Godot.Object._Set(System.String,System.Object)">
            <summary>
            Sets a property. Returns [code]true[/code] if the [code]property[/code] exists.
            </summary>
        </member>
        <member name="M:Godot.Object.Free">
            <summary>
            Deletes the object from memory.
            </summary>
        </member>
        <member name="M:Godot.Object.GetClass">
            <summary>
            Returns the object's class as a [String].
            </summary>
        </member>
        <member name="M:Godot.Object.IsClass(System.String)">
            <summary>
            Returns [code]true[/code] if the object inherits from the given [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.Set(System.String,System.Object)">
            <summary>
            Set property into the object.
            </summary>
        </member>
        <member name="M:Godot.Object.Get(System.String)">
            <summary>
            Returns a [Variant] for a [code]property[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.SetIndexed(Godot.NodePath,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Object.GetIndexed(Godot.NodePath)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Object.GetPropertyList">
            <summary>
            Returns the list of properties as an [Array] of dictionaries. Dictionaries contain: name:String, type:int (see TYPE_* enum in [@GlobalScope]) and optionally: hint:int (see PROPERTY_HINT_* in [@GlobalScope]), hint_string:String, usage:int (see PROPERTY_USAGE_* in [@GlobalScope]).
            </summary>
        </member>
        <member name="M:Godot.Object.GetMethodList">
            <summary>
            Returns the object's methods and their signatures as an [Array].
            </summary>
        </member>
        <member name="M:Godot.Object.Notification(System.Int32,System.Boolean)">
            <summary>
            Notify the object of something.
            </summary>
        </member>
        <member name="M:Godot.Object.GetInstanceId">
            <summary>
            Returns the object's unique instance ID.
            </summary>
        </member>
        <member name="M:Godot.Object.SetScript(Godot.Reference)">
            <summary>
            Set a script into the object, scripts extend the object functionality.
            </summary>
        </member>
        <member name="M:Godot.Object.GetScript">
            <summary>
            Returns the object's [Script] or [code]null[/code] if one doesn't exist.
            </summary>
        </member>
        <member name="M:Godot.Object.SetMeta(System.String,System.Object)">
            <summary>
            Set a metadata into the object. Metadata is serialized. Metadata can be [i]anything[/i].
            </summary>
        </member>
        <member name="M:Godot.Object.GetMeta(System.String)">
            <summary>
            Returns the object's metadata for the given [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.HasMeta(System.String)">
            <summary>
            Returns [code]true[/code] if a metadata is found with the given [code]name[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.GetMetaList">
            <summary>
            Returns the object's metadata as a [PoolStringArray].
            </summary>
        </member>
        <member name="M:Godot.Object.AddUserSignal(System.String,System.Object[])">
            <summary>
            Adds a user-defined [code]signal[/code]. Arguments are optional, but can be added as an [Array] of dictionaries, each containing "name" and "type" (from [@GlobalScope] TYPE_*).
            &lt;param name="arguments"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Object.HasUserSignal(System.String)">
            <summary>
            Returns [code]true[/code] if the given user-defined [code]signal[/code] exists.
            </summary>
        </member>
        <member name="M:Godot.Object.EmitSignal(System.String,System.Object[])">
            <summary>
            Emits the given [code]signal[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.Call(System.String,System.Object[])">
            <summary>
            Calls the [code]method[/code] on the object and returns a result. Pass parameters as a comma separated list.
            </summary>
        </member>
        <member name="M:Godot.Object.CallDeferred(System.String,System.Object[])">
            <summary>
            Calls the [code]method[/code] on the object during idle time and returns a result. Pass parameters as a comma separated list.
            </summary>
        </member>
        <member name="M:Godot.Object.Callv(System.String,System.Object[])">
            <summary>
            Calls the [code]method[/code] on the object and returns a result. Pass parameters as an [Array].
            </summary>
        </member>
        <member name="M:Godot.Object.HasMethod(System.String)">
            <summary>
            Returns [code]true[/code] if the object contains the given [code]method[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalList">
            <summary>
            Returns the list of signals as an [Array] of dictionaries.
            </summary>
        </member>
        <member name="M:Godot.Object.GetSignalConnectionList(System.String)">
            <summary>
            Returns an [Array] of connections for the given [code]signal[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.GetIncomingConnections">
            <summary>
            Returns an [Array] of dictionaries with information about signals that are connected to the object.
            Inside each [Dictionary] there are 3 fields:
            - "source" is a reference to signal emitter.
            - "signal_name" is name of connected signal.
            - "method_name" is a name of method to which signal is connected.
            </summary>
        </member>
        <member name="M:Godot.Object.Connect(System.String,Godot.Object,System.String,System.Object[],System.Int32)">
            <summary>
            Connects a [code]signal[/code] to a [code]method[/code] on a [code]target[/code] object. Pass optional [code]binds[/code] to the call. Use [code]flags[/code] to set deferred or one shot connections. See [code]CONNECT_*[/code] constants. A [code]signal[/code] can only be connected once to a [code]method[/code]. It will throw an error if already connected. To avoid this, first use [method is_connected] to check for existing connections.
            &lt;param name="binds"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Object.Disconnect(System.String,Godot.Object,System.String)">
            <summary>
            Disconnects a [code]signal[/code] from a [code]method[/code] on the given [code]target[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.IsConnected(System.String,Godot.Object,System.String)">
            <summary>
            Returns [code]true[/code] if a connection exists for a given [code]signal[/code], [code]target[/code], and [code]method[/code].
            </summary>
        </member>
        <member name="M:Godot.Object.SetBlockSignals(System.Boolean)">
            <summary>
            If set to true, signal emission is blocked.
            </summary>
        </member>
        <member name="M:Godot.Object.IsBlockingSignals">
            <summary>
            Returns [code]true[/code] if signal emission blocking is enabled.
            </summary>
        </member>
        <member name="M:Godot.Object.PropertyListChangedNotify">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Object.SetMessageTranslation(System.Boolean)">
            <summary>
            Define whether the object can translate strings (with calls to [method tr]). Default is true.
            </summary>
        </member>
        <member name="M:Godot.Object.CanTranslateMessages">
            <summary>
            Returns [code]true[/code] if the object can translate strings.
            </summary>
        </member>
        <member name="M:Godot.Object.Tr(System.String)">
            <summary>
            Translate a message. Only works if message translation is enabled (which it is by default). See [method set_message_translation].
            </summary>
        </member>
        <member name="M:Godot.Object.IsQueuedForDeletion">
            <summary>
            Returns [code]true[/code] if the [code]queue_free[/code] method was called for the object.
            </summary>
        </member>
        <member name="T:Godot.OccluderPolygon2D">
            <summary>
            Editor facility that helps you draw a 2D polygon used as resource for [LightOccluder2D].
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Closed">
            <summary>
            If [code]true[/code] closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. Default value [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.CullMode">
            <summary>
            Set the direction of the occlusion culling when not [code]CULL_DISABLED[/code]. Default value [code]DISABLED[/code].
            </summary>
        </member>
        <member name="P:Godot.OccluderPolygon2D.Polygon">
            <summary>
            A [Vector2] array with the index for polygon's vertices positions.
            </summary>
        </member>
        <member name="T:Godot.OmniLight">
            <summary>
            An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light].
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniRange">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniAttenuation">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniShadowMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.OmniLight.OmniShadowDetail">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.OptionButton">
            <summary>
            OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text.
            </summary>
        </member>
        <member name="P:Godot.OptionButton.Selected">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddItem(System.String,System.Int32)">
            <summary>
            Add an item, with text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddIconItem(Godot.Texture,System.String,System.Int32)">
            <summary>
            Add an item, with a "texture" icon, text "label" and (optionally) id. If no "id" is passed, "id" becomes the item index. New items are appended at the end.
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemText(System.Int32,System.String)">
            <summary>
            Set the text of an item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            Set the icon of an item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemId(System.Int32,System.Int32)">
            <summary>
            Set the ID of an item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemText(System.Int32)">
            <summary>
            Return the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemIcon(System.Int32)">
            <summary>
            Return the icon of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemId(System.Int32)">
            <summary>
            Return the ID of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemMetadata(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.IsItemDisabled(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetItemCount">
            <summary>
            Return the amount of items in the OptionButton.
            </summary>
        </member>
        <member name="M:Godot.OptionButton.AddSeparator">
            <summary>
            Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Clear">
            <summary>
            Clear all the items in the [code]OptionButton[/code].
            </summary>
        </member>
        <member name="M:Godot.OptionButton.Select(System.Int32)">
            <summary>
            Select an item by index and make it the current item.
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedId">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetSelectedMetadata">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.RemoveItem(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OptionButton.GetPopup">
            <summary>
            Return the [PopupMenu] contained in this button.
            </summary>
        </member>
        <member name="T:Godot.OS">
            <summary>
            Operating System functions. OS Wraps the most common functionality to communicate with the host Operating System, such as: mouse grabbing, mouse cursors, clipboard, video mode, date and time, timers, environment variables, execution of binaries, command line, etc.
            </summary>
        </member>
        <member name="P:Godot.OS.Clipboard">
            <summary>
            The clipboard from the host OS. Might be unavailable on some platforms.
            </summary>
        </member>
        <member name="P:Godot.OS.CurrentScreen">
            <summary>
            The current screen index (starting from 0).
            </summary>
        </member>
        <member name="P:Godot.OS.ExitCode">
            <summary>
            The exit code passed to the OS when the main loop exits.
            </summary>
        </member>
        <member name="P:Godot.OS.VsyncEnabled">
            <summary>
            If [code]true[/code] vertical synchronization (Vsync) is enabled.
            </summary>
        </member>
        <member name="P:Godot.OS.LowProcessorUsageMode">
            <summary>
            If [code]true[/code] the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile.
            </summary>
        </member>
        <member name="P:Godot.OS.KeepScreenOn">
            <summary>
            If [code]true[/code] the engine tries to keep the screen on while the game is running. Useful on mobile.
            </summary>
        </member>
        <member name="P:Godot.OS.ScreenOrientation">
            <summary>
            The current screen orientation.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowBorderless">
            <summary>
            If [code]true[/code] removes the window frame.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowFullscreen">
            <summary>
            If [code]true[/code] the window is fullscreen.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowMaximized">
            <summary>
            If [code]true[/code] the window is maximized.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowMinimized">
            <summary>
            If [code]true[/code] the window is minimized.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowResizable">
            <summary>
            If [code]true[/code], the window is resizable by the user.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowPosition">
            <summary>
            The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right.
            </summary>
        </member>
        <member name="P:Godot.OS.WindowSize">
            <summary>
            The size of the window (without counting window manager decorations).
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenCount">
            <summary>
            Returns the number of displays attached to the host machine.
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenPosition(System.Int32)">
            <summary>
            Returns the position of the specified screen by index. If no screen index is provided, the current screen will be used.
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenSize(System.Int32)">
            <summary>
            Returns the dimensions in pixels of the specified screen.
            </summary>
        </member>
        <member name="M:Godot.OS.GetScreenDpi(System.Int32)">
            <summary>
            Returns the dots per inch density of the specified screen.
            On Android Devices, the actual screen densities are grouped into six generalized densities:
            ldpi    - 120 dpi
            mdpi    - 160 dpi
            hdpi    - 240 dpi
            xhdpi   - 320 dpi
            xxhdpi  - 480 dpi
            xxxhdpi - 640 dpi
            </summary>
        </member>
        <member name="M:Godot.OS.SetWindowAlwaysOnTop(System.Boolean)">
            <summary>
            Sets whether the window should always be on top.
            </summary>
        </member>
        <member name="M:Godot.OS.IsWindowAlwaysOnTop">
            <summary>
            Returns [code]true[/code] if the window should always be on top of other windows.
            </summary>
        </member>
        <member name="M:Godot.OS.RequestAttention">
            <summary>
            Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.
            </summary>
        </member>
        <member name="M:Godot.OS.GetRealWindowSize">
            <summary>
            Returns the window size including decorations like window borders.
            </summary>
        </member>
        <member name="M:Godot.OS.CenterWindow">
            <summary>
            Centers the window on the screen if in windowed mode.
            </summary>
        </member>
        <member name="M:Godot.OS.SetImePosition(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OS.HasTouchscreenUiHint">
            <summary>
            Returns [code]true[/code] if the device has a touchscreen or emulates one.
            </summary>
        </member>
        <member name="M:Godot.OS.SetWindowTitle(System.String)">
            <summary>
            Sets the window title to the specified string.
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessorCount">
            <summary>
            Returns the number of cores available in the host machine.
            </summary>
        </member>
        <member name="M:Godot.OS.GetExecutablePath">
            <summary>
            Returns the path to the current engine executable.
            </summary>
        </member>
        <member name="M:Godot.OS.Execute(System.String,System.String[],System.Boolean,System.Object[])">
            <summary>
            Execute the file at the given path, optionally blocking until it returns.
            Platform path resolution will take place.  The resolved file must exist and be executable.
            Returns a process id.
            For example:
            [codeblock]
            var output = []
            var pid = OS.execute('ls', [], true, output)
            [/codeblock]
            If you wish to access a shell built-in or perform a composite command, a platform specific shell can be invoked.  For example:
            [codeblock]
            var pid = OS.execute('CMD.exe', ['/C', 'cd %TEMP% &amp;&amp; dir'], true, output)
            [/codeblock]
            &lt;param name="output"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.OS.Kill(System.Int32)">
            <summary>
            Kill a process ID (this method can be used to kill processes that were not spawned by the game).
            </summary>
        </member>
        <member name="M:Godot.OS.ShellOpen(System.String)">
            <summary>
            Requests the OS to open a resource with the most appropriate program. For example.
            [code]OS.shell_open("C:\\Users\name\Downloads")[/code] on Windows opens the file explorer at the downloads folders of the user.
            [code]OS.shell_open("http://godotengine.org")[/code] opens the default web browser on the official Godot website.
            </summary>
        </member>
        <member name="M:Godot.OS.GetProcessId">
            <summary>
            Returns the game process ID
            </summary>
        </member>
        <member name="M:Godot.OS.GetEnvironment(System.String)">
            <summary>
            Returns an environment variable.
            </summary>
        </member>
        <member name="M:Godot.OS.HasEnvironment(System.String)">
            <summary>
            Returns [code]true[/code] if an environment variable exists.
            </summary>
        </member>
        <member name="M:Godot.OS.GetName">
            <summary>
            Returns the name of the host OS. Possible values are: "Android", "Haiku", "iOS", "HTML5", "OSX", "Server", "Windows", "UWP", "X11".
            </summary>
        </member>
        <member name="M:Godot.OS.GetCmdlineArgs">
            <summary>
            Returns the command line arguments passed to the engine.
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetime(System.Boolean)">
            <summary>
            Returns current datetime as a dictionary of keys: year, month, day, weekday, dst (daylight savings time), hour, minute, second.
            </summary>
        </member>
        <member name="M:Godot.OS.GetDate(System.Boolean)">
            <summary>
            Returns current date as a dictionary of keys: year, month, day, weekday, dst (daylight savings time).
            </summary>
        </member>
        <member name="M:Godot.OS.GetTime(System.Boolean)">
            <summary>
            Returns current time as a dictionary of keys: hour, minute, second.
            </summary>
        </member>
        <member name="M:Godot.OS.GetTimeZoneInfo">
            <summary>
            Returns the current time zone as a dictionary with the keys: bias and name.
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTime">
            <summary>
            Returns the current unix epoch timestamp.
            </summary>
        </member>
        <member name="M:Godot.OS.GetDatetimeFromUnixTime(System.Int32)">
            <summary>
            Get a dictionary of time values when given epoch time.
            Dictionary Time values will be a union of values from [method get_time] and [method get_date] dictionaries (with the exception of dst = day light standard time, as it cannot be determined from epoch).
            </summary>
        </member>
        <member name="M:Godot.OS.GetUnixTimeFromDatetime(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Get an epoch time value from a dictionary of time values.
            [code]datetime[/code] must be populated with the following keys: year, month, day, hour, minute, second.
            You can pass the output from [method get_datetime_from_unix_time] directly into this function. Daylight savings time (dst), if present, is ignored.
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemTimeSecs">
            <summary>
            Returns the epoch time of the operating system in seconds.
            </summary>
        </member>
        <member name="M:Godot.OS.SetIcon(Godot.Image)">
            <summary>
            Sets the game's icon.
            </summary>
        </member>
        <member name="M:Godot.OS.DelayUsec(System.Int32)">
            <summary>
            Delay execution of the current thread by given microseconds.
            </summary>
        </member>
        <member name="M:Godot.OS.DelayMsec(System.Int32)">
            <summary>
            Delay execution of the current thread by given milliseconds.
            </summary>
        </member>
        <member name="M:Godot.OS.GetTicksMsec">
            <summary>
            Returns the amount of time passed in milliseconds since the engine started.
            </summary>
        </member>
        <member name="M:Godot.OS.GetSplashTickMsec">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.OS.GetLocale">
            <summary>
            Returns the host OS locale.
            </summary>
        </member>
        <member name="M:Godot.OS.GetLatinKeyboardVariant">
            <summary>
            Returns the current latin keyboard variant as a String.
            Possible return values are: "QWERTY", "AZERTY", "QZERTY", "DVORAK", "NEO", "COLEMAK" or "ERROR".
            </summary>
        </member>
        <member name="M:Godot.OS.GetModelName">
            <summary>
            Returns the model name of the current device.
            </summary>
        </member>
        <member name="M:Godot.OS.CanDraw">
            <summary>
            Returns [code]true[/code] if the host OS allows drawing.
            </summary>
        </member>
        <member name="M:Godot.OS.IsUserfsPersistent">
            <summary>
            If [code]true[/code], the [code]user://[/code] file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable.
            </summary>
        </member>
        <member name="M:Godot.OS.IsStdoutVerbose">
            <summary>
            Returns [code]true[/code] if the engine was executed with -v (verbose stdout).
            </summary>
        </member>
        <member name="M:Godot.OS.CanUseThreads">
            <summary>
            Returns [code]true[/code] if the current host platform is using multiple threads.
            </summary>
        </member>
        <member name="M:Godot.OS.IsDebugBuild">
            <summary>
            Returns [code]true[/code] if the build is a debug build.
            Returns [code]true[/code] when running in the editor.
            Returns [code]false[/code] if the build is a release build.
            </summary>
        </member>
        <member name="M:Godot.OS.DumpMemoryToFile(System.String)">
            <summary>
            Dumps the memory allocation ringlist to a file (only works in debug).
            Entry format per line: "Address - Size - Description".
            </summary>
        </member>
        <member name="M:Godot.OS.DumpResourcesToFile(System.String)">
            <summary>
            Dumps all used resources to file (only works in debug).
            Entry format per line: "Resource Type : Resource Location".
            At the end of the file is a statistic of all used Resource Types.
            </summary>
        </member>
        <member name="M:Godot.OS.HasVirtualKeyboard">
            <summary>
            Returns [code]true[/code] if the platform has a virtual keyboard, [code]false[/code] otherwise.
            </summary>
        </member>
        <member name="M:Godot.OS.ShowVirtualKeyboard(System.String)">
            <summary>
            Shows the virtual keyboard if the platform has one. The [i]existing_text[/i] parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).
            </summary>
        </member>
        <member name="M:Godot.OS.HideVirtualKeyboard">
            <summary>
            Hides the virtual keyboard if it is shown, does nothing otherwise.
            </summary>
        </member>
        <member name="M:Godot.OS.GetVirtualKeyboardHeight">
            <summary>
            Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or it is currently hidden.
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesInUse(System.Boolean)">
            <summary>
            Shows all resources currently used by the game.
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllResources(System.String)">
            <summary>
            Shows all resources in the game. Optionally the list can be written to a file.
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryUsage">
            <summary>
            Returns the amount of static memory being used by the program in bytes.
            </summary>
        </member>
        <member name="M:Godot.OS.GetStaticMemoryPeakUsage">
            <summary>
            Returns the max amount of static memory used (only works in debug).
            </summary>
        </member>
        <member name="M:Godot.OS.GetDynamicMemoryUsage">
            <summary>
            Returns the total amount of dynamic memory used (only works in debug).
            </summary>
        </member>
        <member name="M:Godot.OS.GetUserDataDir">
            <summary>
            Returns the absolute directory path where user data is written ([code]user://[/code]).
            On Linux, this is [code]~/.local/share/godot/app_userdata/[project_name][/code], or [code]~/.local/share/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
            On macOS, this is [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], or [code]~/Library/Application Support/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
            On Windows, this is [code]%APPDATA%/Godot/app_userdata/[project_name][/code], or [code]%APPDATA%/[custom_name][/code] if [code]use_custom_user_dir[/code] is set.
            If the project name is empty, [code]user://[/code] falls back to [code]res://[/code].
            </summary>
        </member>
        <member name="M:Godot.OS.GetSystemDir(Godot.OS.SystemDir)">
            <summary>
            Returns the actual path to commonly used folders across different platforms. Available locations are specified in [OS.SystemDir].
            </summary>
        </member>
        <member name="M:Godot.OS.GetUniqueId">
            <summary>
            Returns a string that is unique to the device. Currently only works on Android and iOS. Returns empty string on other platforms.
            </summary>
        </member>
        <member name="M:Godot.OS.IsOkLeftAndCancelRight">
            <summary>
            Returns [code]true[/code] if the "Okay" button should appear on the left and "Cancel" on the right.
            </summary>
        </member>
        <member name="M:Godot.OS.PrintAllTexturesBySize">
            <summary>
            Shows the list of loaded textures sorted by size in memory.
            </summary>
        </member>
        <member name="M:Godot.OS.PrintResourcesByType(System.String[])">
            <summary>
            Shows the number of resources loaded by the game of the given types.
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoPlay(System.String,System.Single,System.String,System.String)">
            <summary>
            Plays native video from the specified path, at the given volume and with audio and subtitle tracks.
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoIsPlaying">
            <summary>
            Returns [code]true[/code] if native video is playing.
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoStop">
            <summary>
            Stops native video playback.
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoPause">
            <summary>
            Pauses native video playback.
            </summary>
        </member>
        <member name="M:Godot.OS.NativeVideoUnpause">
            <summary>
            Resumes native video playback.
            </summary>
        </member>
        <member name="M:Godot.OS.GetScancodeString(System.Int32)">
            <summary>
            Returns the given scancode as a string (e.g. Return values: "Escape", "Shift+Escape").
            </summary>
        </member>
        <member name="M:Godot.OS.IsScancodeUnicode(System.Int32)">
            <summary>
            Returns [code]true[/code] if the input code has a unicode character.
            </summary>
        </member>
        <member name="M:Godot.OS.FindScancodeFromString(System.String)">
            <summary>
            Returns the scancode of the given string (e.g. "Escape")
            </summary>
        </member>
        <member name="M:Godot.OS.SetUseFileAccessSaveAndSwap(System.Boolean)">
            <summary>
            Enables backup saves if [code]enabled[/code] is [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.OS.Alert(System.String,System.String)">
            <summary>
            Displays a modal dialog box utilizing the host OS.
            </summary>
        </member>
        <member name="M:Godot.OS.SetThreadName(System.String)">
            <summary>
            Sets the name of the current thread.
            </summary>
        </member>
        <member name="M:Godot.OS.HasFeature(System.String)">
            <summary>
            Returns [code]true[/code] if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. See feature tags documentation.
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerState">
            <summary>
            Returns the current state of the device regarding battery and power. See [code]POWERSTATE_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerSecondsLeft">
            <summary>
            Returns the time in seconds before the device runs out of battery.
            </summary>
        </member>
        <member name="M:Godot.OS.GetPowerPercentLeft">
            <summary>
            Returns the amount of battery left in the device as a percentage.
            </summary>
        </member>
        <member name="P:Godot.PackedDataContainer.__Data___">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainer.Pack(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainer.Size">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PackedDataContainerRef.Size">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.PackedScene">
            <summary>
            A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.
            Can be used to save a node to a file. When saving, the node as well as all the node it owns get saved (see [code]owner[/code] property on [Node]). Note that the node doesn't need to own itself.
            Example of saving a node:
            [codeblock]
            var scene = PackedScene.new()
            var result = scene.pack(child)
            if result == OK:
            ResourceSaver.save("res://path/name.scn", scene) // or user://...
            [/codeblock]
            </summary>
        </member>
        <member name="P:Godot.PackedScene._Bundled">
            <summary>
            A dictionary representation of the scene contents.
            Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for base scene children overrides, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Pack(Godot.Node)">
            <summary>
            Pack will ignore any sub-nodes not owned by given node. See [method Node.set_owner].
            </summary>
        </member>
        <member name="M:Godot.PackedScene.Instance(Godot.PackedScene.GenEditState)">
            <summary>
            Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers the [enum Object.NOTIFICATION_INSTANCED] notification on the root node.
            </summary>
        </member>
        <member name="M:Godot.PackedScene.CanInstance">
            <summary>
            Returns [code]true[/code] if the scene file has nodes.
            </summary>
        </member>
        <member name="M:Godot.PackedScene.GetState">
            <summary>
            Returns the [code]SceneState[/code] representing the scene file contents.
            </summary>
        </member>
        <member name="T:Godot.PacketPeer">
            <summary>
            PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.
            </summary>
        </member>
        <member name="P:Godot.PacketPeer.AllowObjectDecoding">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetVar">
            <summary>
            Get a Variant.
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutVar(System.Object)">
            <summary>
            Send a Variant as a packet.
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacket">
            <summary>
            Get a raw packet.
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.PutPacket(System.Byte[])">
            <summary>
            Send a raw packet.
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetPacketError">
            <summary>
            Return the error state of the last packet received (via [method get_packet] and [method get_var]).
            </summary>
        </member>
        <member name="M:Godot.PacketPeer.GetAvailablePacketCount">
            <summary>
            Return the number of packets currently available in the ring-buffer.
            </summary>
        </member>
        <member name="T:Godot.PacketPeerStream">
            <summary>
            PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.InputBufferMaxSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.OutputBufferMaxSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PacketPeerStream.StreamPeer">
            <summary>
            The wrapped [StreamPeer] object.
            </summary>
        </member>
        <member name="T:Godot.PacketPeerUDP">
            <summary>
            UDP packet peer. Can be used to send raw UDP packets as well as [Variant]s.
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Listen(System.Int32,System.String,System.Int32)">
            <summary>
            Make this [code]PacketPeerUDP[/code] listen on the "port" binding to "bind_address" with a buffer size "recv_buf_size".
            If "bind_address" is set as "*" (default), the peer will listen on all available addresses (both IPv4 and IPv6).
            If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the peer will listen on all available addresses matching that IP type.
            If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists).
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Close">
            <summary>
            Close the UDP socket the [code]PacketPeerUDP[/code] is currently listening on.
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.Wait">
            <summary>
            Wait for a packet to arrive on the listening port, see [method listen].
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.IsListening">
            <summary>
            Return whether this [code]PacketPeerUDP[/code] is listening.
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketIp">
            <summary>
            Return the IP of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.GetPacketPort">
            <summary>
            Return the port of the remote peer that sent the last packet(that was received with [method get_packet] or [method get_var]).
            </summary>
        </member>
        <member name="M:Godot.PacketPeerUDP.SetDestAddress(System.String,System.Int32)">
            <summary>
            Set the destination address and port for sending packets and variables, a hostname will be resolved using if valid.
            </summary>
        </member>
        <member name="T:Godot.Panel">
            <summary>
            Panel is a [Control] that displays an opaque background. It's commonly used as a parent and container for other types of [Control] nodes.
            </summary>
        </member>
        <member name="T:Godot.PanelContainer">
            <summary>
            Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline.
            </summary>
        </member>
        <member name="P:Godot.PanoramaSky.Panorama">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ParallaxBackground">
            <summary>
            A ParallaxBackground uses one or more [ParallaxLayer] child nodes to create a parallax effect. Each [ParallaxLayer] can move at a different speed using [member ParallaxLayer.motion_offset]. This creates an illusion of depth in a 2D game. If not used with a [Camera2D], you must manually calculate the [member scroll_offset].
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollOffset">
            <summary>
            The ParallaxBackground's scroll value. Calculated automatically when using a [Camera2D], but can be used to manually manage scrolling when no camera is present.
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseOffset">
            <summary>
            Base position offset of all [ParallaxLayer] children.
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollBaseScale">
            <summary>
            Base motion scale of all [ParallaxLayer] children.
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitBegin">
            <summary>
            Top left limits for scrolling to begin. If the camera is outside of this limit the background will stop scrolling. Must be lower than [member scroll_limit_end] to work.
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollLimitEnd">
            <summary>
            Right bottom limits for scrolling to end. If the camera is outside of this limit the background will stop scrolling. Must be higher than [member scroll_limit_begin] to work.
            </summary>
        </member>
        <member name="P:Godot.ParallaxBackground.ScrollIgnoreCameraZoom">
            <summary>
            If [code]true[/code] elements in [ParallaxLayer] child aren't affected by the zoom level of the camera.
            </summary>
        </member>
        <member name="T:Godot.ParallaxLayer">
            <summary>
            A ParallaxLayer must be the child of a [ParallaxBackground] node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the [member ParallaxBackground.scroll_offset] value.
            This node's children will be affected by its scroll offset.
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionScale">
            <summary>
            Multiplies the ParallaxLayer's motion. If an axis is set to [code]0[/code] it will not scroll.
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionOffset">
            <summary>
            The ParallaxLayer's offset relative to the parent ParallaxBackground's [member ParallaxBackground.scroll_offset].
            </summary>
        </member>
        <member name="P:Godot.ParallaxLayer.MotionMirroring">
            <summary>
            The ParallaxLayer's [Texture] mirroring. Useful for creating an infinite scrolling background. If an axis is set to [code]0[/code] the [Texture] will not be mirrored. Default value: [code](0, 0)[/code].
            </summary>
        </member>
        <member name="T:Godot.Particles">
            <summary>
            3D particle node used to create a variety of particle systems and effects. [code]Particles[/code] features an emitter that generates some number of particles at a given rate.
            Use the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
            </summary>
        </member>
        <member name="P:Godot.Particles.Emitting">
            <summary>
            If [code]true[/code] particles are being emitted. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.Amount">
            <summary>
            Number of particles to emit.
            </summary>
        </member>
        <member name="P:Godot.Particles.Lifetime">
            <summary>
            Amount of time each particle will exist. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.OneShot">
            <summary>
            If [code]true[/code] only [code]amount[/code] particles will be emitted. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.Preprocess">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.SpeedScale">
            <summary>
            Speed scaling ratio. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.Explosiveness">
            <summary>
            Time ratio between each emission. If [code]0[/code] particles are emitted continuously. If [code]1[/code] all particles are emitted simultaneously. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.Randomness">
            <summary>
            Emission randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.FixedFps">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.FractDelta">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.VisibilityAabb">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.LocalCoords">
            <summary>
            If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawOrder">
            <summary>
            Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles.ProcessMaterial">
            <summary>
            [Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPasses">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass1">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass3">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles.DrawPass4">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Particles.Restart">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Particles.CaptureAabb">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Particles2D">
            <summary>
            2D particle node used to create a variety of particle systems and effects. [code]Particles2D[/code] features an emitter that generates some number of particles at a given rate.
            Use the [code]process_material[/code] property to add a [ParticlesMaterial] to configure particle appearance and behavior. Alternatively, you can add a [ShaderMaterial] which will be applied to all particles.
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Emitting">
            <summary>
            If [code]true[/code] particles are being emitted. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Amount">
            <summary>
            Number of particles emitted in one emission cycle.
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Lifetime">
            <summary>
            Amount of time each particle will exist. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.OneShot">
            <summary>
            If [code]true[/code] only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Preprocess">
            <summary>
            Particle system starts as if it had already run for this many seconds.
            </summary>
        </member>
        <member name="P:Godot.Particles2D.SpeedScale">
            <summary>
            Particle system's running speed scaling ratio. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Explosiveness">
            <summary>
            How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Randomness">
            <summary>
            Emission lifetime randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.FixedFps">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.FractDelta">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.VisibilityRect">
            <summary>
            Editor visibility helper.
            </summary>
        </member>
        <member name="P:Godot.Particles2D.LocalCoords">
            <summary>
            If [code]true[/code] particles use the parent node's coordinate space. If [code]false[/code] they use global coordinates. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.DrawOrder">
            <summary>
            Particle draw order. Uses [code]DRAW_ORDER_*[/code] values. Default value: [code]DRAW_ORDER_INDEX[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.ProcessMaterial">
            <summary>
            [Material] for processing particles. Can be a [ParticlesMaterial] or a [ShaderMaterial].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.Texture">
            <summary>
            Particle texture. If [code]null[/code] particles will be squares.
            </summary>
        </member>
        <member name="P:Godot.Particles2D.NormalMap">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Particles2D.HFrames">
            <summary>
            Number of horizontal frames in [code]texture[/code].
            </summary>
        </member>
        <member name="P:Godot.Particles2D.VFrames">
            <summary>
            Number of vertical frames in [code]texture[/code].
            </summary>
        </member>
        <member name="M:Godot.Particles2D.CaptureRect">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Particles2D.Restart">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ParticlesMaterial">
            <summary>
            ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.
            Some of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailDivisor">
            <summary>
            Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s).
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailSizeModifier">
            <summary>
            Trail particles' size will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TrailColorModifier">
            <summary>
            Trail particles' color will vary along this [GradientTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionShape">
            <summary>
            Particles will be emitted inside this region. Use [code]EMISSION_SHAPE_*[/code] constants for values. Default value: [code]EMISSION_SHAPE_POINT[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionSphereRadius">
            <summary>
            The sphere's radius if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_SPHERE[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionBoxExtents">
            <summary>
            The box's extents if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_BOX[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionNormalTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionColorTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.EmissionPointCount">
            <summary>
            The number of emission points if [code]emission_shape[/code] is set to [code]EMISSION_SHAPE_POINTS[/code] or [code]EMISSION_SHAPE_DIRECTED_POINTS[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagAlignY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagRotateY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.FlagDisableZ">
            <summary>
            If [code]true[/code] particles will not move on the z axis. Default value: [code]true[/code] for [Particles2D], [code]false[/code] for [Particles].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Spread">
            <summary>
            Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Default value: [code]45[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Flatness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Gravity">
            <summary>
            Gravity applied to every particle. Default value: [code](0, 98, 0)[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocity">
            <summary>
            Initial velocity for each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.InitialVelocityRandom">
            <summary>
            Initial velocity randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocity">
            <summary>
            Initial angular velocity applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityRandom">
            <summary>
            Angular velocity randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngularVelocityCurve">
            <summary>
            Each particle's angular velocity will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocity">
            <summary>
            Orbital velocity applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityRandom">
            <summary>
            Orbital velocity randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.OrbitVelocityCurve">
            <summary>
            Each particle's orbital velocity will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccel">
            <summary>
            Linear acceleration applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelRandom">
            <summary>
            Linear acceleration randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.LinearAccelCurve">
            <summary>
            Each particle's linear acceleration will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccel">
            <summary>
            Radial acceleration applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelRandom">
            <summary>
            Radial acceleration randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.RadialAccelCurve">
            <summary>
            Each particle's radial acceleration will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccel">
            <summary>
            Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelRandom">
            <summary>
            Tangential acceleration randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.TangentialAccelCurve">
            <summary>
            Each particle's tangential acceleration will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Damping">
            <summary>
            The rate at which particles lose velocity.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingRandom">
            <summary>
            Damping randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.DampingCurve">
            <summary>
            Damping will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Angle">
            <summary>
            Initial rotation applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleRandom">
            <summary>
            Rotation randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AngleCurve">
            <summary>
            Each particle's rotation will be animated along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Scale">
            <summary>
            Initial scale applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleRandom">
            <summary>
            Scale randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ScaleCurve">
            <summary>
            Each particle's scale will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.Color">
            <summary>
            Each particle's initial color. If the [Particle2D]'s [code]texture[/code] is defined, it will be multiplied by this color.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.ColorRamp">
            <summary>
            Each particle's color will vary along this [GradientTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariation">
            <summary>
            Initial hue variation applied to each particle.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationRandom">
            <summary>
            Hue variation randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.HueVariationCurve">
            <summary>
            Each particle's hue will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeed">
            <summary>
            Particle animation speed.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedRandom">
            <summary>
            Animation speed randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimSpeedCurve">
            <summary>
            Each particle's animation speed will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffset">
            <summary>
            Particle animation offset.
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetRandom">
            <summary>
            Animation offset randomness ratio. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimOffsetCurve">
            <summary>
            Each particle's animation offset will vary along this [CurveTexture].
            </summary>
        </member>
        <member name="P:Godot.ParticlesMaterial.AnimLoop">
            <summary>
            If [code]true[/code] animation will loop. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="T:Godot.Path">
            <summary>
            This class is a container/Node-ification of a [Curve3D], so it can have [Spatial] properties and [Node] info.
            </summary>
        </member>
        <member name="P:Godot.Path.Curve">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Path2D">
            <summary>
            Can have [PathFollow2D] child-nodes moving along the [Curve2D]. See [PathFollow2D] for more information on this usage.
            </summary>
        </member>
        <member name="P:Godot.Path2D.Curve">
            <summary>
            A [Curve2D] describing the path.
            </summary>
        </member>
        <member name="T:Godot.PathFollow">
            <summary>
            This node takes its parent [Path], and returns the coordinates of a point within it, given a distance from the first vertex.
            It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.Offset">
            <summary>
            The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.UnitOffset">
            <summary>
            The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.HOffset">
            <summary>
            The node's offset along the curve.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.VOffset">
            <summary>
            The node's offset perpendicular to the curve.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.RotationMode">
            <summary>
            Allows or forbids rotation on one or more axes, depending on the constants being used.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.CubicInterp">
            <summary>
            If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.
            The points along the [Curve3D] of the [Path] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.
            There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.
            </summary>
        </member>
        <member name="P:Godot.PathFollow.Loop">
            <summary>
            If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.
            </summary>
        </member>
        <member name="T:Godot.PathFollow2D">
            <summary>
            This node takes its parent [Path2D], and returns the coordinates of a point within it, given a distance from the first vertex.
            It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be descendants of this node. Then, when setting an offset in this node, the descendant nodes will move accordingly.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Offset">
            <summary>
            The distance along the path in pixels.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.UnitOffset">
            <summary>
            The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.HOffset">
            <summary>
            The node's offset along the curve.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.VOffset">
            <summary>
            The node's offset perpendicular to the curve.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Rotate">
            <summary>
            If [code]true[/code], this node rotates to follow the path, making its descendants rotate.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.CubicInterp">
            <summary>
            If [code]true[/code] the position between two cached points is interpolated cubically, and linearly otherwise.
            The points along the [Curve2D] of the [Path2D] are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.
            There are two answers to this problem: Either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Loop">
            <summary>
            If [code]true[/code], any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths.
            </summary>
        </member>
        <member name="P:Godot.PathFollow2D.Lookahead">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.PckStart(System.String,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.AddFile(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PCKPacker.Flush(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Performance">
            <summary>
            This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the [i]Monitor[/i] tab in the editor's [i]Debugger[/i] panel. By using the [method get_monitor] method of this class, you can access this data from your code. Note that a few of these monitors are only available in debug mode and will always return 0 when used in a release build.
            Many of these monitors are not updated in real-time, so there may be a short delay between changes.
            </summary>
        </member>
        <member name="M:Godot.Performance.GetMonitor(Godot.Performance.Monitor)">
            <summary>
            Returns the value of one of the available monitors. You should provide one of this class's constants as the argument, like this:
            [codeblock]
            print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console
            [/codeblock]
            </summary>
        </member>
        <member name="T:Godot.PHashTranslation">
            <summary>
            Optimized translation. Uses real-time compressed translations, which results in very small dictionaries.
            </summary>
        </member>
        <member name="M:Godot.PHashTranslation.Generate(Godot.Translation)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Physics2DDirectBodyState">
            <summary>
            Direct access object to a physics body in the [Physics2DServer]. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Step">
            <summary>
            The timestep (delta) used for the simulation.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.InverseMass">
            <summary>
            The inverse of the mass of the body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.InverseInertia">
            <summary>
            The inverse of the inertia of the body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalAngularDamp">
            <summary>
            The rate at which the body stops rotating, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalLinearDamp">
            <summary>
            The rate at which the body stops moving, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.TotalGravity">
            <summary>
            The total gravity vector being currently applied to this body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.AngularVelocity">
            <summary>
            The angular velocity of the body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.LinearVelocity">
            <summary>
            The linear velocity of the body.
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Sleeping">
            <summary>
            [code]true[/code] if this body is currently sleeping (not active).
            </summary>
        </member>
        <member name="P:Godot.Physics2DDirectBodyState.Transform">
            <summary>
            The transformation matrix of the body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactCount">
            <summary>
            Return the amount of contacts this body has with other bodies. Note that by default this returns 0 unless bodies are configured to log contacts.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalPosition(System.Int32)">
            <summary>
            Return the local position (of this body) of the contact point.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalNormal(System.Int32)">
            <summary>
            Return the local normal (of this body) of the contact point.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactLocalShape(System.Int32)">
            <summary>
            Return the local shape index of the collision.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactCollider(System.Int32)">
            <summary>
            Return the [RID] of the collider.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderPosition(System.Int32)">
            <summary>
            Return the contact position in the collider.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderId(System.Int32)">
            <summary>
            Return the object id of the collider.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderObject(System.Int32)">
            <summary>
            Return the collider object, this depends on how it was created (will return a scene node if such was used to create it).
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderShape(System.Int32)">
            <summary>
            Return the collider shape index.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderShapeMetadata(System.Int32)">
            <summary>
            Return the metadata of the collided shape. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            Return the linear velocity vector at contact point of the collider.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.IntegrateForces">
            <summary>
            Call the built-in force integration code.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectBodyState.GetSpaceState">
            <summary>
            Return the current state of space, useful for queries.
            </summary>
        </member>
        <member name="T:Godot.Physics2DDirectSpaceState">
            <summary>
            Direct access object to a space in the [Physics2DServer]. It's used mainly to do queries against objects and areas residing in a given space.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectPoint(Godot.Vector2,System.Int32,System.Object[],System.Int32)">
            <summary>
            Checks whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:
            [code]collider[/code]: The colliding object.
            [code]collider_id[/code]: The colliding object's ID.
            [code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            Additionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.
            &lt;param name="exclude"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectRay(Godot.Vector2,Godot.Vector2,System.Object[],System.Int32)">
            <summary>
            Intersects a ray in a given space. The returned object is a dictionary with the following fields:
            [code]collider[/code]: The colliding object.
            [code]collider_id[/code]: The colliding object's ID.
            [code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            [code]normal[/code]: The object's surface normal at the intersection point.
            [code]position[/code]: The intersection point.
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            If the ray did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.
            Additionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.
            &lt;param name="exclude"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.IntersectShape(Godot.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. Note that this method does not take into account the [code]motion[/code] property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:
            [code]collider[/code]: The colliding object.
            [code]collider_id[/code]: The colliding object's ID.
            [code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            The number of intersections can be limited with the second parameter, to reduce the processing time.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.CastMotion(Godot.Physics2DShapeQueryParameters)">
            <summary>
            Checks how far the shape can travel toward a point. Note that both the shape and the motion are supplied through a [Physics2DShapeQueryParameters] object. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].
            If the shape can not move, the array will be empty ([code]dir.empty()==true[/code]).
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.CollideShape(Godot.Physics2DShapeQueryParameters,System.Int32)">
            <summary>
            Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.
            </summary>
        </member>
        <member name="M:Godot.Physics2DDirectSpaceState.GetRestInfo(Godot.Physics2DShapeQueryParameters)">
            <summary>
            Checks the intersections of a shape, given through a [Physics2DShapeQueryParameters] object, against the space. If it collides with more than one shape, the nearest one is selected. Note that this method does not take into account the [code]motion[/code] property of the object. The returned object is a dictionary containing the following fields:
            [code]collider_id[/code]: The colliding object's ID.
            [code]linear_velocity[/code]: The colliding object's velocity [Vector2]. If the object is an [Area2D], the result is [code](0, 0)[/code].
            [code]metadata[/code]: The intersecting shape's metadata. This metadata is different from [method Object.get_meta], and is set with [method Physics2DServer.shape_set_data].
            [code]normal[/code]: The object's surface normal at the intersection point.
            [code]point[/code]: The intersection point.
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            If the shape did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.
            </summary>
        </member>
        <member name="T:Godot.Physics2DServer">
            <summary>
            Physics 2D Server is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.LineShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.RayShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SegmentShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.CircleShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.RectangleShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.CapsuleShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ConvexPolygonShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ConcavePolygonShapeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeGetType(Godot.RID)">
            <summary>
            Returns the type of shape (see SHAPE_* constants).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.ShapeGetData(Godot.RID)">
            <summary>
            Returns the shape data.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceCreate">
            <summary>
            Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceIsActive(Godot.RID)">
            <summary>
            Returns whether the space is active.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceSetParam(Godot.RID,Godot.Physics2DServer.SpaceParameter,System.Single)">
            <summary>
            Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceGetParam(Godot.RID,Godot.Physics2DServer.SpaceParameter)">
            <summary>
            Returns the value of a space parameter.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SpaceGetDirectState(Godot.RID)">
            <summary>
            Returns the state of a space, a [Physics2DDirectSpaceState]. This object can be used to make collision/intersection queries.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaCreate">
            <summary>
            Creates an [Area2D].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            Assigns a space to the area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetSpace(Godot.RID)">
            <summary>
            Returns the space assigned to the area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetSpaceOverrideMode(Godot.RID,Godot.Physics2DServer.AreaSpaceOverrideMode)">
            <summary>
            Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            Returns the space override mode for the area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D})">
            <summary>
            Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            &lt;param name="transform"&gt;If the param is null, then the default value is Transform2D.Identity&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            Sets the transform matrix for an area shape.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            Disables a given shape in an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShapeCount(Godot.RID)">
            <summary>
            Returns the number of shapes assigned to an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            Returns the [RID] of the nth shape of an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            Returns the transform matrix of a shape within an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaClearShapes(Godot.RID)">
            <summary>
            Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to one or many physics layers.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            Sets which physics layers the area will monitor.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetParam(Godot.RID,Godot.Physics2DServer.AreaParameter,System.Object)">
            <summary>
            Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Sets the transform matrix for an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetParam(Godot.RID,Godot.Physics2DServer.AreaParameter)">
            <summary>
            Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetTransform(Godot.RID)">
            <summary>
            Returns the transform matrix for an area.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            Gets the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.AreaSetMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:
            1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.
            2: [RID] of the object that entered/exited the area.
            3: Instance ID of the object that entered/exited the area.
            4: The shape index of the object that entered/exited the area.
            5: The shape index of the area where the object entered/exited.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyCreate">
            <summary>
            Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            Assigns a space to the body (see [method create_space]).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetSpace(Godot.RID)">
            <summary>
            Returns the [RID] of the space assigned to a body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetMode(Godot.RID,Godot.Physics2DServer.BodyMode)">
            <summary>
            Sets the body mode, from one of the constants BODY_MODE*.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetMode(Godot.RID)">
            <summary>
            Returns the body mode.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform2D})">
            <summary>
            Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            &lt;param name="transform"&gt;If the param is null, then the default value is Transform2D.Identity&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            Sets the transform matrix for a body shape.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeMetadata(Godot.RID,System.Int32,System.Object)">
            <summary>
            Sets metadata of a shape within a body. This metadata is different from [method Object.set_meta], and can be retrieved on shape queries.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeCount(Godot.RID)">
            <summary>
            Returns the number of shapes assigned to a body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            Returns the [RID] of the nth shape of a body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            Returns the transform matrix of a body shape.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetShapeMetadata(Godot.RID,System.Int32)">
            <summary>
            Returns the metadata of a shape of a body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyClearShapes(Godot.RID)">
            <summary>
            Removes all shapes from a body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeDisabled(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            Disables shape in body if [code]disable[/code] is [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetShapeAsOneWayCollision(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            Enables one way collision on body if [code]enable[/code] is [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            Gets the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetContinuousCollisionDetectionMode(Godot.RID,Godot.Physics2DServer.CCDMode)">
            <summary>
            Sets the continuous collision detection mode from any of the CCD_MODE_* constants.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetContinuousCollisionDetectionMode(Godot.RID)">
            <summary>
            Returns the continuous collision detection mode.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            Sets the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            Returns the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            Sets the physics layer or layers a body can collide with.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetCollisionMask(Godot.RID)">
            <summary>
            Returns the physics layer or layers a body can collide with.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetParam(Godot.RID,Godot.Physics2DServer.BodyParameter,System.Single)">
            <summary>
            Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetParam(Godot.RID,Godot.Physics2DServer.BodyParameter)">
            <summary>
            Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetState(Godot.RID,Godot.Physics2DServer.BodyState,System.Object)">
            <summary>
            Sets a body state (see BODY_STATE* constants).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetState(Godot.RID,Godot.Physics2DServer.BodyState)">
            <summary>
            Returns a body state.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyApplyImpulse(Godot.RID,Godot.Vector2,Godot.Vector2)">
            <summary>
            Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddForce(Godot.RID,Godot.Vector2,Godot.Vector2)">
            <summary>
            Adds a positioned force to the applied force and torque. As with [method body_apply_impulse], both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetAxisVelocity(Godot.RID,Godot.Vector2)">
            <summary>
            Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            Adds a body to the list of bodies exempt from collisions.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            Removes a body from the list of bodies exempt from collisions.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)">
            <summary>
            Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyTestMotion(Godot.RID,Godot.Transform2D,Godot.Vector2,System.Single,Godot.Physics2DTestMotionResult)">
            <summary>
            Returns whether a body can move from a given point in a given direction. Apart from the boolean return value, a [Physics2DTestMotionResult] can be passed to return additional information in.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.BodyGetDirectState(Godot.RID)">
            <summary>
            Returns the [Physics2DDirectBodyState] of the body.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointSetParam(Godot.RID,Godot.Physics2DServer.JointParam,System.Single)">
            <summary>
            Sets a joint parameter. Parameters are explained in the JOINT_PARAM* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointGetParam(Godot.RID,Godot.Physics2DServer.JointParam)">
            <summary>
            Returns the value of a joint parameter.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.PinJointCreate(Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself.
            &lt;param name="bodyB"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.GrooveJointCreate(Godot.Vector2,Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            Creates a groove joint between two bodies. If not specified, the bodyies are assumed to be the joint itself.
            &lt;param name="bodyA"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            &lt;param name="bodyB"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedSpringJointCreate(Godot.Vector2,Godot.Vector2,Godot.RID,Godot.RID)">
            <summary>
            Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself.
            &lt;param name="bodyB"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedStringJointSetParam(Godot.RID,Godot.Physics2DServer.DampedStringParam,System.Single)">
            <summary>
            Sets a damped spring joint parameter. Parameters are explained in the DAMPED_STRING* constants.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.DampedStringJointGetParam(Godot.RID,Godot.Physics2DServer.DampedStringParam)">
            <summary>
            Returns the value of a damped spring joint parameter.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.JointGetType(Godot.RID)">
            <summary>
            Returns the type of a joint (see JOINT_* constants).
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.FreeRid(Godot.RID)">
            <summary>
            Destroys any of the objects created by Physics2DServer. If the [RID] passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.SetActive(System.Boolean)">
            <summary>
            Activates or deactivates the 2D physics engine.
            </summary>
        </member>
        <member name="M:Godot.Physics2DServer.GetProcessInfo(Godot.Physics2DServer.ProcessInfo)">
            <summary>
            Returns information about the current state of the 2D physics engine. The states are listed under the INFO_* constants.
            </summary>
        </member>
        <member name="T:Godot.Physics2DShapeQueryParameters">
            <summary>
            This class contains the shape and other parameters for intersection/collision queries.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.CollisionLayer">
            <summary>
            The physics layer the query should be made on.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Exclude">
            <summary>
            The list of objects or object [RID]s, that will be excluded from collisions.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Margin">
            <summary>
            The collision margin for the shape.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Motion">
            <summary>
            The motion of the shape being queried for.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.ShapeRid">
            <summary>
            The [RID] of the queried shape. See [method set_shape] also.
            </summary>
        </member>
        <member name="P:Godot.Physics2DShapeQueryParameters.Transform">
            <summary>
            the transform matrix of the queried shape.
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryParameters.SetShape(Godot.Resource)">
            <summary>
            Set the [Shape2D] that will be used for collision/intersection queries.
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultRid(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObjectId(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObject(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Physics2DShapeQueryResult.GetResultObjectShape(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.Motion">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.MotionRemainder">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.CollisionPoint">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.CollisionNormal">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderVelocity">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderId">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderRid">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.Collider">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Physics2DTestMotionResult.ColliderShape">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody">
            <summary>
            PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it.
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody.CollisionLayer">
            <summary>
            The physics layers this area is in.
            Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.
            A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody.CollisionMask">
            <summary>
            The physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.GetCollisionMaskBit(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.GetCollisionLayerBit(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            Adds a body to the list of bodies that this body can't collide with.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            Removes a body from the list of bodies that this body can't collide with.
            </summary>
        </member>
        <member name="T:Godot.PhysicsBody2D">
            <summary>
            PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.Layers">
            <summary>
            Both collision_layer and collision_mask. Returns collision_layer when accessed. Updates collision_layers and collision_mask when modified.
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionLayer">
            <summary>
            The physics layers this area is in.
            Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.
            A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A.
            </summary>
        </member>
        <member name="P:Godot.PhysicsBody2D.CollisionMask">
            <summary>
            The physics layers this area can scan for collisions.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the layer mask. This makes getting a body in/out of only one layer easier.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.GetCollisionLayerBit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.AddCollisionExceptionWith(Godot.Node)">
            <summary>
            Adds a body to the list of bodies that this body can't collide with.
            </summary>
        </member>
        <member name="M:Godot.PhysicsBody2D.RemoveCollisionExceptionWith(Godot.Node)">
            <summary>
            Removes a body from the list of bodies that this body can't collide with.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Step">
            <summary>
            The timestep (delta) used for the simulation.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.InverseMass">
            <summary>
            The inverse of the mass of the body.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalAngularDamp">
            <summary>
            The rate at which the body stops rotating, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalLinearDamp">
            <summary>
            The rate at which the body stops moving, if there are not any other forces moving it.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.InverseInertia">
            <summary>
            The inverse of the inertia of the body.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.TotalGravity">
            <summary>
            The total gravity vector being currently applied to this body.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.CenterOfMass">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.PrincipalInertiaAxes">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.AngularVelocity">
            <summary>
            The angular velocity of the body.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.LinearVelocity">
            <summary>
            The linear velocity of the body.
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Sleeping">
            <summary>
            [code]true[/code] if this body is currently sleeping (not active).
            </summary>
        </member>
        <member name="P:Godot.PhysicsDirectBodyState.Transform">
            <summary>
            The transformation matrix of the body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.AddForce(Godot.Vector3,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyImpulse(Godot.Vector3,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyTorqeImpulse(Godot.Vector3)">
            <summary>
            This method is deprecated. Please use [method apply_torque_impulse] instead.
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.ApplyTorqueImpulse(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalPosition(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalNormal(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactLocalShape(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactCollider(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderPosition(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderId(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderObject(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderShape(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetContactColliderVelocityAtPosition(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.IntegrateForces">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectBodyState.GetSpaceState">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.PhysicsDirectSpaceState">
            <summary>
            Direct access object to a space in the [PhysicsServer]. It's used mainly to do queries against objects and areas residing in a given space.
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.IntersectRay(Godot.Vector3,Godot.Vector3,System.Object[],System.Int32)">
            <summary>
            Intersects a ray in a given space. The returned object is a dictionary with the following fields:
            [code]collider[/code]: The colliding object.
            [code]collider_id[/code]: The colliding object's ID.
            [code]normal[/code]: The object's surface normal at the intersection point.
            [code]position[/code]: The intersection point.
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            If the ray did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.
            Additionally, the method can take an array of objects or [RID]s that are to be excluded from collisions, or a bitmask representing the physics layers to check in.
            &lt;param name="exclude"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.IntersectShape(Godot.PhysicsShapeQueryParameters,System.Int32)">
            <summary>
            Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:
            [code]collider[/code]: The colliding object.
            [code]collider_id[/code]: The colliding object's ID.
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            The number of intersections can be limited with the second parameter, to reduce the processing time.
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.CastMotion(Godot.PhysicsShapeQueryParameters,Godot.Vector3)">
            <summary>
            Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of [code]motion[/code]. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be [1, 1].
            If the shape can not move, the array will be empty ([code]dir.empty()==true[/code]).
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.CollideShape(Godot.PhysicsShapeQueryParameters,System.Int32)">
            <summary>
            Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. The resulting array contains a list of points where the shape intersects another. Like with [method intersect_shape], the number of returned results can be limited to save processing time.
            </summary>
        </member>
        <member name="M:Godot.PhysicsDirectSpaceState.GetRestInfo(Godot.PhysicsShapeQueryParameters)">
            <summary>
            Checks the intersections of a shape, given through a [PhysicsShapeQueryParameters] object, against the space. If it collides with more than a shape, the nearest one is selected. The returned object is a dictionary containing the following fields:
            [code]collider_id[/code]: The colliding object's ID.
            [code]linear_velocity[/code]: The colliding object's velocity [Vector3]. If the object is an [Area], the result is [code](0, 0, 0)[/code].
            [code]normal[/code]: The object's surface normal at the intersection point.
            [code]point[/code]: The intersection point.
            [code]rid[/code]: The intersecting object's [RID].
            [code]shape[/code]: The shape index of the colliding shape.
            If the shape did not intersect anything, then an empty dictionary ([code]dir.empty()==true[/code]) is returned instead.
            </summary>
        </member>
        <member name="T:Godot.PhysicsServer">
            <summary>
            Everything related to physics in 3D.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeCreate(Godot.PhysicsServer.ShapeType)">
            <summary>
            Creates a shape of type SHAPE_*. Does not assign it to a body or an area. To do so, you must use [method area_set_shape] or [method body_set_shape].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeSetData(Godot.RID,System.Object)">
            <summary>
            Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created [method shape_get_type].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeGetType(Godot.RID)">
            <summary>
            Returns the type of shape (see SHAPE_* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ShapeGetData(Godot.RID)">
            <summary>
            Returns the shape data.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceCreate">
            <summary>
            Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with [method area_set_space], or to a body with [method body_set_space].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceSetActive(Godot.RID,System.Boolean)">
            <summary>
            Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceIsActive(Godot.RID)">
            <summary>
            Returns whether the space is active.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceSetParam(Godot.RID,Godot.PhysicsServer.SpaceParameter,System.Single)">
            <summary>
            Sets the value for a space parameter. A list of available parameters is on the SPACE_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceGetParam(Godot.RID,Godot.PhysicsServer.SpaceParameter)">
            <summary>
            Returns the value of a space parameter.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SpaceGetDirectState(Godot.RID)">
            <summary>
            Returns the state of a space, a [PhysicsDirectSpaceState]. This object can be used to make collision/intersection queries.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaCreate">
            <summary>
            Creates an [Area].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetSpace(Godot.RID,Godot.RID)">
            <summary>
            Assigns a space to the area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetSpace(Godot.RID)">
            <summary>
            Returns the space assigned to the area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetSpaceOverrideMode(Godot.RID,Godot.PhysicsServer.AreaSpaceOverrideMode)">
            <summary>
            Sets the space override mode for the area. The modes are described in the constants AREA_SPACE_OVERRIDE_*.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetSpaceOverrideMode(Godot.RID)">
            <summary>
            Returns the space override mode for the area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform})">
            <summary>
            Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            &lt;param name="transform"&gt;If the param is null, then the default value is new Transform()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Substitutes a given area shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            Sets the transform matrix for an area shape.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShapeCount(Godot.RID)">
            <summary>
            Returns the number of shapes assigned to an area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShape(Godot.RID,System.Int32)">
            <summary>
            Returns the [RID] of the nth shape of an area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            Returns the transform matrix of a shape within an area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaRemoveShape(Godot.RID,System.Int32)">
            <summary>
            Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaClearShapes(Godot.RID)">
            <summary>
            Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to one or many physics layers.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            Sets which physics layers the area will monitor.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetParam(Godot.RID,Godot.PhysicsServer.AreaParameter,System.Object)">
            <summary>
            Sets the value for an area parameter. A list of available parameters is on the AREA_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            Sets the transform matrix for an area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetParam(Godot.RID,Godot.PhysicsServer.AreaParameter)">
            <summary>
            Returns an area parameter value. A list of available parameters is on the AREA_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetTransform(Godot.RID)">
            <summary>
            Returns the transform matrix for an area.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaGetObjectInstanceId(Godot.RID)">
            <summary>
            Gets the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetMonitorCallback(Godot.RID,Godot.Object,System.String)">
            <summary>
            Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:
            1: AREA_BODY_ADDED or AREA_BODY_REMOVED, depending on whether the object entered or exited the area.
            2: [RID] of the object that entered/exited the area.
            3: Instance ID of the object that entered/exited the area.
            4: The shape index of the object that entered/exited the area.
            5: The shape index of the area where the object entered/exited.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaSetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            Sets object pickable with rays.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.AreaIsRayPickable(Godot.RID)">
            <summary>
            If [code]true[/code] area collides with rays.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyCreate(Godot.PhysicsServer.BodyMode,System.Boolean)">
            <summary>
            Creates a physics body. The first parameter can be any value from constants BODY_MODE*, for the type of body created. Additionally, the body can be created in sleeping state to save processing time.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetSpace(Godot.RID,Godot.RID)">
            <summary>
            Assigns a space to the body (see [method create_space]).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetSpace(Godot.RID)">
            <summary>
            Returns the [RID] of the space assigned to a body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetMode(Godot.RID,Godot.PhysicsServer.BodyMode)">
            <summary>
            Sets the body mode, from one of the constants BODY_MODE*.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetMode(Godot.RID)">
            <summary>
            Returns the body mode.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetCollisionLayer(Godot.RID,System.Int32)">
            <summary>
            Sets the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetCollisionLayer(Godot.RID)">
            <summary>
            Returns the physics layer or layers a body belongs to.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetCollisionMask(Godot.RID,System.Int32)">
            <summary>
            Sets the physics layer or layers a body can collide with.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetCollisionMask(Godot.RID)">
            <summary>
            Returns the physics layer or layers a body can collide with.
            -
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddShape(Godot.RID,Godot.RID,System.Nullable{Godot.Transform})">
            <summary>
            Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
            &lt;param name="transform"&gt;If the param is null, then the default value is new Transform()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetShape(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Substitutes a given body shape by another. The old shape is selected by its index, the new one by its [RID].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetShapeTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            Sets the transform matrix for a body shape.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShapeCount(Godot.RID)">
            <summary>
            Returns the number of shapes assigned to a body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShape(Godot.RID,System.Int32)">
            <summary>
            Returns the [RID] of the nth shape of a body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetShapeTransform(Godot.RID,System.Int32)">
            <summary>
            Returns the transform matrix of a body shape.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyRemoveShape(Godot.RID,System.Int32)">
            <summary>
            Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyClearShapes(Godot.RID)">
            <summary>
            Removes all shapes from a body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            Assigns the area to a descendant of [Object], so it can exist in the node tree.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetObjectInstanceId(Godot.RID)">
            <summary>
            Gets the instance ID of the object the area is assigned to.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetEnableContinuousCollisionDetection(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the continuous collision detection mode is enabled.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsContinuousCollisionDetectionEnabled(Godot.RID)">
            <summary>
            If [code]true[/code] the continuous collision detection mode is enabled.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetParam(Godot.RID,Godot.PhysicsServer.BodyParameter,System.Single)">
            <summary>
            Sets a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetParam(Godot.RID,Godot.PhysicsServer.BodyParameter)">
            <summary>
            Returns the value of a body parameter. A list of available parameters is on the BODY_PARAM_* constants.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetKinematicSafeMargin(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetKinematicSafeMargin(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetState(Godot.RID,Godot.PhysicsServer.BodyState,System.Object)">
            <summary>
            Sets a body state (see BODY_STATE* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetState(Godot.RID,Godot.PhysicsServer.BodyState)">
            <summary>
            Returns a body state.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyApplyImpulse(Godot.RID,Godot.Vector3,Godot.Vector3)">
            <summary>
            Gives the body a push at a [code]position[/code] in the direction of the [code]impulse[/code].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyApplyTorqueImpulse(Godot.RID,Godot.Vector3)">
            <summary>
            Gives the body a push to rotate it.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetAxisVelocity(Godot.RID,Godot.Vector3)">
            <summary>
            Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetAxisLock(Godot.RID,Godot.PhysicsServer.BodyAxis,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsAxisLocked(Godot.RID,Godot.PhysicsServer.BodyAxis)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyAddCollisionException(Godot.RID,Godot.RID)">
            <summary>
            Adds a body to the list of bodies exempt from collisions.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyRemoveCollisionException(Godot.RID,Godot.RID)">
            <summary>
            Removes a body from the list of bodies exempt from collisions.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetMaxContactsReported(Godot.RID,System.Int32)">
            <summary>
            Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetMaxContactsReported(Godot.RID)">
            <summary>
            Returns the maximum contacts that can be reported. See [method body_set_max_contacts_reported].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetOmitForceIntegration(Godot.RID,System.Boolean)">
            <summary>
            Sets whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsOmittingForceIntegration(Godot.RID)">
            <summary>
            Returns whether a body uses a callback function to calculate its own physics (see [method body_set_force_integration_callback]).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetForceIntegrationCallback(Godot.RID,Godot.Object,System.String,System.Object)">
            <summary>
            Sets the function used to calculate physics for an object, if that object allows it (see [method body_set_omit_force integration]).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodySetRayPickable(Godot.RID,System.Boolean)">
            <summary>
            Sets the body pickable with rays if [code]enabled[/code] is set.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyIsRayPickable(Godot.RID)">
            <summary>
            If [code]true[/code] the body can be detected by rays
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.BodyGetDirectState(Godot.RID)">
            <summary>
            Returns the [PhysicsDirectBodyState] of the body.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreatePin(Godot.RID,Godot.Vector3,Godot.RID,Godot.Vector3)">
            <summary>
            Creates a [PinJoint].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetParam(Godot.RID,Godot.PhysicsServer.PinJointParam,System.Single)">
            <summary>
            Sets a pin_joint parameter (see PIN_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetParam(Godot.RID,Godot.PhysicsServer.PinJointParam)">
            <summary>
            Gets a pin_joint parameter (see PIN_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetLocalA(Godot.RID,Godot.Vector3)">
            <summary>
            Sets position of the joint in the local space of body a of the joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetLocalA(Godot.RID)">
            <summary>
            Returns position of the joint in the local space of body a of the joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointSetLocalB(Godot.RID,Godot.Vector3)">
            <summary>
            Sets position of the joint in the local space of body b of the joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.PinJointGetLocalB(Godot.RID)">
            <summary>
            Returns position of the joint in the local space of body b of the joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateHinge(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            Creates a [HingeJoint].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointSetParam(Godot.RID,Godot.PhysicsServer.HingeJointParam,System.Single)">
            <summary>
            Sets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointGetParam(Godot.RID,Godot.PhysicsServer.HingeJointParam)">
            <summary>
            Gets a hinge_joint parameter (see HINGE_JOINT* constants without the HINGE_JOINT_FLAG*).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointSetFlag(Godot.RID,Godot.PhysicsServer.HingeJointFlag,System.Boolean)">
            <summary>
            Sets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.HingeJointGetFlag(Godot.RID,Godot.PhysicsServer.HingeJointFlag)">
            <summary>
            Gets a hinge_joint flag (see HINGE_JOINT_FLAG* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateSlider(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            Creates a [SliderJoint].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SliderJointSetParam(Godot.RID,Godot.PhysicsServer.SliderJointParam,System.Single)">
            <summary>
            Gets a slider_joint parameter (see SLIDER_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SliderJointGetParam(Godot.RID,Godot.PhysicsServer.SliderJointParam)">
            <summary>
            Gets a slider_joint parameter (see SLIDER_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateConeTwist(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            Creates a [ConeTwistJoint].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ConeTwistJointSetParam(Godot.RID,Godot.PhysicsServer.ConeTwistJointParam,System.Single)">
            <summary>
            Sets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.ConeTwistJointGetParam(Godot.RID,Godot.PhysicsServer.ConeTwistJointParam)">
            <summary>
            Gets a cone_twist_joint parameter (see CONE_TWIST_JOINT* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointGetType(Godot.RID)">
            <summary>
            Returns the type of the Joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointSetSolverPriority(Godot.RID,System.Int32)">
            <summary>
            Sets the priority value of the Joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointGetSolverPriority(Godot.RID)">
            <summary>
            Gets the priority value of the Joint.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.JointCreateGeneric6dof(Godot.RID,Godot.Transform,Godot.RID,Godot.Transform)">
            <summary>
            Creates a [Generic6DOFJoint].
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointSetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisParam,System.Single)">
            <summary>
            Sets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointGetParam(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisParam)">
            <summary>
            Gets a generic_6_DOF_joint parameter (see G6DOF_JOINT* constants without the G6DOF_JOINT_FLAG*).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointSetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisFlag,System.Boolean)">
            <summary>
            Sets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.Generic6dofJointGetFlag(Godot.RID,Godot.Vector3.Axis,Godot.PhysicsServer.G6DOFJointAxisFlag)">
            <summary>
            Gets a generic_6_DOF_joint flag (see G6DOF_JOINT_FLAG* constants).
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.FreeRid(Godot.RID)">
            <summary>
            Destroys any of the objects created by PhysicsServer. If the [RID] passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.SetActive(System.Boolean)">
            <summary>
            Activates or deactivates the 3D physics engine.
            </summary>
        </member>
        <member name="M:Godot.PhysicsServer.GetProcessInfo(Godot.PhysicsServer.ProcessInfo)">
            <summary>
            Returns an Info defined by the [ProcessInfo] input given.
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.CollisionMask">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Exclude">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Margin">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.ShapeRid">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PhysicsShapeQueryParameters.Transform">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryParameters.SetShape(Godot.Resource)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultRid(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObjectId(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObject(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PhysicsShapeQueryResult.GetResultObjectShape(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.PinJoint">
            <summary>
            Pin Joint for 3D Rigid Bodies. It pins 2 bodies (rigid or static) together.
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__bias">
            <summary>
            The force with which the pinned objects stay in positional relation to each other.
            The higher, the stronger.
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__damping">
            <summary>
            The force with which the pinned objects stay in velocity relation to each other.
            The higher, the stronger.
            </summary>
        </member>
        <member name="P:Godot.PinJoint.Params__impulseClamp">
            <summary>
            If above 0, this value is the maximum value for an impulse that this Joint produces.
            </summary>
        </member>
        <member name="T:Godot.PinJoint2D">
            <summary>
            Pin Joint for 2D Rigid Bodies. It pins two bodies (rigid or static) together.
            </summary>
        </member>
        <member name="P:Godot.PinJoint2D.Softness">
            <summary>
            The higher this value, the more the bond to the pinned partner can flex.
            </summary>
        </member>
        <member name="T:Godot.PlaneMesh">
            <summary>
            Class representing a planar [PrimitiveMesh]. This flat mesh does not have a thickness.
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.Size">
            <summary>
            Size of the generated plane. Defaults to (2.0, 2.0).
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideWidth">
            <summary>
            Number of subdivision along the x-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.PlaneMesh.SubdivideDepth">
            <summary>
            Number of subdivision along the z-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.PlaneShape.Plane">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Polygon2D">
            <summary>
            A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Polygon">
            <summary>
            The polygon's list of vertices. The final point will be connected to the first.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Uv">
            <summary>
            Texture coordinates for each vertex of the polygon. There should be one [code]uv[/code] per polygon vertex. If there are fewer, undefined vertices will use [code](0, 0)[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Color">
            <summary>
            The polygon's fill color. If [code]texture[/code] is defined, it will be multiplied by this color. It will also be the default color for vertices not set in [code]vertex_colors[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.VertexColors">
            <summary>
            Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use [code]color[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Offset">
            <summary>
            The offset applied to each vertex.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Antialiased">
            <summary>
            If [code]true[/code] polygon edges will be anti-aliased. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.Texture">
            <summary>
            The polygon's fill texture. Use [code]uv[/code] to set texture coordinates.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureOffset">
            <summary>
            Amount to offset the polygon's [code]texture[/code]. If [code](0, 0)[/code] the texture's origin (its top-left corner) will be placed at the polygon's [code]position[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureScale">
            <summary>
            Amount to multiply the [code]uv[/code] coordinates when using a [code]texture[/code]. Larger values make the texture smaller, and vice versa.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotationDegrees">
            <summary>
            The texture's rotation in degrees.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.TextureRotation">
            <summary>
            The texture's rotation in radians.
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertEnable">
            <summary>
            If [code]true[/code] polygon will be inverted, containing the area outside the defined points and extending to the [code]invert_border[/code]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Polygon2D.InvertBorder">
            <summary>
            Added padding applied to the bounding box when using [code]invert[/code]. Setting this value too small may result in a "Bad Polygon" error. Default value: [code]100[/code].
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.Setup(Godot.Vector2[],System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.FindPath(Godot.Vector2,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetIntersections(Godot.Vector2,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetClosestPoint(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.IsPointInside(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.SetPointPenalty(System.Int32,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetPointPenalty(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PolygonPathFinder.GetBounds">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Popup">
            <summary>
            Popup is a base [Control] used to show dialogs and popups. It's a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.
            </summary>
        </member>
        <member name="P:Godot.Popup.PopupExclusive">
            <summary>
            If [code]true[/code] the popup will not be hidden when a click event occurs outside of it, or when it receives the [code]ui_cancel[/code] action event.
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCentered(System.Nullable{Godot.Vector2})">
            <summary>
            Popup (show the control in modal form) in the center of the screen, at the current size, or at a size determined by "size".
            &lt;param name="size"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCenteredRatio(System.Single)">
            <summary>
            Popup (show the control in modal form) in the center of the screen, scaled at a ratio of size of the screen.
            </summary>
        </member>
        <member name="M:Godot.Popup.PopupCenteredMinsize(System.Nullable{Godot.Vector2})">
            <summary>
            Popup (show the control in modal form) in the center of the screen, ensuring the size is never smaller than [code]minsize[/code].
            &lt;param name="minsize"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Popup.Popup_(System.Nullable{Godot.Rect2})">
            <summary>
            Popup (show the control in modal form).
            &lt;param name="bounds"&gt;If the param is null, then the default value is new Rect2(0, 0, 0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="T:Godot.PopupDialog">
            <summary>
            PopupDialog is a base class for popup dialogs, along with [WindowDialog].
            </summary>
        </member>
        <member name="T:Godot.PopupMenu">
            <summary>
            PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnItemSelection">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnCheckableItemSelection">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.PopupMenu.HideOnStateItemSelection">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconItem(Godot.Texture,System.String,System.Int32,System.Int32)">
            <summary>
            Add a new item with text "label" and icon "texture". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddItem(System.String,System.Int32,System.Int32)">
            <summary>
            Add a new item with text "label". An id can optionally be provided, as well as an accelerator keybinding. If no id is provided, one will be created from the index.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckItem(Godot.Texture,System.String,System.Int32,System.Int32)">
            <summary>
            Add a new checkable item with text "label" and icon "texture". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be
            created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckItem(System.String,System.Int32,System.Int32)">
            <summary>
            Add a new checkable item with text "label". An id can optionally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckItem(System.String,System.Int32,System.Int32)">
            <summary>
            The same as [method add_check_item] but the inserted item will look as a radio button. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSubmenuItem(System.String,System.String,System.Int32)">
            <summary>
            Adds an item with a submenu. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. An id can optionally be provided, but if is isn't provided, one will be created from the index.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconShortcut(Godot.Texture,Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddIconCheckShortcut(Godot.Texture,Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddCheckShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddRadioCheckShortcut(Godot.ShortCut,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemText(System.Int32,System.String)">
            <summary>
            Set the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemIcon(System.Int32,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemChecked(System.Int32,System.Boolean)">
            <summary>
            Set the checkstate status of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemId(System.Int32,System.Int32)">
            <summary>
            Set the id of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAccelerator(System.Int32,System.Int32)">
            <summary>
            Set the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMetadata(System.Int32,System.Object)">
            <summary>
            Sets the metadata of an item, which might be of any type. You can later get it with [method get_item_metadata], which provides a simple way of assigning context data to items.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemDisabled(System.Int32,System.Boolean)">
            <summary>
            Sets whether the item at index "idx" is disabled or not. When it is disabled it can't be selected, or its action invoked.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemSubmenu(System.Int32,System.String)">
            <summary>
            Sets the submenu of the item at index "idx". The submenu is the name of a child PopupMenu node that would be shown when the item is clicked.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsSeparator(System.Int32,System.Boolean)">
            <summary>
            Mark the item at index "idx" as a separator, which means that it would be displayed as a mere line.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsCheckable(System.Int32,System.Boolean)">
            <summary>
            Set whether the item at index "idx" has a checkbox. Note that checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemAsRadioCheckable(System.Int32,System.Boolean)">
            <summary>
            The same as [method set_item_as_checkable] but placing a radio button in case of enabling. If used for disabling, it's the same.
            Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemTooltip(System.Int32,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemShortcut(System.Int32,Godot.ShortCut,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.SetItemMultistate(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemChecked(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.ToggleItemMultistate(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemText(System.Int32)">
            <summary>
            Return the text of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIcon(System.Int32)">
            <summary>
            Return the icon of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemChecked(System.Int32)">
            <summary>
            Return whether the item at index "idx" is checked.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemId(System.Int32)">
            <summary>
            Return the id of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemIndex(System.Int32)">
            <summary>
            Find and return the index of the item containing a given id.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemAccelerator(System.Int32)">
            <summary>
            Return the accelerator of the item at index "idx". Accelerators are special combinations of keys that activate the item, no matter which control is focused.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemMetadata(System.Int32)">
            <summary>
            Return the metadata of an item, which might be of any type. You can set it with [method set_item_metadata], which provides a simple way of assigning context data to items.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemDisabled(System.Int32)">
            <summary>
            Return whether the item at index "idx" is disabled. When it is disabled it can't be selected, or its action invoked.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemSubmenu(System.Int32)">
            <summary>
            Return the submenu name of the item at index "idx".
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemSeparator(System.Int32)">
            <summary>
            Return whether the item is a separator. If it is, it would be displayed as a line.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemCheckable(System.Int32)">
            <summary>
            Return whether the item at index "idx" is checkable in some way, i.e., whether has a checkbox or radio button. Note that checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.IsItemRadioCheckable(System.Int32)">
            <summary>
            Return whether the item at index "idx" has radio-button-style checkability. Remember this is just cosmetic and you have to add the logic for checking/unchecking items in radio groups.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemTooltip(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemShortcut(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.GetItemCount">
            <summary>
            Return the amount of items.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.RemoveItem(System.Int32)">
            <summary>
            Removes the item at index "idx" from the menu. Note that the indexes of items after the removed item are going to be shifted by one.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.AddSeparator">
            <summary>
            Add a separator between items. Separators also occupy an index.
            </summary>
        </member>
        <member name="M:Godot.PopupMenu.Clear">
            <summary>
            Clear the popup menu, in effect removing all items.
            </summary>
        </member>
        <member name="T:Godot.PopupPanel">
            <summary>
            Class for displaying popups with a panel background. In some cases it might be simpler to use than [Popup], since it provides a configurable background. If you are making windows, better check [WindowDialog].
            </summary>
        </member>
        <member name="T:Godot.Position2D">
            <summary>
            Generic 2D Position hint for editing. It's just like a plain [Node2D] but displays as a cross in the 2D-Editor at all times.
            </summary>
        </member>
        <member name="T:Godot.Position3D">
            <summary>
            Generic 3D Position hint for editing. It's just like a plain [Spatial] but displays as a cross in the 3D-Editor at all times.
            </summary>
        </member>
        <member name="T:Godot.PrimitiveMesh">
            <summary>
            Base class for all primitive meshes. Handles applying a [Material] to a primitive mesh.
            </summary>
        </member>
        <member name="P:Godot.PrimitiveMesh.Material">
            <summary>
            The current [Material] of the primitive mesh.
            </summary>
        </member>
        <member name="M:Godot.PrimitiveMesh.GetMeshArrays">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.PrismMesh">
            <summary>
            Class representing a prism-shaped [PrimitiveMesh].
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.LeftToRight">
            <summary>
            Displacement of of the upper edge along the x-axis. 0.0 positions edge straight above the bottome left edge. Defaults to 0.5 (positioned on the midpoint).
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.Size">
            <summary>
            Size of the prism. Defaults to (2.0, 2.0, 2.0).
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideWidth">
            <summary>
            Number of added edge loops along the x-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideHeight">
            <summary>
            Number of added edge loops along the y-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.PrismMesh.SubdivideDepth">
            <summary>
            Number of added edge loops along the z-axis. Defaults to 0.
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyTopColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyHorizonColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyCurve">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SkyEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundBottomColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundHorizonColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundCurve">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.GroundEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunLatitude">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunLongitude">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunAngleMin">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunAngleMax">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunCurve">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.SunEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProceduralSky.TextureSize">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ProgressBar">
            <summary>
            General purpose progress bar. Shows fill percentage from right to left.
            </summary>
        </member>
        <member name="P:Godot.ProgressBar.PercentVisible">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ProjectSettings">
            <summary>
            Contains global variables accessible from everywhere. Use "ProjectSettings.get_setting(variable)", "ProjectSettings.set_setting(variable,value)" or "ProjectSettings.has_setting(variable)" to access them. Variables stored in project.godot are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.HasSetting(System.String)">
            <summary>
            Return true if a configuration value is present.
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetSetting(System.String,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetSetting(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetOrder(System.String,System.Int32)">
            <summary>
            Set the order of a configuration value (influences when saved to the config file).
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GetOrder(System.String)">
            <summary>
            Return the order of a configuration value (influences when saved to the config file).
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SetInitialValue(System.String,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.AddPropertyInfo(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Add a custom property info to a property. The dictionary must contain: name:[String](the name of the property) and type:[int](see TYPE_* in [@GlobalScope]), and optionally hint:[int](see PROPERTY_HINT_* in [@GlobalScope]), hint_string:[String].
            Example:
            [codeblock]
            ProjectSettings.set("category/property_name", 0)
            var property_info = {
            "name": "category/property_name",
            "type": TYPE_INT,
            "hint": PROPERTY_HINT_ENUM,
            "hint_string": "one,two,three"
            }
            ProjectSettings.add_property_info(property_info)
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Clear(System.String)">
            <summary>
            Clear the whole configuration (not recommended, may break things).
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LocalizePath(System.String)">
            <summary>
            Convert a path to a localized path (res:// path).
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.GlobalizePath(System.String)">
            <summary>
            Convert a localized path (res://) to a full native OS path.
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.Save">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.LoadResourcePack(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyCanRevert(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.PropertyGetRevert(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProjectSettings.SaveCustom(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ProximityGroup">
            <summary>
            General purpose proximity-detection node.
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.GroupName">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.DispatchMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProximityGroup.GridRadius">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ProximityGroup.Broadcast(System.String,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ProxyTexture.Base">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.QuadMesh">
            <summary>
            Class representing a square mesh with size (2,2,0). Consider using a [PlaneMesh] if you require a differently sized plane.
            </summary>
        </member>
        <member name="P:Godot.QuadMesh.Size">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Range">
            <summary>
            Range is a base class for [Control] nodes that change a floating point [i]value[/i] between a [i]minimum[/i] and a [i]maximum[/i], using [i]step[/i] and [i]page[/i], for example a [ScrollBar].
            </summary>
        </member>
        <member name="P:Godot.Range.MinValue">
            <summary>
            Minimum value. Range is clamped if [code]value[/code] is less than [code]min_value[/code]. Default value: 0.
            </summary>
        </member>
        <member name="P:Godot.Range.MaxValue">
            <summary>
            Maximum value. Range is clamped if [code]value[/code] is greater than [code]max_value[/code]. Default value: 100.
            </summary>
        </member>
        <member name="P:Godot.Range.Step">
            <summary>
            If greater than 0, [code]value[/code] will always be rounded to a multiple of [code]step[/code]. If [code]rounded[/code] is also [code]true[/code], [code]value[/code] will first be rounded to a multiple of [code]step[/code] then rounded to the nearest integer.
            </summary>
        </member>
        <member name="P:Godot.Range.Page">
            <summary>
            Page size. Used mainly for [ScrollBar]. ScrollBar's length is its size multiplied by [code]page[/code] over the difference between [code]min_value[/code] and [code]max_value[/code].
            </summary>
        </member>
        <member name="P:Godot.Range.Value">
            <summary>
            Range's current value.
            </summary>
        </member>
        <member name="P:Godot.Range.Ratio">
            <summary>
            The value mapped between 0 and 1.
            </summary>
        </member>
        <member name="P:Godot.Range.ExpEdit">
            <summary>
            If [code]true[/code] and [code]min_value[/code] is greater than 0, [code]value[/code] will be represented exponentially rather than linearly.
            </summary>
        </member>
        <member name="P:Godot.Range.Rounded">
            <summary>
            If [code]true[/code], [code]value[/code] will always be rounded to the nearest integer.
            </summary>
        </member>
        <member name="M:Godot.Range.Share(Godot.Node)">
            <summary>
            Binds two Ranges together along with any Ranges previously grouped with either of them. When any of Range's member variables change, it will share the new value with all other Ranges in its group.
            </summary>
        </member>
        <member name="M:Godot.Range.Unshare">
            <summary>
            Stop Range from sharing its member variables with any other Range.
            </summary>
        </member>
        <member name="T:Godot.RayCast">
            <summary>
            A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 3D space in order to find the closest object along the path of the ray.
            RayCast can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.
            Only enabled raycasts will be able to query the space and report collisions.
            RayCast calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.
            </summary>
        </member>
        <member name="P:Godot.RayCast.Enabled">
            <summary>
            If [code]true[/code] collisions will be reported. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast.ExcludeParent">
            <summary>
            If [code]true[/code] collisions will be ignored for this RayCast's immediate parent. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast.CastTo">
            <summary>
            The ray's destination point, relative to the RayCast's [code]position[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast.CollisionMask">
            <summary>
            The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.
            </summary>
        </member>
        <member name="M:Godot.RayCast.IsColliding">
            <summary>
            Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).
            </summary>
        </member>
        <member name="M:Godot.RayCast.ForceRaycastUpdate">
            <summary>
            Updates the collision information for the ray.
            Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollider">
            <summary>
            Return the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            Example:
            [codeblock]
            if RayCast.is_colliding():
            var collider = RayCast.get_collider()
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetColliderShape">
            <summary>
            Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            Example:
            [codeblock]
            if RayCast.is_colliding():
            var shape = RayCast.get_collider_shape()
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionPoint">
            <summary>
            Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionNormal">
            <summary>
            Returns the normal of the intersecting object's shape at the collision point.
            </summary>
        </member>
        <member name="M:Godot.RayCast.AddExceptionRid(Godot.RID)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified [RID].
            </summary>
        </member>
        <member name="M:Godot.RayCast.AddException(Godot.Object)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified node.
            </summary>
        </member>
        <member name="M:Godot.RayCast.RemoveExceptionRid(Godot.RID)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified [RID].
            </summary>
        </member>
        <member name="M:Godot.RayCast.RemoveException(Godot.Object)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified node.
            </summary>
        </member>
        <member name="M:Godot.RayCast.ClearExceptions">
            <summary>
            Removes all collision exceptions for this ray.
            </summary>
        </member>
        <member name="M:Godot.RayCast.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Sets the bit index passed to the [code]value[/code] passed. Note that bit indexes range from 0-19.
            </summary>
        </member>
        <member name="M:Godot.RayCast.GetCollisionMaskBit(System.Int32)">
            <summary>
            Returns [code]true[/code] if the bit index passed is turned on. Note that bit indexes range from 0-19.
            </summary>
        </member>
        <member name="T:Godot.RayCast2D">
            <summary>
            A RayCast represents a line from its origin to its destination position, [code]cast_to[/code]. It is used to query the 2D space in order to find the closest object along the path of the ray.
            RayCast2D can ignore some objects by adding them to the exception list via [code]add_exception[/code], by setting proper filtering with collision layers, or by filtering object types with type masks.
            Only enabled raycasts will be able to query the space and report collisions.
            RayCast2D calculates intersection every physics frame (see [Node]), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use [method force_raycast_update] after adjusting the raycast.
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.Enabled">
            <summary>
            If [code]true[/code], collisions will be reported. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.ExcludeParent">
            <summary>
            If [code]true[/code], the parent node will be excluded from collision detection. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CastTo">
            <summary>
            The ray's destination point, relative to the RayCast's [code]position[/code].
            </summary>
        </member>
        <member name="P:Godot.RayCast2D.CollisionMask">
            <summary>
            The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.IsColliding">
            <summary>
            Return whether the closest object the ray is pointing to is colliding with the vector (considering the vector length).
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ForceRaycastUpdate">
            <summary>
            Updates the collision information for the ray.  Use this method to update the collision information immediately instead of waiting for the next [code]_physics_process[/code] call, for example if the ray or its parent has changed state. Note: [code]enabled == true[/code] is not required for this to work.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollider">
            <summary>
            Returns the closest object the ray is pointing to. Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            Example:
            [codeblock]
            if RayCast2D.is_colliding():
            var collider = RayCast2D.get_collider()
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetColliderShape">
            <summary>
            Returns the collision shape of the closest object the ray is pointing to.  Note that this does not consider the length of the ray, so you must also use [method is_colliding] to check if the object returned is actually colliding with the ray.
            Example:
            [codeblock]
            if RayCast2D.is_colliding():
            var shape = RayCast2D.get_collider_shape()
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionPoint">
            <summary>
            Returns the collision point at which the ray intersects the closest object. Note: this point is in the [b]global[/b] coordinate system.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionNormal">
            <summary>
            Returns the normal of the intersecting object's shape at the collision point.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddExceptionRid(Godot.RID)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified [RID].
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.AddException(Godot.Object)">
            <summary>
            Adds a collision exception so the ray does not report collisions with the specified node.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveExceptionRid(Godot.RID)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified [RID].
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.RemoveException(Godot.Object)">
            <summary>
            Removes a collision exception so the ray does report collisions with the specified node.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.ClearExceptions">
            <summary>
            Removes all collision exceptions for this ray.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier.
            </summary>
        </member>
        <member name="M:Godot.RayCast2D.GetCollisionMaskBit(System.Int32)">
            <summary>
            Return an individual bit on the collision mask.
            </summary>
        </member>
        <member name="T:Godot.RayShape">
            <summary>
            Ray shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.
            </summary>
        </member>
        <member name="P:Godot.RayShape.Length">
            <summary>
            The ray's length.
            </summary>
        </member>
        <member name="T:Godot.RayShape2D">
            <summary>
            Ray shape for 2D collisions. A ray is not really a collision body, instead it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters.
            </summary>
        </member>
        <member name="P:Godot.RayShape2D.Length">
            <summary>
            The ray's length.
            </summary>
        </member>
        <member name="T:Godot.RectangleShape2D">
            <summary>
            Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects.
            </summary>
        </member>
        <member name="P:Godot.RectangleShape2D.Extents">
            <summary>
            The rectangle's half extents. The width and height of this shape is twice the half extents.
            </summary>
        </member>
        <member name="T:Godot.Reference">
            <summary>
            Base class for anything that keeps a reference count. Resource and many other helper objects inherit this. References keep an internal reference counter so they are only released when no longer in use.
            </summary>
        </member>
        <member name="M:Godot.Reference.InitRef">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Reference.Reference_">
            <summary>
            Increase the internal reference counter. Use this only if you really know what you are doing.
            </summary>
        </member>
        <member name="M:Godot.Reference.Unreference">
            <summary>
            Decrease the internal reference counter. Use this only if you really know what you are doing.
            </summary>
        </member>
        <member name="T:Godot.ReferenceRect">
            <summary>
            Reference frame for GUI. It's just like an empty control, except a red box is displayed while editing around its size at all times.
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.UpdateMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Intensity">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.MaxDistance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.Extents">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.OriginOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.BoxProjection">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.EnableShadows">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.CullMask">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorEnable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ReflectionProbe.InteriorAmbientContrib">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.RegEx">
            <summary>
            Regular Expression (or regex) is a compact programming language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of [code]ab[0-9][/code] would find any string that is [code]ab[/code] followed by any number from [code]0[/code] to [code]9[/code]. For a more in-depth look, you can easily find various tutorials and detailed explanations on the Internet.
            To begin, the RegEx object needs to be compiled with the search pattern using [method compile] before it can be used.
            [codeblock]
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            [/codeblock]
            The search pattern must be escaped first for gdscript before it is escaped for the expression. For example, [code]compile("\\d+")[/code] would be read by RegEx as [code]\d+[/code]. Similarly, [code]compile("\"(?:\\\\.|[^\"])*\"")[/code] would be read as [code]"(?:\\.|[^"])*"[/code]
            Using [method search] you can find the pattern within the given text. If a pattern is found, [RegExMatch] is returned and you can retrieve details of the results using functions such as [method RegExMatch.get_string] and [method RegExMatch.get_start].
            [codeblock]
            var regex = RegEx.new()
            regex.compile("\\w-(\\d+)")
            var result = regex.search("abc n-0123")
            if result:
            print(result.get_string()) # Would print n-0123
            [/codeblock]
            The results of capturing groups [code]()[/code] can be retrieved by passing the group number to the various functions in [RegExMatch]. Group 0 is the default and would always refer to the entire pattern. In the above example, calling [code]result.get_string(1)[/code] would give you [code]0123[/code].
            This version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.
            [codeblock]
            var regex = RegEx.new()
            regex.compile("d(?&lt;digit&gt;[0-9]+)|x(?&lt;digit&gt;[0-9a-f]+)")
            var result = regex.search("the number is x2f")
            if result:
            print(result.get_string("digit")) # Would print 2f
            [/codeblock]
            If you need to process multiple results, [method search_all] generates a list of all non-overlapping results. This can be combined with a for-loop for convenience.
            [codeblock]
            for result in regex.search_all("d01, d03, d0c, x3f and x42"):
            print(result.get_string("digit"))
            # Would print 01 03 3f 42
            # Note that d0c would not match
            [/codeblock]
            </summary>
        </member>
        <member name="M:Godot.RegEx.Clear">
            <summary>
            This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.
            </summary>
        </member>
        <member name="M:Godot.RegEx.Compile(System.String)">
            <summary>
            Compiles and assign the search pattern to use. Returns OK if the compilation is successful. If an error is encountered the details are printed to STDOUT and FAILED is returned.
            </summary>
        </member>
        <member name="M:Godot.RegEx.Search(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the text for the compiled pattern. Returns a [RegExMatch] container of the first matching result if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.
            </summary>
        </member>
        <member name="M:Godot.RegEx.SearchAll(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the text for the compiled pattern. Returns an array of [RegExMatch] containers for each non-overlapping result. If no results were found an empty array is returned instead. The region to search within can be specified without modifying where the start and end anchor would be.
            </summary>
        </member>
        <member name="M:Godot.RegEx.Sub(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as [code]\1[/code] and [code]\g&lt;name&gt;[/code] expanded and resolved. By default only the first instance is replaced but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.
            </summary>
        </member>
        <member name="M:Godot.RegEx.IsValid">
            <summary>
            Returns whether this object has a valid search pattern assigned.
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetPattern">
            <summary>
            Returns the original search pattern that was compiled.
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetGroupCount">
            <summary>
            Returns the number of capturing groups in compiled pattern.
            </summary>
        </member>
        <member name="M:Godot.RegEx.GetNames">
            <summary>
            Returns an array of names of named capturing groups in the compiled pattern. They are ordered by appearance.
            </summary>
        </member>
        <member name="T:Godot.RegExMatch">
            <summary>
            Contains the results of a single regex match returned by [method RegEx.search] and [method RegEx.search_all]. It can be used to find the position and range of the match and its capturing groups, and it can extract its sub-string for you.
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Subject">
            <summary>
            The source string used with the search pattern to find this matching result.
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Names">
            <summary>
            A dictionary of named groups and its corresponding group number. Only groups with that were matched are included. If multiple groups have the same name, that name would refer to the first matching one.
            </summary>
        </member>
        <member name="P:Godot.RegExMatch.Strings">
            <summary>
            An [Array] of the match and its capturing groups.
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetGroupCount">
            <summary>
            Returns the number of capturing groups.
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetString(System.Object)">
            <summary>
            Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
            Returns an empty string if the group did not match or doesn't exist.
            &lt;param name="name"&gt;If the param is null, then the default value is (object)0&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetStart(System.Object)">
            <summary>
            Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
            Returns -1 if the group did not match or doesn't exist.
            &lt;param name="name"&gt;If the param is null, then the default value is (object)0&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.RegExMatch.GetEnd(System.Object)">
            <summary>
            Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
            Returns -1 if the group did not match or doesn't exist.
            &lt;param name="name"&gt;If the param is null, then the default value is (object)0&lt;/param&gt;
            </summary>
        </member>
        <member name="T:Godot.RemoteTransform">
            <summary>
            RemoteTransform leads the [Transform] of another [Spatial] derived Node (called the remote node) in the scene.
            It can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.RemotePath">
            <summary>
            The [NodePath] to the remote node, relative to the RemoteTransform's position in the scene.
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UseGlobalCoordinates">
            <summary>
            If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdatePosition">
            <summary>
            If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdateRotation">
            <summary>
            If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform.UpdateScale">
            <summary>
            If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="T:Godot.RemoteTransform2D">
            <summary>
            RemoteTransform2D leads the [Transform2D] of another [CanvasItem] derived Node (called the remote node) in the scene.
            It can be set to track another Node's position, rotation and/or scale. It can update using either global or local coordinates.
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.RemotePath">
            <summary>
            The [NodePath] to the remote node, relative to the RemoteTransform2D's position in the scene.
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UseGlobalCoordinates">
            <summary>
            If [code]true[/code] global coordinates are used. If [code]false[/code] local coordinates are used. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdatePosition">
            <summary>
            If [code]true[/code] the remote node's position is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateRotation">
            <summary>
            If [code]true[/code] the remote node's rotation is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RemoteTransform2D.UpdateScale">
            <summary>
            If [code]true[/code] the remote node's scale is tracked. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="T:Godot.Resource">
            <summary>
            Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceLocalToScene">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourcePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Resource.ResourceName">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Resource._SetupLocalToScene">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Resource.TakeOverPath(System.String)">
            <summary>
            Set the path of the resource. Differs from set_path(), if another [code]Resource[/code] exists with "path" it over-takes it, instead of failing.
            </summary>
        </member>
        <member name="M:Godot.Resource.GetRid">
            <summary>
            Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.
            </summary>
        </member>
        <member name="M:Godot.Resource.GetLocalScene">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Resource.SetupLocalToScene">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Resource.Duplicate(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ResourceInteractiveLoader">
            <summary>
            Interactive Resource Loader. This object is returned by ResourceLoader when performing an interactive load. It allows to load with high granularity, so this is mainly useful for displaying load bars/percentages.
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetResource">
            <summary>
            Return the loaded resource (only if loaded). Otherwise, returns null.
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.Poll">
            <summary>
            Poll the load. If OK is returned, this means poll will have to be called again. If ERR_FILE_EOF is returned, them the load has finished and the resource can be obtained by calling [method get_resource].
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.Wait">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetStage">
            <summary>
            Return the load stage. The total amount of stages can be queried with [method get_stage_count]
            </summary>
        </member>
        <member name="M:Godot.ResourceInteractiveLoader.GetStageCount">
            <summary>
            Return the total amount of stages (calls to [method poll]) needed to completely load this resource.
            </summary>
        </member>
        <member name="T:Godot.ResourceLoader">
            <summary>
            Resource Loader. This is a static object accessible as [code]ResourceLoader[/code]. GDScript has a simplified load() function, though.
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.LoadInteractive(System.String,System.String)">
            <summary>
            Load a resource interactively, the returned object allows to load with high granularity.
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Load(System.String,System.String,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetRecognizedExtensionsForType(System.String)">
            <summary>
            Return the list of recognized extensions for a resource type.
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.SetAbortOnMissingResources(System.Boolean)">
            <summary>
            Change the behavior on missing sub-resources. Default is to abort load.
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.GetDependencies(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ResourceLoader.Has(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ResourcePreloader">
            <summary>
            Resource Preloader Node. This node is used to preload sub-resources inside a scene, so when the scene is loaded all the resources are ready to use and be retrieved from here.
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.AddResource(System.String,Godot.Resource)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RemoveResource(System.String)">
            <summary>
            Remove a resource from the preloader by text id.
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.RenameResource(System.String,System.String)">
            <summary>
            Rename a resource inside the preloader, from a text-id to a new text-id.
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.HasResource(System.String)">
            <summary>
            Return true if the preloader has a given resource.
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResource(System.String)">
            <summary>
            Return the resource given a text-id.
            </summary>
        </member>
        <member name="M:Godot.ResourcePreloader.GetResourceList">
            <summary>
            Return the list of resources inside the preloader.
            </summary>
        </member>
        <member name="T:Godot.ResourceSaver">
            <summary>
            Resource Saving Interface. This interface is used for saving resources to disk.
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.Save(System.String,Godot.Resource,System.Int32)">
            <summary>
            Save a resource to disk, to a given path.
            </summary>
        </member>
        <member name="M:Godot.ResourceSaver.GetRecognizedExtensions(Godot.Resource)">
            <summary>
            Return the list of extensions available for saving a resource of a given type.
            </summary>
        </member>
        <member name="T:Godot.RichTextLabel">
            <summary>
            Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.
            Note that assignments to [member bbcode_text] clear the tag stack and reconstruct it from the property's contents. Any edits made to [member bbcode_text] will erase previous edits made from other manual sources such as [method append_bbcode] and the [code]push_*[/code] / [method pop] methods.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeEnabled">
            <summary>
            If [code]true[/code] the label uses BBCode formatting. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.BbcodeText">
            <summary>
            The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.VisibleCharacters">
            <summary>
            The restricted number of characters to display in the label.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.PercentVisible">
            <summary>
            The text's visibility, as a [float] between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.MetaUnderlined">
            <summary>
            If [code]true[/code], the label underlines meta tags such as [url]{text}[/url]. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.TabSize">
            <summary>
            The number of spaces associated with a single tab length. Does not affect "\t" in text tags, only indent tags.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.Text">
            <summary>
            The raw text of the label.
            When set, clears the tag stack and adds a raw text tag to the top of it. Does not parse bbcodes. Does not modify [member bbcode_text].
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollActive">
            <summary>
            If [code]true[/code], the scrollbar is visible. Does not block scrolling completely. See [method scroll_to_line]. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.ScrollFollowing">
            <summary>
            If [code]true[/code], the window scrolls down to display new content automatically. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.SelectionEnabled">
            <summary>
            If [code]true[/code], the label allows text selection.
            </summary>
        </member>
        <member name="P:Godot.RichTextLabel.OverrideSelectedFontColor">
            <summary>
            If [code]true[/code] the label uses the custom font color. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddText(System.String)">
            <summary>
            Adds raw non-bbcode-parsed text to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AddImage(Godot.Texture)">
            <summary>
            Adds an image's opening and closing tags to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Newline">
            <summary>
            Adds a newline tag to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.RemoveLine(System.Int32)">
            <summary>
            Removes a line of content from the label. Returns [code]true[/code] if the line exists.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushFont(Godot.Font)">
            <summary>
            Adds a [code][font][/code] tag to the tag stack. Overrides default fonts for its duration.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushColor(Godot.Color)">
            <summary>
            Adds a [code][color][/code] tag to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushAlign(Godot.RichTextLabel.Align)">
            <summary>
            Adds a [code][right][/code] tag to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushIndent(System.Int32)">
            <summary>
            Adds an [code][indent][/code] tag to the tag stack. Multiplies "level" by current tab_size to determine new margin length.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushList(Godot.RichTextLabel.ListType)">
            <summary>
            Adds a list tag to the tag stack. Similar to the bbcodes [code][ol][/code] or [code][ul][/code], but supports more list types. Not fully implemented!
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushMeta(System.Object)">
            <summary>
            Adds a meta tag to the tag stack. Similar to the bbcode [code][url=something]{text}[/url][/code], but supports non-[String] metadata types.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushUnderline">
            <summary>
            Adds a [code][u][/code] tag to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushTable(System.Int32)">
            <summary>
            Adds a [code][table=columns][/code] tag to the tag stack.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.SetTableColumnExpand(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Edits the selected columns expansion options. If [code]expand[/code] is [code]true[/code], the column expands in proportion to its expansion ratio versus the other columns' ratios.
            For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.
            Columns with a [code]false[/code] expand will not contribute to the total ratio.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.PushCell">
            <summary>
            Adds a [code][cell][/code] tag to the tag stack. Must be inside a [table] tag. See [method push_table] for details.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Pop">
            <summary>
            Terminates the current tag. Use after [code]push_*[/code] methods to close bbcodes manually. Does not need to follow [code]add_*[/code] methods.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.Clear">
            <summary>
            Clears the tag stack and sets [member bbcode_text] to an empty string.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVScroll">
            <summary>
            Returns the vertical scrollbar.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ScrollToLine(System.Int32)">
            <summary>
            Scrolls the window's top line to match [code]line[/code].
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.ParseBbcode(System.String)">
            <summary>
            The assignment version of [method append_bbcode]. Clears the tag stack and inserts the new content. Returns [code]OK[/code] if parses [code]bbcode[/code] successfully.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.AppendBbcode(System.String)">
            <summary>
            Parses [code]bbcode[/code] and adds tags to the tag stack as needed. Returns the result of the parsing, [code]OK[/code] if successful.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetTotalCharacterCount">
            <summary>
            Returns the total number of characters from text tags. Does not include bbcodes.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetLineCount">
            <summary>
            Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line.
            </summary>
        </member>
        <member name="M:Godot.RichTextLabel.GetVisibleLineCount">
            <summary>
            Returns the number of visible lines.
            </summary>
        </member>
        <member name="T:Godot.RigidBody">
            <summary>
            This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.
            A RigidBody has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.
            [b]Note:[/b] Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.
            If you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Mode">
            <summary>
            The body mode from the MODE_* enum. Modes include: MODE_STATIC, MODE_KINEMATIC, MODE_RIGID, and MODE_CHARACTER.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Mass">
            <summary>
            RigidBody's mass.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Weight">
            <summary>
            RigidBody's weight based on its mass and the global 3D gravity. Global values are set in "Project &gt; Project Settings &gt; Physics &gt; 3d".
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Friction">
            <summary>
            The body friction, from 0 (frictionless) to 1 (max friction).
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Bounce">
            <summary>
            RigidBody's bounciness.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.GravityScale">
            <summary>
            This is multiplied by the global 3D gravity setting found in "Project &gt; Project Settings &gt; Physics &gt; 3d" to produce RigidBody's gravity. E.g. a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.CustomIntegrator">
            <summary>
            If [code]true[/code] internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the [method _integrate_forces] function, if defined.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContinuousCd">
            <summary>
            If [code]true[/code] continuous collision detection is used.
            Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses less impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContactsReported">
            <summary>
            The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.ContactMonitor">
            <summary>
            If true, the RigidBody will emit signals when it collides with another RigidBody.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.Sleeping">
            <summary>
            If [code]true[/code] RigidBody is sleeping and will not calculate forces until woken up by a collision or the [code]apply_impulse[/code] method.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.CanSleep">
            <summary>
            If [code]true[/code] the RigidBody will not calculate forces and will act as a static body while there is no movement. It will wake up when forces are applied through other collisions or when the [code]apply_impulse[/code] method is used.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearX">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockLinearZ">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularX">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularY">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AxisLockAngularZ">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.RigidBody.LinearVelocity">
            <summary>
            RigidBody's linear velocity. Can be used sporadically, but [b]DON'T SET THIS IN EVERY FRAME[/b], because physics may run in another thread and runs at a different granularity. Use [method _integrate_forces] as your process loop for precise control of the body state.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.LinearDamp">
            <summary>
            RigidBody's linear damp. Default value: -1, cannot be less than -1. If this value is different from -1, any linear damp derived from the world or areas will be overridden.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AngularVelocity">
            <summary>
            RigidBody's rotational velocity.
            </summary>
        </member>
        <member name="P:Godot.RigidBody.AngularDamp">
            <summary>
            Damps RigidBody's rotational forces.
            </summary>
        </member>
        <member name="M:Godot.RigidBody._IntegrateForces(Godot.PhysicsDirectBodyState)">
            <summary>
            Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default it works in addition to the usual physics behavior, but [method set_use_custom_integrator] allows you to disable the default behavior and do fully custom force integration for a body.
            </summary>
        </member>
        <member name="M:Godot.RigidBody.SetAxisVelocity(Godot.Vector3)">
            <summary>
            Set an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:Godot.RigidBody.ApplyImpulse(Godot.Vector3,Godot.Vector3)">
            <summary>
            Apply a positioned impulse (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied once, and only once. Both the impulse and the position are in global coordinates, and the position is relative to the object's origin.
            </summary>
        </member>
        <member name="M:Godot.RigidBody.GetCollidingBodies">
            <summary>
            Return a list of the bodies colliding with this one. By default, number of max contacts reported is at 0 , see [method set_max_contacts_reported] to increase it.  Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="T:Godot.RigidBody2D">
            <summary>
            This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.
            A RigidBody2D has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.
            [b]Note:[/b] You should not change a RigidBody2D's [code]position[/code] or [code]linear_velocity[/code] every frame or even very often. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.
            If you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mode">
            <summary>
            The body's mode. See [code]MODE_*[/code] constants. Default value: [code]MODE_RIGID[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Mass">
            <summary>
            The body's mass. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Inertia">
            <summary>
            The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 (or negative) inertia to return to automatically computing it.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Weight">
            <summary>
            The body's weight based on its mass and the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d".
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Friction">
            <summary>
            The body's friction. Values range from [code]0[/code] (frictionless) to [code]1[/code] (maximum friction). Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Bounce">
            <summary>
            The body's bounciness. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.GravityScale">
            <summary>
            Multiplies the gravity applied to the body. The body's gravity is calculated from the "Default Gravity" value in "Project &gt; Project Settings &gt; Physics &gt; 2d" and/or any additional gravity vector applied by [Area2D]s. Default value: [code]1[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CustomIntegrator">
            <summary>
            If [code]true[/code] internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the [method _integrate_forces] function.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContinuousCd">
            <summary>
            Continuous collision detection mode. Default value: [code]CCD_MODE_DISABLED[/code].
            Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See [code]CCD_MODE_[/code] constants for details.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactsReported">
            <summary>
            The maximum number of contacts to report. Default value: [code]0[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.ContactMonitor">
            <summary>
            If [code]true[/code] the body will emit signals when it collides with another RigidBody2D. See also [member contacts_reported]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.Sleeping">
            <summary>
            If [code]true[/code] the body is sleeping and will not calculate forces until woken up by a collision or by using [method apply_impulse] or [method add_force].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.CanSleep">
            <summary>
            If [code]true[/code] the body will not calculate forces and will act as a static body if there is no movement. The body will wake up when other forces are applied via collisions or by using [method apply_impulse] or [method add_force]. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearVelocity">
            <summary>
            The body's linear velocity.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.LinearDamp">
            <summary>
            Damps the body's [member linear_velocity]. If [code]-1[/code] the body will use the "Default Linear Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: [code]-1[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularVelocity">
            <summary>
            The body's rotational velocity.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AngularDamp">
            <summary>
            Damps the body's [member angular_velocity]. If [code]-1[/code] the body will use the "Default Angular Damp" in "Project &gt; Project Settings &gt; Physics &gt; 2d". Default value: [code]-1[/code].
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedForce">
            <summary>
            The body's total applied force.
            </summary>
        </member>
        <member name="P:Godot.RigidBody2D.AppliedTorque">
            <summary>
            The body's total applied torque.
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D._IntegrateForces(Godot.Physics2DDirectBodyState)">
            <summary>
            Allows you to read and safely modify the simulation state for the object. Use this instead of [Node._physics_process] if you need to directly change the body's [code]position[/code] or other physics properties. By default it works in addition to the usual physics behavior, but [member custom_integrator] allows you to disable the default behavior and write custom force integration for a body.
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.SetAxisVelocity(Godot.Vector2)">
            <summary>
            Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.ApplyImpulse(Godot.Vector2,Godot.Vector2)">
            <summary>
            Applies a positioned impulse to the body (which will be affected by the body mass and shape). This is the equivalent of hitting a billiard ball with a cue: a force that is applied instantaneously. Both the impulse and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.AddForce(Godot.Vector2,Godot.Vector2)">
            <summary>
            Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.TestMotion(Godot.Vector2,System.Single,Godot.Physics2DTestMotionResult)">
            <summary>
            Returns [code]true[/code] if a collision would result from moving in the given vector. [code]margin[/code] increases the size of the shapes involved in the collision detection, and [code]result[/code] is an object of type [Physics2DTestMotionResult], which contains additional information about the collision (should there be one).
            </summary>
        </member>
        <member name="M:Godot.RigidBody2D.GetCollidingBodies">
            <summary>
            Returns a list of the bodies colliding with this one. Use [member contacts_reported] to set the maximum number reported. You must also set [member contact_monitor] to [code]true[/code]. Note that the result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.
            </summary>
        </member>
        <member name="T:Godot.SceneState">
            <summary>
            Maintains a list of resources, nodes, exported and overridden properties, and built-in scripts associated with a scene.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeCount">
            <summary>
            Returns the number of nodes in the scene.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeType(System.Int32)">
            <summary>
            Returns the type of the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeName(System.Int32)">
            <summary>
            Returns the name of the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePath(System.Int32,System.Boolean)">
            <summary>
            Returns the path to the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeOwnerPath(System.Int32)">
            <summary>
            Returns the path to the owner of the node at [code]idx[/code], relative to the root node.
            </summary>
        </member>
        <member name="M:Godot.SceneState.IsNodeInstancePlaceholder(System.Int32)">
            <summary>
            Returns [code]true[/code] if the node at [code]idx[/code] is an [InstancePlaceholder].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstancePlaceholder(System.Int32)">
            <summary>
            Returns the path to the represented scene file if the node at [code]idx[/code] is an [InstancePlaceholder].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeInstance(System.Int32)">
            <summary>
            Returns the scene for the node at [code]idx[/code] or [code]null[/code] if the node is not an instance.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeGroups(System.Int32)">
            <summary>
            Returns the list of group names associated with the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodeIndex(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyCount(System.Int32)">
            <summary>
            Returns the number of exported or overridden properties for the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyName(System.Int32,System.Int32)">
            <summary>
            Returns the name of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetNodePropertyValue(System.Int32,System.Int32)">
            <summary>
            Returns the value of the property at [code]prop_idx[/code] for the node at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionCount">
            <summary>
            Returns the number of signal connections in the scene.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSource(System.Int32)">
            <summary>
            Returns the path to the node that owns the signal at [code]idx[/code], relative to the root node.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionSignal(System.Int32)">
            <summary>
            Returns the name of the signal at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionTarget(System.Int32)">
            <summary>
            Returns the path to the node that owns the method connected to the signal at [code]idx[/code], relative to the root node.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionMethod(System.Int32)">
            <summary>
            Returns the method connected to the signal at [code]idx[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionFlags(System.Int32)">
            <summary>
            Returns the flags for the signal at [code]idx[/code]. See [Object]'s [code]CONNECT_*[/code] flags.
            </summary>
        </member>
        <member name="M:Godot.SceneState.GetConnectionBinds(System.Int32)">
            <summary>
            Returns the list of bound parameters for the signal at [code]idx[/code].
            </summary>
        </member>
        <member name="T:Godot.SceneTree">
            <summary>
            As one of the most important classes, the [code]SceneTree[/code] manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded. You can also use the SceneTree to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugCollisionsHint">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.DebugNavigationHint">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Paused">
            <summary>
            If [code]true[/code] the SceneTree is paused.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.RefuseNewNetworkConnections">
            <summary>
            If [code]true[/code] the SceneTree's [member network_peer] refuses new incoming connections.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.UseFontOversampling">
            <summary>
            If [code]true[/code] font oversampling is used.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.EditedSceneRoot">
            <summary>
            The root of the edited scene.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.CurrentScene">
            <summary>
            The current scene.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.NetworkPeer">
            <summary>
            The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the SceneTree will become a network server (check with [method is_network_server()]) and will set root node's network mode to master (see NETWORK_MODE_* constants in [Node]), or it will become a regular peer with root node set to slave. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to SceneTree's signals.
            </summary>
        </member>
        <member name="P:Godot.SceneTree.Root">
            <summary>
            The SceneTree's [Viewport].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasGroup(System.String)">
            <summary>
            Returns [code]true[/code] if the given group exists.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetAutoAcceptQuit(System.Boolean)">
            <summary>
            If [code]true[/code] the application automatically accepts quitting.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetQuitOnGoBack(System.Boolean)">
            <summary>
            If [code]true[/code] the application quits automatically on going back (e.g. on Android).
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetInputAsHandled">
            <summary>
            Marks the most recent input event as handled.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.IsInputHandled">
            <summary>
            Returns [code]true[/code] if the most recent InputEvent was marked as handled with [method set_input_as_handled].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CreateTimer(System.Single,System.Boolean)">
            <summary>
            Returns a [SceneTreeTimer] which will [signal SceneTreeTimer.timeout] after the given time in seconds elapsed in this SceneTree. If [code]pause_mode_process[/code] is set to false, pausing the SceneTree will also pause the timer.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodeCount">
            <summary>
            Returns the number of nodes in this SceneTree.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetFrame">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SceneTree.Quit">
            <summary>
            Quits the application.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetScreenStretch(Godot.SceneTree.StretchMode,Godot.SceneTree.StretchAspect,Godot.Vector2,System.Single)">
            <summary>
            Configures screen stretching to the given [enum StretchMode], [enum StretchAspect], minimum size and [code]shrink[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.QueueDelete(Godot.Object)">
            <summary>
            Queues the given object for deletion, delaying the call to [method Object.free] to after the current frame.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroupFlags(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Calls [code]method[/code] on each member of the given group, respecting the given [enum GROUP_CALL] flags.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroupFlags(System.Int32,System.String,System.Int32)">
            <summary>
            Sends the given notification to all members of the [code]group[/code], respecting the given [enum GROUP_CALL] flags.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroupFlags(System.Int32,System.String,System.String,System.Object)">
            <summary>
            Sets the given [code]property[/code] to [code]value[/code] on all members of the given group, respecting the given [enum GROUP_CALL] flags.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.CallGroup(System.String,System.String,System.Object[])">
            <summary>
            Calls [code]method[/code] on each member of the given group.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.NotifyGroup(System.String,System.Int32)">
            <summary>
            Sends the given notification to all members of the [code]group[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.SetGroup(System.String,System.String,System.Object)">
            <summary>
            Sets the given [code]property[/code] to [code]value[/code] on all members of the given group.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNodesInGroup(System.String)">
            <summary>
            Returns all nodes assigned to the given group.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeScene(System.String)">
            <summary>
            Changes to the scene at the given [code]path[/code].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ChangeSceneTo(Godot.PackedScene)">
            <summary>
            Changes to the given [PackedScene].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.ReloadCurrentScene">
            <summary>
            Reloads the currently active scene.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.IsNetworkServer">
            <summary>
            Returns [code]true[/code] if this SceneTree's [member network_peer] is in server mode (listening for connections).
            </summary>
        </member>
        <member name="M:Godot.SceneTree.HasNetworkPeer">
            <summary>
            Returns [code]true[/code] if there is a [member network_peer] set.
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkConnectedPeers">
            <summary>
            Returns the peer IDs of all connected peers of this SceneTree's [member network_peer].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetNetworkUniqueId">
            <summary>
            Returns the unique peer ID of this SceneTree's [member network_peer].
            </summary>
        </member>
        <member name="M:Godot.SceneTree.GetRpcSenderId">
            <summary>
            Returns the sender's peer ID for the most recently received RPC call.
            </summary>
        </member>
        <member name="P:Godot.SceneTreeTimer.TimeLeft">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Script">
            <summary>
            A class stored as a resource. The script exends the functionality of all objects that instance it.
            The 'new' method of a script subclass creates a new instance. [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
            </summary>
        </member>
        <member name="P:Godot.Script.SourceCode">
            <summary>
            The script source code, or an empty string if source code is not available. When set, does not reload the class implementation automatically.
            </summary>
        </member>
        <member name="M:Godot.Script.CanInstance">
            <summary>
            Returns true if the script can be instanced.
            </summary>
        </member>
        <member name="M:Godot.Script.InstanceHas(Godot.Object)">
            <summary>
            Returns true if 'base_object' is an instance of this script.
            </summary>
        </member>
        <member name="M:Godot.Script.HasSourceCode">
            <summary>
            Returns true if the script contains non-empty source code.
            </summary>
        </member>
        <member name="M:Godot.Script.Reload(System.Boolean)">
            <summary>
            Reloads the script's class implementation. Returns an error code.
            </summary>
        </member>
        <member name="M:Godot.Script.GetBaseScript">
            <summary>
            Returns the script directly inherited by this script.
            </summary>
        </member>
        <member name="M:Godot.Script.GetInstanceBaseType">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Script.HasScriptSignal(System.String)">
            <summary>
            Returns true if the script, or a base class, defines a signal with the given name.
            </summary>
        </member>
        <member name="M:Godot.Script.IsTool">
            <summary>
            Returns true if the script is a tool script. A tool script can run in the editor.
            </summary>
        </member>
        <member name="T:Godot.ScrollBar">
            <summary>
            Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.
            </summary>
        </member>
        <member name="P:Godot.ScrollBar.CustomStep">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.ScrollContainer">
            <summary>
            A ScrollContainer node with a [Control] child and scrollbar child ([HScrollbar], [VScrollBar], or both) will only draw the Control within the ScrollContainer area.  Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer.  Scrollbars will also automatically resize the grabber based on the minimum_size of the Control relative to the ScrollContainer.  Works great with a [Panel] control.  You can set EXPAND on children size flags, so they will upscale to ScrollContainer size if ScrollContainer size is bigger (scroll is invisible for chosen dimension).
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontalEnabled">
            <summary>
            If [code]true[/code], enables horizontal scrolling.
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollHorizontal">
            <summary>
            The current horizontal scroll value.
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVerticalEnabled">
            <summary>
            If [code]true[/code], enables vertical scrolling.
            </summary>
        </member>
        <member name="P:Godot.ScrollContainer.ScrollVertical">
            <summary>
            The current horizontal scroll value.
            </summary>
        </member>
        <member name="T:Godot.SegmentShape2D">
            <summary>
            Segment shape for 2D collisions. Consists of two points, [code]a[/code] and [code]b[/code].
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.A">
            <summary>
            The segment's first point position.
            </summary>
        </member>
        <member name="P:Godot.SegmentShape2D.B">
            <summary>
            The segment's second point position.
            </summary>
        </member>
        <member name="T:Godot.Semaphore">
            <summary>
            A synchronization Semaphore. Element used to synchronize multiple [Thread]s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see [Mutex].
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Wait">
            <summary>
            Tries to wait for the [code]Semaphore[/code], if its value is zero, blocks until non-zero. Returns [OK] on success, [ERR_BUSY] otherwise.
            </summary>
        </member>
        <member name="M:Godot.Semaphore.Post">
            <summary>
            Lowers the [code]Semaphore[/code], allowing one more thread in. Returns [OK] on success, [ERR_BUSY] otherwise.
            </summary>
        </member>
        <member name="T:Godot.Separator">
            <summary>
            Separator is a [Control] used for separating other controls. It's purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.
            </summary>
        </member>
        <member name="T:Godot.Shader">
            <summary>
            To be changed, ignore.
            </summary>
        </member>
        <member name="P:Godot.Shader.Code">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Shader.GetMode">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Shader.SetDefaultTextureParam(System.String,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Shader.GetDefaultTextureParam(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Shader.HasParam(System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ShaderMaterial.Shader">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.SetShaderParam(System.String,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.ShaderMaterial.GetShaderParam(System.String)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Shape">
            <summary>
            Base class for all 3D shape resources. All 3D shapes that inherit from this can be set into a [PhysicsBody] or [Area].
            </summary>
        </member>
        <member name="T:Godot.Shape2D">
            <summary>
            Base class for all 2D Shapes. All 2D shape types inherit from this.
            </summary>
        </member>
        <member name="P:Godot.Shape2D.CustomSolverBias">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Shape2D.Collide(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            Return whether this shape is colliding with another.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotion(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            Return whether this shape would collide with another, if a given movement was applied.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideAndGetContacts(Godot.Transform2D,Godot.Shape2D,Godot.Transform2D)">
            <summary>
            Return a list of the points where this shape touches another. If there are no collisions, the list is empty.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the shape to check collisions with ([code]with_shape[/code]), and the transformation matrix of that shape ([code]shape_xform[/code]).
            </summary>
        </member>
        <member name="M:Godot.Shape2D.CollideWithMotionAndGetContacts(Godot.Transform2D,Godot.Vector2,Godot.Shape2D,Godot.Transform2D,Godot.Vector2)">
            <summary>
            Return a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions, the list is empty.
            This method needs the transformation matrix for this shape ([code]local_xform[/code]), the movement to test on this shape ([code]local_motion[/code]), the shape to check collisions with ([code]with_shape[/code]), the transformation matrix of that shape ([code]shape_xform[/code]), and the movement to test onto the other object ([code]shape_motion[/code]).
            </summary>
        </member>
        <member name="T:Godot.ShortCut">
            <summary>
            A shortcut for binding input.
            Shortcuts are commonly used for interacting with a [Control] element from a [InputEvent].
            </summary>
        </member>
        <member name="P:Godot.ShortCut.Shortcut">
            <summary>
            The Shortcut's [InputEvent].
            Generally the [InputEvent] is a keyboard key, though it can be any [InputEvent].
            </summary>
        </member>
        <member name="M:Godot.ShortCut.IsValid">
            <summary>
            If [code]true[/code] this Shortcut is valid.
            </summary>
        </member>
        <member name="M:Godot.ShortCut.IsShortcut(Godot.InputEvent)">
            <summary>
            Returns [code]true[/code] if the Shortcut's [InputEvent] equals [code]event[/code].
            </summary>
        </member>
        <member name="M:Godot.ShortCut.GetAsText">
            <summary>
            Returns the Shortcut's [InputEvent] as a [String].
            </summary>
        </member>
        <member name="T:Godot.Skeleton">
            <summary>
            Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.AddBone(System.String)">
            <summary>
            Add a bone, with name "name". [method get_bone_count] will become the bone index.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.FindBone(System.String)">
            <summary>
            Return the bone index that matches "name" as its name.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneName(System.Int32)">
            <summary>
            Return the name of the bone at index "index"
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneParent(System.Int32)">
            <summary>
            Return the bone index which is the parent of the bone at "bone_idx". If -1, then bone has no parent. Note that the parent bone returned will always be less than "bone_idx".
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneParent(System.Int32,System.Int32)">
            <summary>
            Set the bone index "parent_idx" as the parent of the bone at "bone_idx". If -1, then bone has no parent. Note: "parent_idx" must be less than "bone_idx".
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneCount">
            <summary>
            Return the amount of bones in the skeleton.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.UnparentBoneAndRest(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneRest(System.Int32)">
            <summary>
            Return the rest transform for a bone "bone_idx".
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneRest(System.Int32,Godot.Transform)">
            <summary>
            Set the rest transform for bone "bone_idx"
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneDisableRest(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.IsBoneRestDisabled(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.BindChildNodeToBone(System.Int32,Godot.Node)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.UnbindChildNodeFromBone(System.Int32,Godot.Node)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoundChildNodesToBone(System.Int32)">
            <summary>
            Deprecated soon.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.ClearBones">
            <summary>
            Clear all the bones in this skeleton.
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBonePose(System.Int32)">
            <summary>
            Return the pose transform for bone "bone_idx".
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBonePose(System.Int32,Godot.Transform)">
            <summary>
            Return the pose transform for bone "bone_idx".
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneGlobalPose(System.Int32,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneGlobalPose(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneCustomPose(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.SetBoneCustomPose(System.Int32,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Skeleton.GetBoneTransform(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Sky">
            <summary>
            The base class for [PanoramaSky] and [ProceduralSky].
            </summary>
        </member>
        <member name="P:Godot.Sky.RadianceSize">
            <summary>
            The Sky's radiance map size.
            The higher the radiance map size, the more detailed the lighting from the Sky will be.
            See RADIANCE_SIZE_* constants for values. Default size is RADIANCE_SIZE_512.
            </summary>
        </member>
        <member name="T:Godot.Slider">
            <summary>
            Base class for GUI Sliders.
            </summary>
        </member>
        <member name="P:Godot.Slider.Editable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Slider.TickCount">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Slider.TicksOnBorders">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Slider.FocusMode">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.SliderJoint">
            <summary>
            Slides across the x-axis of the [Pivot] object.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__upperDistance">
            <summary>
            The maximum difference between the pivot points on their x-axis before damping happens.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__lowerDistance">
            <summary>
            The minimum difference between the pivot points on their x-axis before damping happens.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__softness">
            <summary>
            A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__restitution">
            <summary>
            The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearLimit__damping">
            <summary>
            The amount of damping that happens once the limit defined by [member linear_limit/lower_distance] and [member linear_limit/upper_distance] is surpassed.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__softness">
            <summary>
            A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__restitution">
            <summary>
            The amount of restitution inside the slider limits.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearMotion__damping">
            <summary>
            The amount of damping inside the slider limits.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__softness">
            <summary>
            A factor applied to the movement across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__restitution">
            <summary>
            The amount of restitution when movement is across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.LinearOrtho__damping">
            <summary>
            The amount of damping when movement is across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__upperAngle">
            <summary>
            The upper limit of rotation in the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__lowerAngle">
            <summary>
            The lower limit of rotation in the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__softness">
            <summary>
            A factor applied to the all rotation once the limit is surpassed.
            Makes all rotation slower when between 0 and 1.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__restitution">
            <summary>
            The amount of restitution of the rotation when the limit is surpassed.
            Does not affect damping.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularLimit__damping">
            <summary>
            The amount of damping of the rotation when the limit is surpassed.
            A lower damping value allows a rotation initiated by body A to travel to body B slower.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__softness">
            <summary>
            A factor applied to the all rotation in the limits.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__restitution">
            <summary>
            The amount of restitution of the rotation in the limits.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularMotion__damping">
            <summary>
            The amount of damping of the rotation in the limits.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__softness">
            <summary>
            A factor applied to the all rotation across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__restitution">
            <summary>
            The amount of restitution of the rotation across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="P:Godot.SliderJoint.AngularOrtho__damping">
            <summary>
            The amount of damping of the rotation across axes orthogonal to the slider.
            </summary>
        </member>
        <member name="T:Godot.Spatial">
            <summary>
            Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use Spatial as a parent node to move, scale, rotate and show/hide children in a 3D project.
            Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the Spatial object is set as top level. Affine operations in this coordinate system correspond to direct affine operations on the Spatial's transform. The word local below refers to this coordinate system. The coordinate system that is attached to the Spatial object itself is referred to as object-local coordinate system.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Transform">
            <summary>
            Local space [Transform] of this node, with respect to the parent node.
            </summary>
        </member>
        <member name="P:Godot.Spatial.GlobalTransform">
            <summary>
            World space (global) [Transform] of this node.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Translation">
            <summary>
            Local translation of this node.
            </summary>
        </member>
        <member name="P:Godot.Spatial.RotationDegrees">
            <summary>
            Rotation part of the local transformation, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle), in degrees.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Rotation">
            <summary>
            Rotation part of the local transformation, specified in terms of YXZ-Euler angles in the format (X-angle, Y-angle, Z-angle), in radians.
            Note that in the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three indepdent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Scale">
            <summary>
            Scale part of the local transformation.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Visible">
            <summary>
            Visibility of this node. Toggles if this node is rendered.
            </summary>
        </member>
        <member name="P:Godot.Spatial.Gizmo">
            <summary>
            The SpatialGizmo for this node. Used for example in [EditorSpatialGizmo] as custom visualization and editing handles in Editor.
            </summary>
        </member>
        <member name="M:Godot.Spatial.GetParentSpatial">
            <summary>
            Returns the parent [code]Spatial[/code], or an empty [Object] if no parent exists or parent is not of type [code]Spatial[/code].
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetIgnoreTransformNotification(System.Boolean)">
            <summary>
            Set whether the node ignores notification that its transformation (global or local) changed.
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetAsToplevel(System.Boolean)">
            <summary>
            Makes the node ignore its parents transformations. Node transformations are only in global space.
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsSetAsToplevel">
            <summary>
            Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.
            </summary>
        </member>
        <member name="M:Godot.Spatial.GetWorld">
            <summary>
            Returns the current [World] resource this Spatial node is registered to.
            </summary>
        </member>
        <member name="M:Godot.Spatial.UpdateGizmo">
            <summary>
            Updates the [SpatialGizmo] of this node.
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsVisibleInTree">
            <summary>
            Returns whether the node is visible, taking into consideration that its parents visibility.
            </summary>
        </member>
        <member name="M:Godot.Spatial.Show">
            <summary>
            Enables rendering of this node. Change Spatial Visible property to "True".
            </summary>
        </member>
        <member name="M:Godot.Spatial.Hide">
            <summary>
            Disables rendering of this node. Change Spatial Visible property to false.
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetNotifyLocalTransform(System.Boolean)">
            <summary>
            Set whether the node notifies about its local transformation changes. Spatial will not propagate this by default.
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsLocalTransformNotificationEnabled">
            <summary>
            Returns whether node notifies about its local transformation changes. Spatial will not propagate this by default.
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetNotifyTransform(System.Boolean)">
            <summary>
            Set whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.
            </summary>
        </member>
        <member name="M:Godot.Spatial.IsTransformNotificationEnabled">
            <summary>
            Returns whether the node notifies about its global and local transformation changes. Spatial will not propagate this by default.
            </summary>
        </member>
        <member name="M:Godot.Spatial.Rotate(Godot.Vector3,System.Single)">
            <summary>
            Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians.
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalRotate(Godot.Vector3,System.Single)">
            <summary>
            Rotates the global (world) transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in global coordinate system.
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalScale(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Spatial.GlobalTranslate(Godot.Vector3)">
            <summary>
            Moves the global (world) transformation by [Vector3] offset. The offset is in global coordinate system.
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateObjectLocal(Godot.Vector3,System.Single)">
            <summary>
            Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in object-local coordinate system.
            </summary>
        </member>
        <member name="M:Godot.Spatial.ScaleObjectLocal(Godot.Vector3)">
            <summary>
            Scales the local transformation by given 3D scale factors in object-local coordinate system.
            </summary>
        </member>
        <member name="M:Godot.Spatial.TranslateObjectLocal(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateX(System.Single)">
            <summary>
            Rotates the local transformation around the X axis by angle in radians
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateY(System.Single)">
            <summary>
            Rotates the local transformation around the Y axis by angle in radians.
            </summary>
        </member>
        <member name="M:Godot.Spatial.RotateZ(System.Single)">
            <summary>
            Rotates the local transformation around the Z axis by angle in radians.
            </summary>
        </member>
        <member name="M:Godot.Spatial.Translate(Godot.Vector3)">
            <summary>
            Changes the node's position by given offset [Vector3].
            </summary>
        </member>
        <member name="M:Godot.Spatial.Orthonormalize">
            <summary>
            Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [Transform3D].
            </summary>
        </member>
        <member name="M:Godot.Spatial.SetIdentity">
            <summary>
            Reset all transformations for this node. Set its [Transform3D] to identity matrix.
            </summary>
        </member>
        <member name="M:Godot.Spatial.LookAt(Godot.Vector3,Godot.Vector3)">
            <summary>
            Rotates itself so that the local -Z axis points towards the [code]target[/code] position.
            The transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.
            Operations take place in global space.
            </summary>
        </member>
        <member name="M:Godot.Spatial.LookAtFromPosition(Godot.Vector3,Godot.Vector3,Godot.Vector3)">
            <summary>
            Moves the node to the specified [code]position[/code], and then rotates itself to point toward the [code]target[/code] as per [method look_at]. Operations take place in global space.
            </summary>
        </member>
        <member name="M:Godot.Spatial.ToLocal(Godot.Vector3)">
            <summary>
            Transforms [Vector3] "global_point" from world space to this node's local space.
            </summary>
        </member>
        <member name="M:Godot.Spatial.ToGlobal(Godot.Vector3)">
            <summary>
            Transforms [Vector3] "local_point" from this node's local space to world space.
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsTransparent">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsUnshaded">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsVertexLighting">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsNoDepthTest">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsUsePointSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsWorldTriplanar">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsFixedSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.FlagsAlbedoTexForceSrgb">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.VertexColorUseAsAlbedo">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.VertexColorIsSrgb">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsDiffuseMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsSpecularMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsBlendMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsCullMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsDepthDrawMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsLineWidth">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsPointSize">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsBillboardMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsGrow">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsGrowAmount">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsUseAlphaScissor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParamsAlphaScissorThreshold">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimHFrames">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimVFrames">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ParticlesAnimLoop">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AlbedoColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AlbedoTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Metallic">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicSpecular">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.MetallicTextureChannel">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Roughness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RoughnessTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RoughnessTextureChannel">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Emission">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionEnergy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionOperator">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionOnUv2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.EmissionTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.NormalTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Rim">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimTint">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RimTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Clearcoat">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatGloss">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ClearcoatTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AnisotropyEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Anisotropy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AnisotropyFlowmap">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoLightAffect">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoOnUv2">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.AoTextureChannel">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthDeepParallax">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthMinLayers">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthMaxLayers">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DepthTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterStrength">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.SubsurfScatterTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.TransmissionEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Transmission">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.TransmissionTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionScale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionTexture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.RefractionTextureChannel">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailMask">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailBlendMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailUvLayer">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailAlbedo">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DetailNormal">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Scale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Offset">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1Triplanar">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv1TriplanarSharpness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Scale">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Offset">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2Triplanar">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.Uv2TriplanarSharpness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ProximityFadeEnable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.ProximityFadeDistance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeEnable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeMinDistance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialMaterial.DistanceFadeMaxDistance">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpatialVelocityTracker.TrackPhysicsStep">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.UpdatePosition(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.GetTrackedLinearVelocity">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpatialVelocityTracker.Reset(Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.SphereMesh">
            <summary>
            Class representing a spherical [PrimitiveMesh].
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Radius">
            <summary>
            Radius of sphere. Defaults to 1.0.
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Height">
            <summary>
            Full height of the sphere. Defaults to 2.0.
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.RadialSegments">
            <summary>
            Number of radial segments on the sphere. Defaults to 64.
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.Rings">
            <summary>
            Number of segments along the height of the sphere. Defaults to 32.
            </summary>
        </member>
        <member name="P:Godot.SphereMesh.IsHemisphere">
            <summary>
            Determines whether a full sphere or a hemisphere is created. Attention: To get a regular hemisphere the height and radius of the sphere have to equal. Defaults to false.
            </summary>
        </member>
        <member name="T:Godot.SphereShape">
            <summary>
            Sphere shape for 3D collisions, which can be set into a [PhysicsBody] or [Area]. This shape is useful for modeling sphere-like 3D objects.
            </summary>
        </member>
        <member name="P:Godot.SphereShape.Radius">
            <summary>
            The sphere's radius. The shape's diameter is double the radius.
            </summary>
        </member>
        <member name="T:Godot.SpinBox">
            <summary>
            SpinBox is a numerical input text field. It allows entering integers and floats.
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Editable">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Prefix">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpinBox.Suffix">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpinBox.GetLineEdit">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.SplitContainer">
            <summary>
            Container for splitting two controls vertically or horizontally, with a grabber that allows adjusting the split offset or ratio.
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.SplitOffset">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.Collapsed">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SplitContainer.DraggerVisibility">
            <summary>
            Determines whether the dragger is visible.
            </summary>
        </member>
        <member name="T:Godot.SpotLight">
            <summary>
            A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotRange">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAttenuation">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAngle">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.SpotLight.SpotAngleAttenuation">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Sprite">
            <summary>
            A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.
            </summary>
        </member>
        <member name="P:Godot.Sprite.Texture">
            <summary>
            [Texture] object to draw.
            </summary>
        </member>
        <member name="P:Godot.Sprite.NormalMap">
            <summary>
            The normal map gives depth to the Sprite.
            </summary>
        </member>
        <member name="P:Godot.Sprite.Centered">
            <summary>
            If [code]true[/code] texture is centered. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite.Offset">
            <summary>
            The texture's drawing offset.
            </summary>
        </member>
        <member name="P:Godot.Sprite.FlipH">
            <summary>
            If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite.FlipV">
            <summary>
            If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite.Vframes">
            <summary>
            The number of rows in the sprite sheet.
            </summary>
        </member>
        <member name="P:Godot.Sprite.Hframes">
            <summary>
            The number of columns in the sprite sheet.
            </summary>
        </member>
        <member name="P:Godot.Sprite.Frame">
            <summary>
            Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1.
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionEnabled">
            <summary>
            If [code]true[/code] texture is cut from a larger atlas texture. See [code]region_rect[/code]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionRect">
            <summary>
            The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite.RegionFilterClip">
            <summary>
            If [code]true[/code] the outermost pixels get blurred out.
            </summary>
        </member>
        <member name="T:Godot.Sprite3D">
            <summary>
            A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Texture">
            <summary>
            [Texture] object to draw.
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Vframes">
            <summary>
            The number of rows in the sprite sheet.
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Hframes">
            <summary>
            The number of columns in the sprite sheet.
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.Frame">
            <summary>
            Current frame to display from sprite sheet. [member vframes] or [member hframes] must be greater than 1.
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionEnabled">
            <summary>
            If [code]true[/code] texture will be cut from a larger atlas texture. See [member region_rect]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Sprite3D.RegionRect">
            <summary>
            The region of the atlas texture to display. [member region_enabled] must be [code]true[/code].
            </summary>
        </member>
        <member name="T:Godot.SpriteBase3D">
            <summary>
            A node that displays 2D texture information in a 3D environment.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Centered">
            <summary>
            If [code]true[/code] texture will be centered. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Offset">
            <summary>
            The texture's drawing offset.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipH">
            <summary>
            If [code]true[/code] texture is flipped horizontally. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.FlipV">
            <summary>
            If [code]true[/code] texture is flipped vertically. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Modulate">
            <summary>
            A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Opacity">
            <summary>
            The objects visibility on a scale from [code]0[/code] fully invisible to [code]1[/code] fully visible.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.PixelSize">
            <summary>
            The size of one pixel's width on the Sprite to scale it in 3D.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Axis">
            <summary>
            The direction in which the front of the texture faces.
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Transparent">
            <summary>
            If [code]true[/code] the texture's transparency and the opacity are used to make those parts of the Sprite invisible. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.Shaded">
            <summary>
            If [code]true[/code] the [Light] in the [Environment] has effects on the Sprite. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.DoubleSided">
            <summary>
            If [code]true[/code] texture can be seen from the back as well, if [code]false[/code], it is invisible when looking at it from behind. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.SpriteBase3D.AlphaCut">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpriteBase3D.GetItemRect">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.SpriteFrames">
            <summary>
            Sprite frame library for [AnimatedSprite]. Contains frames and animation data for playback.
            </summary>
        </member>
        <member name="P:Godot.SpriteFrames.Frames">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddAnimation(System.String)">
            <summary>
            Adds a new animation to the the library.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.HasAnimation(System.String)">
            <summary>
            If [code]true[/code] the named animation exists.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveAnimation(System.String)">
            <summary>
            Removes the given animation.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RenameAnimation(System.String,System.String)">
            <summary>
            Changes the animation's name to [code]newname[/code].
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationSpeed(System.String,System.Single)">
            <summary>
            The animation's speed in frames per second.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationSpeed(System.String)">
            <summary>
            The animation's speed in frames per second.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetAnimationLoop(System.String,System.Boolean)">
            <summary>
            If [code]true[/code] the animation will loop.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetAnimationLoop(System.String)">
            <summary>
            If [code]true[/code] the given animation will loop.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.AddFrame(System.String,Godot.Texture,System.Int32)">
            <summary>
            Adds a frame to the given animation.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrameCount(System.String)">
            <summary>
            Returns the number of frames in the animation.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.GetFrame(System.String,System.Int32)">
            <summary>
            Returns the animation's selected frame.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.SetFrame(System.String,System.Int32,Godot.Texture)">
            <summary>
            Sets the texture of the given frame.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.RemoveFrame(System.String,System.Int32)">
            <summary>
            Removes the animation's selected frame.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.Clear(System.String)">
            <summary>
            Removes all frames from the given animation.
            </summary>
        </member>
        <member name="M:Godot.SpriteFrames.ClearAll">
            <summary>
            Removes all animations. A "default" animation will be created.
            </summary>
        </member>
        <member name="T:Godot.StaticBody">
            <summary>
            Static body for 3D Physics. A static body is a simple body that is not intended to move. They don't consume any CPU resources in contrast to a [RigidBody3D] so they are great for scenario collision.
            A static body can also be animated by using simulated motion mode. This is useful for implementing functionalities such as moving platforms. When this mode is active the body can be animated and automatically computes linear and angular velocity to apply in that frame and to influence other bodies.
            Alternatively, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels).
            </summary>
        </member>
        <member name="P:Godot.StaticBody.Friction">
            <summary>
            The body friction, from 0 (frictionless) to 1 (full friction).
            </summary>
        </member>
        <member name="P:Godot.StaticBody.Bounce">
            <summary>
            The body bounciness.
            </summary>
        </member>
        <member name="P:Godot.StaticBody.ConstantLinearVelocity">
            <summary>
            The constant linear velocity for the body. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement.
            </summary>
        </member>
        <member name="P:Godot.StaticBody.ConstantAngularVelocity">
            <summary>
            The constant angular velocity for the body. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation.
            </summary>
        </member>
        <member name="T:Godot.StaticBody2D">
            <summary>
            Static body for 2D Physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.
            Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt).
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantLinearVelocity">
            <summary>
            Constant linear velocity for the body. This does not move the body, but affects colliding bodies, as if it were moving.
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.ConstantAngularVelocity">
            <summary>
            Constant angular velocity for the body. This does not rotate the body, but affects colliding bodies, as if it were rotating.
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.Friction">
            <summary>
            The body's friction. Values range from [code]0[/code] (no friction) to [code]1[/code] (full friction).
            </summary>
        </member>
        <member name="P:Godot.StaticBody2D.Bounce">
            <summary>
            The body's bounciness. Values range from [code]0[/code] (no bounce) to [code]1[/code] (full bounciness).
            </summary>
        </member>
        <member name="T:Godot.StreamPeer">
            <summary>
            StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.
            </summary>
        </member>
        <member name="P:Godot.StreamPeer.BigEndian">
            <summary>
            If [code]true[/code], this [code]StreamPeer[/code] will using big-endian format for encoding and decoding.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutData(System.Byte[])">
            <summary>
            Send a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an Error code.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutPartialData(System.Byte[])">
            <summary>
            Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an Error code and an integer, describing how much data was actually sent.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetData(System.Int32)">
            <summary>
            Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an Error code and a data array.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetPartialData(System.Int32)">
            <summary>
            Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an Error code, and a data array.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetAvailableBytes">
            <summary>
            Return the amount of bytes this [code]StreamPeer[/code] has available.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put8(System.Int32)">
            <summary>
            Put a signed byte into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU8(System.Int32)">
            <summary>
            Put an unsigned byte into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put16(System.Int32)">
            <summary>
            Put a signed 16 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU16(System.Int32)">
            <summary>
            Put an unsigned 16 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put32(System.Int32)">
            <summary>
            Put a signed 32 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU32(System.Int32)">
            <summary>
            Put an unsigned 32 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Put64(System.Int32)">
            <summary>
            Put a signed 64 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutU64(System.Int32)">
            <summary>
            Put an unsigned 64 bit value into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutFloat(System.Single)">
            <summary>
            Put a single-precision float into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutDouble(System.Single)">
            <summary>
            Put a double-precision float into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutUtf8String(System.String)">
            <summary>
            Put a zero-terminated utf8 string into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.PutVar(System.Object)">
            <summary>
            Put a Variant into the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get8">
            <summary>
            Get a signed byte from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU8">
            <summary>
            Get an unsigned byte from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get16">
            <summary>
            Get a signed 16 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU16">
            <summary>
            Get an unsigned 16 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get32">
            <summary>
            Get a signed 32 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU32">
            <summary>
            Get an unsigned 32 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.Get64">
            <summary>
            Get a signed 64 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetU64">
            <summary>
            Get an unsigned 64 bit value from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetFloat">
            <summary>
            Get a single-precision float from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetDouble">
            <summary>
            Get a double-precision float from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetString(System.Int32)">
            <summary>
            Get a string with byte-length "bytes" from the stream.
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetUtf8String(System.Int32)">
            <summary>
            Get a utf8 string with byte-length "bytes" from the stream (this decodes the string sent as utf8).
            </summary>
        </member>
        <member name="M:Godot.StreamPeer.GetVar">
            <summary>
            Get a Variant from the stream.
            </summary>
        </member>
        <member name="P:Godot.StreamPeerBuffer.DataArray">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Seek(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.GetSize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.GetPosition">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Resize(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerBuffer.Duplicate">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.StreamPeerSSL">
            <summary>
            SSL Stream peer. This object can be used to connect to SSL servers.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.AcceptStream(Godot.StreamPeer)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.ConnectToStream(Godot.StreamPeer,System.Boolean,System.String)">
            <summary>
            Connect to a peer using an underlying [StreamPeer] "stream", when "validate_certs" is true, [code]StreamPeerSSL[/code] will validate that the certificate presented by the peer matches the "for_hostname".
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.GetStatus">
            <summary>
            Return the status of the connection, one of STATUS_* enum.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerSSL.DisconnectFromStream">
            <summary>
            Disconnect from host.
            </summary>
        </member>
        <member name="T:Godot.StreamPeerTCP">
            <summary>
            TCP Stream peer. This object can be used to connect to TCP servers, or also is returned by a tcp server.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.ConnectToHost(System.String,System.Int32)">
            <summary>
            Connect to the specified host:port pair. A hostname will be resolved if valid. Returns [OK] on success or [FAILED] on failure.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.IsConnectedToHost">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetStatus">
            <summary>
            Return the status of the connection, one of STATUS_* enum.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedHost">
            <summary>
            Return the IP of this peer.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.GetConnectedPort">
            <summary>
            Return the port of this peer.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.DisconnectFromHost">
            <summary>
            Disconnect from host.
            </summary>
        </member>
        <member name="M:Godot.StreamPeerTCP.SetNoDelay(System.Boolean)">
            <summary>
            Disable Nagle algorithm to improve latency for small packets.
            Note that for applications that send large packets, or need to transfer a lot of data, this can reduce total bandwidth.
            </summary>
        </member>
        <member name="T:Godot.StreamTexture">
            <summary>
            A texture that is loaded from a .stex file.
            </summary>
        </member>
        <member name="P:Godot.StreamTexture.LoadPath">
            <summary>
            The StreamTexture's filepath to a .stex file.
            </summary>
        </member>
        <member name="T:Godot.StyleBox">
            <summary>
            StyleBox is [Resource] that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginRight">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginTop">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBox.ContentMarginBottom">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.TestMask(Godot.Vector2,Godot.Rect2)">
            <summary>
            Test a position in a rectangle, return whether it passes the mask test.
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMargin(Godot.Margin)">
            <summary>
            Return the offset of margin "margin" (see MARGIN_* enum).
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetMinimumSize">
            <summary>
            Return the minimum size that this stylebox can be shrunk to.
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetCenterSize">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBox.GetOffset">
            <summary>
            Return the "offset" of a stylebox, this is a helper function, like writing [code]Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))[/code].
            </summary>
        </member>
        <member name="M:Godot.StyleBox.Draw(Godot.RID,Godot.Rect2)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxEmpty">
            <summary>
            Empty stylebox (really does not display anything).
            </summary>
        </member>
        <member name="T:Godot.StyleBoxFlat">
            <summary>
            This stylebox can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:
            - Color
            - Border width (individual width for each border)
            - Rounded corners (individual radius for each corner)
            - Shadow
            About corner radius:
            Setting corner radius to high values is allowed. As soon as corners would overlap the stylebox will switch to a relative system. Example:
            [codeblock]
            height = 30
            corner_radius_top_left = 50
            corner_radius_bottom_left = 100
            [/codeblock]
            The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will [b]never[/b] be more than the height. Result:
            [codeblock]
            corner_radius_top_left: 10
            corner_radius_bottom_left: 20
            [/codeblock]
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BgColor">
            <summary>
            The background color of the stylebox.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.DrawCenter">
            <summary>
            Toggels drawing of the inner part of the stylebox.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthLeft">
            <summary>
            Border width for the left border.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthTop">
            <summary>
            Border width for the top border.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthRight">
            <summary>
            Border width for the right border.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderWidthBottom">
            <summary>
            Border width for the bottom border.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderColor">
            <summary>
            Sets the color of the border.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.BorderBlend">
            <summary>
            When set to true, the border will fade into the background color.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopLeft">
            <summary>
            The corner radius of the top left corner. When set to 0 the corner is not rounded.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusTopRight">
            <summary>
            The corner radius of the top right corner. When set to 0 the corner is not rounded.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomRight">
            <summary>
            The corner radius of the bottom right corner. When set to 0 the corner is not rounded.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerRadiusBottomLeft">
            <summary>
            The corner radius of the bottom left corner. When set to 0 the corner is not rounded.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.CornerDetail">
            <summary>
            This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value you should take the corner radius ([method set_corner_radius]) into account.
            For corner radius smaller than 10: 4-5 should be enough
            For corner radius smaller than 30: 8-12 should be enough ...
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginLeft">
            <summary>
            Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left. To draw a border outside the control rect.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginRight">
            <summary>
            Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right. To draw a border outside the control rect.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginTop">
            <summary>
            Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top. To draw a border outside the control rect.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ExpandMarginBottom">
            <summary>
            Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom. To draw a border outside the control rect.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowColor">
            <summary>
            The color of the shadow. (This has no effect when shadow_size &lt; 1)
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.ShadowSize">
            <summary>
            The shadow size in pixels.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasing">
            <summary>
            Anti Aliasing draws a small ring around edges. This ring fades to transparent. As a result edges look much smoother. This is only noticeable when using rounded corners.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxFlat.AntiAliasingSize">
            <summary>
            This changes the size of the faded ring. Higher values can be used to achieve a "blurry" effect.
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetBorderWidthAll(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.GetBorderWidthMin">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusIndividual(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetCornerRadiusAll(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginAll(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxFlat.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Color">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Grow">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Thickness">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxLine.Vertical">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.StyleBoxTexture">
            <summary>
            Texture Based 3x3 scale style. This stylebox performs a 3x3 scaling of a texture, where only the center cell is fully stretched. This allows for the easy creation of bordered styles.
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.Texture">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.NormalMap">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.RegionRect">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginRight">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginTop">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.MarginBottom">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginRight">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginTop">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ExpandMarginBottom">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchHorizontal">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.AxisStretchVertical">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.ModulateColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.StyleBoxTexture.DrawCenter">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginAll(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.StyleBoxTexture.SetExpandMarginIndividual(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.SurfaceTool">
            <summary>
            The [code]SurfaceTool[/code] is used to construct a [Mesh] by specifying vertex attributes individually. It can be used to construct a [Mesh] from script. All properties except index need to be added before a call to [method add_vertex]. For example adding vertex colors and UVs looks like
            [codeblock]
            var st = SurfaceTool.new()
            st.begin(Mesh.PRIMITIVE_TRIANGLES)
            st.add_color(Color(1, 0, 0))
            st.add_uv(Vector2(0, 0))
            st.add_vertex(Vector3(0, 0, 0))
            [/codeblock]
            The [code]SurfaceTool[/code] now contains one vertex of a triangle which has a UV coordinate and a specified [Color]. If another vertex were added without calls to [method add_uv] or [method add_color] then the last values would be used.
            It is very important that vertex attributes are passed [b]before[/b] the call to [method add_vertex], failure to do this will result in an error when committing the vertex information to a mesh.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Begin(Godot.Mesh.PrimitiveType)">
            <summary>
            Called before adding any Vertices. Takes the primitive type as an argument (e.g. Mesh.PRIMITIVE_TRIANGLES).
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddVertex(Godot.Vector3)">
            <summary>
            Specify position of current Vertex. Should be called after specifying other vertex properties (e.g. Color, UV).
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddColor(Godot.Color)">
            <summary>
            Specify a [Color] for the next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddNormal(Godot.Vector3)">
            <summary>
            Specify a normal for the next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddTangent(Godot.Plane)">
            <summary>
            Specify a Tangent for the next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddUv(Godot.Vector2)">
            <summary>
            Specify UV Coordinate for next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddUv2(Godot.Vector2)">
            <summary>
            Specify an optional second set of UV coordinates for next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddBones(System.Int32[])">
            <summary>
            Add an array of bones for the next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddWeights(System.Single[])">
            <summary>
            Specify weight value for next Vertex to use.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddSmoothGroup(System.Boolean)">
            <summary>
            Specify whether current Vertex (if using only Vertex arrays) or current index (if also using index arrays) should utilize smooth normals for normal calculation.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddTriangleFan(Godot.Vector3[],Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.Vector3[],System.Object[])">
            <summary>
            Insert a triangle fan made of array data into [Mesh] being constructed.
            &lt;param name="uvs"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            &lt;param name="colors"&gt;If the param is null, then the default value is new Color[] {}&lt;/param&gt;
            &lt;param name="uv2s"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            &lt;param name="normals"&gt;If the param is null, then the default value is new Vector3[] {}&lt;/param&gt;
            &lt;param name="tangents"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddIndex(System.Int32)">
            <summary>
            Adds an index to index array if you are using indexed Vertices. Does not need to be called before adding Vertex.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Index">
            <summary>
            Shrinks Vertex array by creating an index array. Avoids reusing Vertices.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Deindex">
            <summary>
            Removes index array by expanding Vertex array.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateNormals">
            <summary>
            Generates normals from Vertices so you do not have to do it manually.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.GenerateTangents">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AddToFormat(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.SetMaterial(Godot.Material)">
            <summary>
            Sets [Material] to be used by the [Mesh] you are constructing.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Clear">
            <summary>
            Clear all information passed into the surface tool so far.
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.CreateFrom(Godot.Mesh,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.AppendFrom(Godot.Mesh,System.Int32,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.SurfaceTool.Commit(Godot.ArrayMesh,System.Int32)">
            <summary>
            Returns a constructed [ArrayMesh] from current information passed in. If an existing [ArrayMesh] is passed in as an argument, will add an extra surface to the existing [ArrayMesh].
            </summary>
        </member>
        <member name="T:Godot.TabContainer">
            <summary>
            Sets the active tab's [code]visible[/code] property to the value [code]true[/code]. Sets all other children's to [code]false[/code].
            Ignores non-[Control] children.
            Individual tabs are always visible unless you use [method set_tab_disabled] and [method set_tab_title] to hide it.
            To hide only a tab's content, nest the content inside a child [Control], so it receives the [code]TabContainer[/code]'s visibility setting instead.
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabAlign">
            <summary>
            The alignment of all tabs in the tab container. See the [code]ALIGN_*[/code] constants for details.
            </summary>
        </member>
        <member name="P:Godot.TabContainer.CurrentTab">
            <summary>
            The current tab index. When set, this index's [Control] node's [code]visible[/code] property is set to [code]true[/code] and all others are set to [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TabContainer.TabsVisible">
            <summary>
            If [code]true[/code] tabs are visible. If [code]false[/code] tabs' content and titles are hidden. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabCount">
            <summary>
            Returns the number of tabs.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPreviousTab">
            <summary>
            Returns the previously active tab index.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetCurrentTabControl">
            <summary>
            Returns the child [Control] node located at the active tab index.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabControl(System.Int32)">
            <summary>
            Returns the currently visible tab's [Control] node.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabTitle(System.Int32,System.String)">
            <summary>
            Sets a title for the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabTitle(System.Int32)">
            <summary>
            Returns the title of the tab at index [code]tab_idx[/code]. Tab titles default to the name of the indexed child node, but this can be overridden with [method set_tab_title].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabIcon(System.Int32,Godot.Texture)">
            <summary>
            Sets an icon for the tab at index [code]tab_idx[/code].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabIcon(System.Int32)">
            <summary>
            Returns the [Texture] for the tab at index [code]tab_idx[/code] or null if the tab has no [Texture].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            If [code]disabled[/code] is false, hides the tab at index [code]tab_idx[/code]. Note that its title text will remain, unless also removed with [method set_tab_title].
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetTabDisabled(System.Int32)">
            <summary>
            Returns [code]true[/code] if the tab at index [code]tab_idx[/code] is disabled.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.SetPopup(Godot.Node)">
            <summary>
            If set on a [Popup] node instance, a popup menu icon appears in the top-right corner of the [code]TabContainer[/code]. Clicking it will expand the [Popup] node.
            </summary>
        </member>
        <member name="M:Godot.TabContainer.GetPopup">
            <summary>
            Returns the [Popup] node instance if one has been set already with [method set_popup].
            </summary>
        </member>
        <member name="T:Godot.Tabs">
            <summary>
            Simple tabs control, similar to [TabContainer] but is only in charge of drawing tabs, not interact with children.
            </summary>
        </member>
        <member name="P:Godot.Tabs.CurrentTab">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabAlign">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Tabs.TabCloseDisplayPolicy">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.Tabs.ScrollingEnabled">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabTitle(System.Int32,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabTitle(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabIcon(System.Int32,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabIcon(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.SetTabDisabled(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabDisabled(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.RemoveTab(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.AddTab(System.String,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabOffset">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetOffsetButtonsVisible">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.EnsureTabVisible(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tabs.GetTabRect(System.Int32)">
            <summary>
            Returns tab [Rect2] with local position and size.
            </summary>
        </member>
        <member name="M:Godot.Tabs.MoveTab(System.Int32,System.Int32)">
            <summary>
            Rearrange tab.
            </summary>
        </member>
        <member name="T:Godot.TCP_Server">
            <summary>
            TCP Server class. Listens to connections on a port and returns a [StreamPeerTCP] when got a connection.
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Listen(System.Int32,System.String)">
            <summary>
            Listen on the "port" binding to "bind_address".
            If "bind_address" is set as "*" (default), the server will listen on all available addresses (both IPv4 and IPv6).
            If "bind_address" is set as "0.0.0.0" (for IPv4) or "::" (for IPv6), the server will listen on all available addresses matching that IP type.
            If "bind_address" is set to any valid address (e.g. "192.168.1.101", "::1", etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists).
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.IsConnectionAvailable">
            <summary>
            Return true if a connection is available for taking.
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.TakeConnection">
            <summary>
            If a connection is available, return a StreamPeerTCP with the connection/
            </summary>
        </member>
        <member name="M:Godot.TCP_Server.Stop">
            <summary>
            Stop listening.
            </summary>
        </member>
        <member name="T:Godot.TextEdit">
            <summary>
            TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Text">
            <summary>
            String value of the [TextEdit].
            </summary>
        </member>
        <member name="P:Godot.TextEdit.Readonly">
            <summary>
            If [code]true[/code] read-only mode is enabled. Existing text cannot be modified and new text cannot be added.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightCurrentLine">
            <summary>
            If [code]true[/code] the line containing the cursor is highlighted.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SyntaxHighlighting">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ShowLineNumbers">
            <summary>
            If [code]true[/code] line numbers are displayed to the left of the text.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HighlightAllOccurrences">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.OverrideSelectedFontColor">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.ContextMenuEnabled">
            <summary>
            If [code]true[/code] a right click displays the context menu.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.SmoothScrolling">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.VScrollSpeed">
            <summary>
            If [code]true[/code], enables text wrapping when it goes beyond he edge of what is visible.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.HidingEnabled">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.WrapLines">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlockMode">
            <summary>
            If [code]true[/code] the caret displays as a rectangle.
            If [code]false[/code] the caret displays as a bar.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlink">
            <summary>
            If [code]true[/code] the caret (visual cursor) blinks.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretBlinkSpeed">
            <summary>
            Duration (in seconds) of a caret's blinking cycle.
            </summary>
        </member>
        <member name="P:Godot.TextEdit.CaretMovingByRightClick">
            <summary>
            If [code]true[/code] a right click moves the cursor at the mouse position before displaying the context menu.
            If [code]false[/code] the context menu disregards mouse location.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.InsertTextAtCursor(System.String)">
            <summary>
            Insert a given text at the cursor position.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLineCount">
            <summary>
            Return the amount of total lines in the text.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetLine(System.Int32)">
            <summary>
            Return the text of a specific line.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetColumn(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorSetLine(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetColumn">
            <summary>
            Return the column the editing cursor is at.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CursorGetLine">
            <summary>
            Return the line the editing cursor is at.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Cut">
            <summary>
            Cut the current selection.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Copy">
            <summary>
            Copy the current selection.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Paste">
            <summary>
            Paste the current selection.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform selection, from line/column to line/column.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SelectAll">
            <summary>
            Select all the text.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Deselect">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsSelectionActive">
            <summary>
            Return true if the selection is active.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromLine">
            <summary>
            Return the selection begin line.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionFromColumn">
            <summary>
            Return the selection begin column.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToLine">
            <summary>
            Return the selection end line.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionToColumn">
            <summary>
            Return the selection end column.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetSelectionText">
            <summary>
            Return the text inside the selection.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetWordUnderCursor">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Search(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a search inside the text. Search flags can be specified in the SEARCH_* enum.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Undo">
            <summary>
            Perform undo operation.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.Redo">
            <summary>
            Perform redo operation.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearUndoHistory">
            <summary>
            Clear the undo history.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.SetLineAsHidden(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsLineHidden(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldAllLines">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnhideAllLines">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.FoldLine(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.UnfoldLine(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ToggleFoldLine(System.Int32)">
            <summary>
            Toggle the folding of the code block at the given line.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.CanFold(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.IsFolded(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.AddKeywordColor(System.String,Godot.Color)">
            <summary>
            Add a keyword and its color.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.AddColorRegion(System.String,System.String,Godot.Color,System.Boolean)">
            <summary>
            Add color region (given the delimiters) and its colors.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.ClearColors">
            <summary>
            Clear all the syntax coloring information.
            </summary>
        </member>
        <member name="M:Godot.TextEdit.MenuOption(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TextEdit.GetMenu">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Texture">
            <summary>
            A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D [Sprite] or GUI [Control].
            </summary>
        </member>
        <member name="P:Godot.Texture.Flags">
            <summary>
            The texture's flags.
            </summary>
        </member>
        <member name="M:Godot.Texture.GetWidth">
            <summary>
            Return the texture width.
            </summary>
        </member>
        <member name="M:Godot.Texture.GetHeight">
            <summary>
            Return the texture height.
            </summary>
        </member>
        <member name="M:Godot.Texture.GetSize">
            <summary>
            Return the texture size.
            </summary>
        </member>
        <member name="M:Godot.Texture.HasAlpha">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Texture.Draw(Godot.RID,Godot.Vector2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Texture.DrawRect(Godot.RID,Godot.Rect2,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.Texture)">
            <summary>
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Texture.DrawRectRegion(Godot.RID,Godot.Rect2,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.Texture,System.Boolean)">
            <summary>
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Texture.GetData">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.TextureButton">
            <summary>
            [code]TextureButton[/code] has the same functionality as [Button], except it uses sprites instead of Godot's [Theme] resource. It is faster to create, but it doesn't support localization like more complex Controls.
            The Normal state's texture is required. Others are optional.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureNormal">
            <summary>
            Texture to display by default, when the node is [b]not[/b] in the disabled, focused, hover or pressed state.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TexturePressed">
            <summary>
            Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the enter key or if the player presses the [member BaseButton.shortcut] key.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureHover">
            <summary>
            Texture to display when the mouse hovers the node.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureDisabled">
            <summary>
            Texture to display when the node is disabled. See [member BaseButton.disabled].
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureFocused">
            <summary>
            Texture to display when the node has mouse or keyboard focus.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.TextureClickMask">
            <summary>
            Pure black and white [Bitmap] image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes.
            </summary>
        </member>
        <member name="P:Godot.TextureButton.Expand">
            <summary>
            If [code]true[/code] the texture stretches to the edges of the node's bounding rectangle using the [member stretch_mode]. If [code]false[/code] the texture will not scale with the node. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TextureButton.StretchMode">
            <summary>
            Controls the texture's behavior when you resize the node's bounding rectangle, [b]only if[/b] [member expand] is [code]true[/code]. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more.
            </summary>
        </member>
        <member name="T:Godot.TextureProgress">
            <summary>
            TextureProgress works like [ProgressBar] but it uses up to 3 textures instead of Godot's [Theme] resource. Works horizontally, vertically, and radially.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureUnder">
            <summary>
            [Texture] that draws under the progress bar. The bar's background.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureOver">
            <summary>
            [Texture] that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of [member texture_progress].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.TextureProgress_">
            <summary>
            [Texture] that clips based on the node's [code]value[/code] and [member fill_mode]. As [code]value[/code] increased, the texture fills up. It shows entirely when [code]value[/code] reaches [code]max_value[/code]. It doesn't show at all if [code]value[/code] is equal to [code]min_value[/code].
            The [code]value[/code] property comes from [Range]. See [member Range.value], [member Range.min_value], [member Range.max_value].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.FillMode">
            <summary>
            The fill direction. Uses FILL_* constants.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialInitialAngle">
            <summary>
            Starting angle for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]min_value[/code], the texture doesn't show up at all. When the [code]value[/code] increases, the texture fills and tends towards [member radial_fill_degrees].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialFillDegrees">
            <summary>
            Upper limit for the fill of [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code]. When the node's [code]value[/code] is equal to its [code]max_value[/code], the texture fills up to this angle.
            See [member Range.value], [member Range.max_value].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.RadialCenterOffset">
            <summary>
            Offsets [member texture_progress] if [member fill_mode] is [code]FILL_CLOCKWISE[/code] or [code]FILL_COUNTER_CLOCKWISE[/code].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.NinePatchStretch">
            <summary>
            If [code]true[/code] Godot treats the bar's textures like [NinePatchRect]. Use [code]stretch_margin_*[/code], like [member stretch_margin_bottom], to set up the nine patch's 3x3 grid. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginLeft">
            <summary>
            The width of the 9-patch's left column.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginTop">
            <summary>
            The height of the 9-patch's top row.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginRight">
            <summary>
            The width of the 9-patch's right column.
            </summary>
        </member>
        <member name="P:Godot.TextureProgress.StretchMarginBottom">
            <summary>
            The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.
            </summary>
        </member>
        <member name="T:Godot.TextureRect">
            <summary>
            Use TextureRect to draw icons and sprites in your User Interfaces. To create panels and menu boxes, take a look at [NinePatchFrame]. Its Stretch Mode property controls the texture's scale and placement. It can scale, tile and stay centered inside its bounding rectangle. TextureRect is one of the 5 most common nodes to create game UI.
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Texture">
            <summary>
            The node's [Texture] resource.
            </summary>
        </member>
        <member name="P:Godot.TextureRect.Expand">
            <summary>
            If [code]true[/code], the texture scales to fit its bounding rectangle. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TextureRect.StretchMode">
            <summary>
            Controls the texture's behavior when you resize the node's bounding rectangle. Set it to one of the [code]STRETCH_*[/code] constants. See the constants to learn more.
            </summary>
        </member>
        <member name="T:Godot.Theme">
            <summary>
            Theme for skinning controls. Controls can be skinned individually, but for complex applications it's more efficient to just create a global theme that defines everything. This theme can be applied to any [Control], and it and its children will automatically use it.
            Theme resources can be alternatively loaded by writing them in a .theme file, see docs for more info.
            </summary>
        </member>
        <member name="P:Godot.Theme.DefaultFont">
            <summary>
            The theme's default font.
            </summary>
        </member>
        <member name="M:Godot.Theme.SetIcon(System.String,System.String,Godot.Texture)">
            <summary>
            Sets Theme's icon [Texture] to [code]texture[/code] at [code]name[/code] in [code]type[/code].
            Does nothing if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIcon(System.String,System.String)">
            <summary>
            Returns the icon [Texture] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.HasIcon(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if icon [Texture] with [code]name[/code] is in [code]type[/code].
            Returns [code]false[/code] if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearIcon(System.String,System.String)">
            <summary>
            Clears icon at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetIconList(System.String)">
            <summary>
            Returns all of the icons as a [PoolStringArray] filled with each [Texture]'s name, for use in [method get_icon], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.SetStylebox(System.String,System.String,Godot.StyleBox)">
            <summary>
            Sets Theme's [StyleBox] to [code]stylebox[/code] at [code]name[/code] in [code]type[/code].
            Does nothing if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStylebox(System.String,System.String)">
            <summary>
            Returns the icon [StyleBox] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.HasStylebox(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if [StyleBox] with [code]name[/code] is in [code]type[/code].
            Returns [code]false[/code] if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearStylebox(System.String,System.String)">
            <summary>
            Clears [StyleBox] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxList(System.String)">
            <summary>
            Returns all of the [StyleBox]s as a [PoolStringArray] filled with each [StyleBox]'s name, for use in [method get_stylebox], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetStyleboxTypes">
            <summary>
            Returns all of the [StyleBox] types as a [PoolStringArray] filled with each [StyleBox]'s type, for use in [method get_stylebox] and/or [method get_stylebox_list], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.SetFont(System.String,System.String,Godot.Font)">
            <summary>
            Sets Theme's [Font] to [code]font[/code] at [code]name[/code] in [code]type[/code].
            Does nothing if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFont(System.String,System.String)">
            <summary>
            Returns the [Font] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.HasFont(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if [Font] with [code]name[/code] is in [code]type[/code].
            Returns [code]false[/code] if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearFont(System.String,System.String)">
            <summary>
            Clears [Font] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetFontList(System.String)">
            <summary>
            Returns all of the [Font]s as a [PoolStringArray] filled with each [Font]'s name, for use in [method get_font], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.SetColor(System.String,System.String,Godot.Color)">
            <summary>
            Sets Theme's [Color] to [code]color[/code] at [code]name[/code] in [code]type[/code].
            Does nothing if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColor(System.String,System.String)">
            <summary>
            Returns the [Color] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.HasColor(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if [Color] with [code]name[/code] is in [code]type[/code].
            Returns [code]false[/code] if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearColor(System.String,System.String)">
            <summary>
            Clears theme [Color] at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetColorList(System.String)">
            <summary>
            Returns all of the [Color]s as a [PoolStringArray] filled with each [Color]'s name, for use in [method get_color], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.SetConstant(System.String,System.String,System.Int32)">
            <summary>
            Sets Theme's constant to [code]constant[/code] at [code]name[/code] in [code]type[/code].
            Does nothing if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstant(System.String,System.String)">
            <summary>
            Returns the constant at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.HasConstant(System.String,System.String)">
            <summary>
            Returns [code]true[/code] if constant with [code]name[/code] is in [code]type[/code].
            Returns [code]false[/code] if Theme does not have [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.ClearConstant(System.String,System.String)">
            <summary>
            Clears theme constant at [code]name[/code] if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetConstantList(System.String)">
            <summary>
            Returns all of the constants as a [PoolStringArray] filled with each constant's name, for use in [method get_constant], if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.GetTypeList(System.String)">
            <summary>
            Returns all of the types in [code]type[/code] as a [PoolStringArray] for use in any of the get_* functions, if Theme has [code]type[/code].
            </summary>
        </member>
        <member name="M:Godot.Theme.CopyDefaultTheme">
            <summary>
            Sets theme values to a copy of the default theme values.
            </summary>
        </member>
        <member name="T:Godot.Thread">
            <summary>
            A unit of execution in a process. Can run methods on [Object]s simultaneously. The use of synchronization via [Mutex], [Semaphore] is advised if working with shared objects.
            </summary>
        </member>
        <member name="M:Godot.Thread.Start(Godot.Object,System.String,System.Object,System.Int32)">
            <summary>
            Starts a new [code]Thread[/code] that runs "method" on object "instance" with "userdata" passed as an argument. The "priority" of the [code]Thread[/code] can be changed by passing a PRIORITY_* enum.
            Returns OK on success, or ERR_CANT_CREATE on failure.
            </summary>
        </member>
        <member name="M:Godot.Thread.GetId">
            <summary>
            Returns the current [code]Thread[/code]s id, uniquely identifying it among all threads.
            </summary>
        </member>
        <member name="M:Godot.Thread.IsActive">
            <summary>
            Returns true if this [code]Thread[/code] is currently active. An active [code]Thread[/code] cannot start work on a new method but can be joined with [method wait_to_finish].
            </summary>
        </member>
        <member name="M:Godot.Thread.WaitToFinish">
            <summary>
            Joins the [code]Thread[/code] and waits for it to finish. Returns what the method called returned.
            </summary>
        </member>
        <member name="T:Godot.TileMap">
            <summary>
            Node for 2D tile-based maps. Tilemaps use a [TileSet] which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps.
            </summary>
        </member>
        <member name="P:Godot.TileMap.Mode">
            <summary>
            The TileMap orientation mode. Uses MODE_* constants. Default value: MODE_SQUARE.
            </summary>
        </member>
        <member name="P:Godot.TileMap.TileSet">
            <summary>
            The assigned [TileSet].
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellSize">
            <summary>
            The TileMap's cell size.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellQuadrantSize">
            <summary>
            The TileMap's quadrant size.  Optimizes drawing by batching, using chunks of this size. Default value: 16.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellCustomTransform">
            <summary>
            The custom [Transform2D] to be applied to the TileMap's cells.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellHalfOffset">
            <summary>
            Amount to offset alternating tiles. Uses HALF_OFFSET_* constants. Default value: HALF_OFFSET_DISABLED.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellTileOrigin">
            <summary>
            Position for tile origin. Uses TILE_ORIGIN_* constants. Default value: TILE_ORIGIN_TOP_LEFT.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellYSort">
            <summary>
            If [code]true[/code] the TileMap's children will be drawn in order of their Y coordinate. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TileMap.CellClipUv">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionUseKinematic">
            <summary>
            If [code]true[/code] TileMap collisions will be handled as a kinematic body. If [code]false[/code] collisions will be handled as static body. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionFriction">
            <summary>
            Friction value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 1.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionBounce">
            <summary>
            Bounce value for static body collisions (see [code]collision_use_kinematic[/code]). Default value: 0.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionLayer">
            <summary>
            The collision layer(s) for all colliders in the TileMap.
            </summary>
        </member>
        <member name="P:Godot.TileMap.CollisionMask">
            <summary>
            The collision mask(s) for all colliders in the TileMap.
            </summary>
        </member>
        <member name="P:Godot.TileMap.OccluderLightMask">
            <summary>
            The light mask assigned to all light occluders in the TileMap.  The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s).
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionLayerBit(System.Int32,System.Boolean)">
            <summary>
            Sets the given collision layer bit.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionLayerBit(System.Int32)">
            <summary>
            Returns [code]true[/code] if the given collision layer bit is set.
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCollisionMaskBit(System.Int32,System.Boolean)">
            <summary>
            Sets the given collision mask bit.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCollisionMaskBit(System.Int32)">
            <summary>
            Returns [code]true[/code] if the given collision mask bit is set.
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCell(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            Sets the tile index for the cell given by a Vector2.
            An index of [code]-1[/code] clears the cell.
            Optionally, the tile can also be flipped, transposed, or given autotile coordinates.
            &lt;param name="autotileCoord"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.TileMap.SetCellv(Godot.Vector2,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the tile index for the given cell.
            An index of [code]-1[/code] clears the cell.
            Optionally, the tile can also be flipped or transposed.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCell(System.Int32,System.Int32)">
            <summary>
            Returns the tile index of the given cell.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetCellv(Godot.Vector2)">
            <summary>
            Returns the tile index of the cell given by a Vector2.
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellXFlipped(System.Int32,System.Int32)">
            <summary>
            Returns [code]true[/code] if the given cell is flipped in the x axis.
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellYFlipped(System.Int32,System.Int32)">
            <summary>
            Returns [code]true[/code] if the given cell is flipped in the y axis.
            </summary>
        </member>
        <member name="M:Godot.TileMap.IsCellTransposed(System.Int32,System.Int32)">
            <summary>
            Returns [code]true[/code] if the given cell is transposed, i.e. the x and y axes are swapped.
            </summary>
        </member>
        <member name="M:Godot.TileMap.Clear">
            <summary>
            Clears all cells.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCells">
            <summary>
            Returns an array of all cells containing a tile from the tileset (i.e. a tile index different from [code]-1[/code]).
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedCellsById(System.Int32)">
            <summary>
            Returns an array of all cells with the given tile id.
            </summary>
        </member>
        <member name="M:Godot.TileMap.GetUsedRect">
            <summary>
            Returns a rectangle enclosing the used (non-empty) tiles of the map.
            </summary>
        </member>
        <member name="M:Godot.TileMap.MapToWorld(Godot.Vector2,System.Boolean)">
            <summary>
            Returns the global position corresponding to the given tilemap (grid-based) coordinates.
            Optionally, the tilemap's half offset can be ignored.
            </summary>
        </member>
        <member name="M:Godot.TileMap.WorldToMap(Godot.Vector2)">
            <summary>
            Returns the tilemap (grid-based) coordinatescorresponding to the given global position.
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskArea(Godot.Vector2)">
            <summary>
            Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based x and y coordinates.
            </summary>
        </member>
        <member name="M:Godot.TileMap.UpdateBitmaskRegion(System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            Applies autotiling rules to the cells in the given region (specified by grid-based x and y coordinates).
            Calling with invalid (or missing) parameters applies autotiling rules for the entire tilemap.
            &lt;param name="start"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            &lt;param name="end"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="T:Godot.TileSet">
            <summary>
            A TileSet is a library of tiles for a [TileMap]. It contains a list of tiles, each consisting of a sprite and optional collision shapes.
            Tiles are referenced by a unique integer ID.
            </summary>
        </member>
        <member name="M:Godot.TileSet._ForwardSubtileSelection(System.Int32,System.Int32,Godot.Object,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet._IsTileBound(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.CreateTile(System.Int32)">
            <summary>
            Create a new tile which will be referenced by the given ID.
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileSetBitmaskMode(System.Int32,Godot.TileSet.BitmaskMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.AutotileGetBitmaskMode(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetName(System.Int32,System.String)">
            <summary>
            Set the name of the tile, for descriptive purposes.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetName(System.Int32)">
            <summary>
            Return the name of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTexture(System.Int32,Godot.Texture)">
            <summary>
            Set the texture of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTexture(System.Int32)">
            <summary>
            Return the texture of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNormalMap(System.Int32,Godot.Texture)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNormalMap(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetMaterial(System.Int32,Godot.ShaderMaterial)">
            <summary>
            Set the material of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetMaterial(System.Int32)">
            <summary>
            Return the material of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetTextureOffset(System.Int32,Godot.Vector2)">
            <summary>
            Set the texture offset of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetTextureOffset(System.Int32)">
            <summary>
            Return the texture offset of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetRegion(System.Int32,Godot.Rect2)">
            <summary>
            Set the tile sub-region in the texture. This is common in texture atlases.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetRegion(System.Int32)">
            <summary>
            Return the tile sub-region in the texture.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShape(System.Int32,System.Int32,Godot.Shape2D)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShape(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeTransform(System.Int32,System.Int32,Godot.Transform2D)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeTransform(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapeOneWay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeOneWay(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileAddShape(System.Int32,Godot.Shape2D,Godot.Transform2D,System.Boolean,System.Nullable{Godot.Vector2})">
            <summary>
            &lt;param name="autotileCoord"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapeCount(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetShapes(System.Int32,System.Object[])">
            <summary>
            Set an array of shapes for the tile, enabling physics to collide with it.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetShapes(System.Int32)">
            <summary>
            Return the array of shapes of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygon(System.Int32,Godot.NavigationPolygon)">
            <summary>
            Set a navigation polygon for the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygon(System.Int32)">
            <summary>
            Return the navigation polygon of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetNavigationPolygonOffset(System.Int32,Godot.Vector2)">
            <summary>
            Set an offset for the tile's navigation polygon.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetNavigationPolygonOffset(System.Int32)">
            <summary>
            Return the offset of the tile's navigation polygon.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetLightOccluder(System.Int32,Godot.OccluderPolygon2D)">
            <summary>
            Set a light occluder for the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetLightOccluder(System.Int32)">
            <summary>
            Return the light occluder of the tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileSetOccluderOffset(System.Int32,Godot.Vector2)">
            <summary>
            Set an offset for the tile's light occluder.
            </summary>
        </member>
        <member name="M:Godot.TileSet.TileGetOccluderOffset(System.Int32)">
            <summary>
            Return the offset of the tile's light occluder.
            </summary>
        </member>
        <member name="M:Godot.TileSet.RemoveTile(System.Int32)">
            <summary>
            Remove the tile referenced by the given ID.
            </summary>
        </member>
        <member name="M:Godot.TileSet.Clear">
            <summary>
            Clear all tiles.
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetLastUnusedTileId">
            <summary>
            Return the ID following the last currently used ID, useful when creating a new tile.
            </summary>
        </member>
        <member name="M:Godot.TileSet.FindTileByName(System.String)">
            <summary>
            Find the first tile matching the given name.
            </summary>
        </member>
        <member name="M:Godot.TileSet.GetTilesIds">
            <summary>
            Return an array of all currently used tile IDs.
            </summary>
        </member>
        <member name="T:Godot.Timer">
            <summary>
            Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one shot" mode.
            </summary>
        </member>
        <member name="P:Godot.Timer.ProcessMode">
            <summary>
            Processing mode. Uses TIMER_PROCESS_* constants as value.
            </summary>
        </member>
        <member name="P:Godot.Timer.WaitTime">
            <summary>
            Wait time in seconds.
            </summary>
        </member>
        <member name="P:Godot.Timer.OneShot">
            <summary>
            If [code]true[/code], Timer will stop when reaching 0. If [code]false[/code], it will restart. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Timer.Autostart">
            <summary>
            If [code]true[/code], Timer will automatically start when entering the scene tree. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Timer.Paused">
            <summary>
            If [code]true[/code], the timer is paused and will not process until it is unpaused again, even if [method start] is called.
            </summary>
        </member>
        <member name="P:Godot.Timer.TimeLeft">
            <summary>
            The timer's remaining time in seconds. Returns 0 if the timer is inactive.
            </summary>
        </member>
        <member name="M:Godot.Timer.Start">
            <summary>
            Starts the timer. This also resets the remaining time to [code]wait_time[/code].
            Note: this method will not resume a paused timer. See [method set_paused].
            </summary>
        </member>
        <member name="M:Godot.Timer.Stop">
            <summary>
            Stop (cancel) the Timer.
            </summary>
        </member>
        <member name="M:Godot.Timer.IsStopped">
            <summary>
            Returns [code]true[/code] if the timer is stopped.
            </summary>
        </member>
        <member name="T:Godot.ToolButton">
            <summary>
            This is a helper class to generate a flat [Button] (see [method Button.set_flat]), creating a ToolButton is equivalent to:
            [codeblock]
            var btn = Button.new()
            btn.set_flat(true)
            [/codeblock]
            </summary>
        </member>
        <member name="T:Godot.TouchScreenButton">
            <summary>
            Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Normal">
            <summary>
            The button's texture for the normal state.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Pressed">
            <summary>
            The button's texture for the pressed state.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Bitmask">
            <summary>
            The button's bitmask.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Shape">
            <summary>
            The button's shape.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeCentered">
            <summary>
            If [code]true[/code] the button's shape is centered.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.ShapeVisible">
            <summary>
            If [code]true[/code] the button's shape is visible.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.PassbyPress">
            <summary>
            If [code]true[/code] passby presses are enabled.
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.Action">
            <summary>
            The button's action. Actions can be handled with [InputEventAction].
            </summary>
        </member>
        <member name="P:Godot.TouchScreenButton.VisibilityMode">
            <summary>
            The button's visibility mode. See [code]VISIBILITY_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.TouchScreenButton.IsPressed">
            <summary>
            Returns [code]true[/code] if this button is currently pressed.
            </summary>
        </member>
        <member name="T:Godot.Translation">
            <summary>
            Translations are resources that can be loaded/unloaded on demand. They map a string to another string.
            </summary>
        </member>
        <member name="P:Godot.Translation.Locale">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Translation.AddMessage(System.String,System.String)">
            <summary>
            Add a message for translation.
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessage(System.String)">
            <summary>
            Return a message for translation.
            </summary>
        </member>
        <member name="M:Godot.Translation.EraseMessage(System.String)">
            <summary>
            Erase a message.
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessageList">
            <summary>
            Return all the messages (keys).
            </summary>
        </member>
        <member name="M:Godot.Translation.GetMessageCount">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.SetLocale(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocale">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.GetLocaleName(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Translate(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.AddTranslation(Godot.Translation)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.RemoveTranslation(Godot.Translation)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TranslationServer.Clear">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Tree">
            <summary>
            This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.
            Trees are built via code, using [TreeItem] objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.
            [codeblock]
            func _ready():
            var tree = Tree.new()
            var root = tree.create_item()
            tree.set_hide_root(true)
            var child1 = tree.create_item(root)
            var child2 = tree.create_item(root)
            var subchild1 = tree.create_item(child1)
            subchild1.set_text(0, "Subchild1")
            [/codeblock]
            </summary>
        </member>
        <member name="P:Godot.Tree.Columns">
            <summary>
            The amount of columns.
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowReselect">
            <summary>
            If [code]true[/code] the currently selected cell may be selected again.
            </summary>
        </member>
        <member name="P:Godot.Tree.AllowRmbSelect">
            <summary>
            If [code]true[/code] a right mouse button click can select items.
            </summary>
        </member>
        <member name="P:Godot.Tree.HideFolding">
            <summary>
            If [code]true[/code] the folding arrow is hidden.
            </summary>
        </member>
        <member name="P:Godot.Tree.HideRoot">
            <summary>
            If [code]true[/code] the tree's root is hidden.
            </summary>
        </member>
        <member name="P:Godot.Tree.DropModeFlags">
            <summary>
            The drop mode as an OR combination of flags. See [code]DROP_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="P:Godot.Tree.SelectMode">
            <summary>
            Allow single or multiple selection. See the [code]SELECT_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.Tree.Clear">
            <summary>
            Clears the tree. This removes all items.
            </summary>
        </member>
        <member name="M:Godot.Tree.CreateItem(Godot.Object,System.Int32)">
            <summary>
            Create an item in the tree and add it as the last child of [code]parent[/code]. If parent is not given, it will be added as the root's last child, or it'll the be the root itself if the tree is empty.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetRoot">
            <summary>
            Returns the tree's root item.
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnMinWidth(System.Int32,System.Int32)">
            <summary>
            Set the minimum width of a column.
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnExpand(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the column will have the "Expand" flag of [Control].
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnWidth(System.Int32)">
            <summary>
            Returns the column's width in pixels.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetNextSelected(Godot.Object)">
            <summary>
            Returns the next selected item after the given one.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelected">
            <summary>
            Returns the currently selected item.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetSelectedColumn">
            <summary>
            Returns the current selection's column.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetPressedButton">
            <summary>
            Returns the last pressed button's index.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEdited">
            <summary>
            Returns the currently edited item. This is only available for custom cell mode.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetEditedColumn">
            <summary>
            Returns the column for the currently edited item. This is only available for custom cell mode.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetCustomPopupRect">
            <summary>
            Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See [method TreeItem.set_cell_mode].
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAreaRect(Godot.Object,System.Int32)">
            <summary>
            Returns the rectangle area for the specified item. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetItemAtPosition(Godot.Vector2)">
            <summary>
            Returns the tree item at the specified position (relative to the tree origin position).
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnAtPosition(Godot.Vector2)">
            <summary>
            Returns the column index under the given point.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetDropSectionAtPosition(Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Tree.EnsureCursorIsVisible">
            <summary>
            Makes the currently selected item visible. This will scroll the tree to make sure the selected item is visible.
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitlesVisible(System.Boolean)">
            <summary>
            If [code]true[/code] column titles are visible.
            </summary>
        </member>
        <member name="M:Godot.Tree.AreColumnTitlesVisible">
            <summary>
            Returns [code]true[/code] if the column titles are being shown.
            </summary>
        </member>
        <member name="M:Godot.Tree.SetColumnTitle(System.Int32,System.String)">
            <summary>
            Set the title of a column.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetColumnTitle(System.Int32)">
            <summary>
            Returns the column's title.
            </summary>
        </member>
        <member name="M:Godot.Tree.GetScroll">
            <summary>
            Returns the current scrolling position.
            </summary>
        </member>
        <member name="T:Godot.TreeItem">
            <summary>
            Control for a single item inside a [Tree]. May have child [code]TreeItem[/code]s and be styled as well as contain buttons.
            </summary>
        </member>
        <member name="P:Godot.TreeItem.Collapsed">
            <summary>
            If [code]true[/code] the TreeItem is collapsed.
            </summary>
        </member>
        <member name="P:Godot.TreeItem.DisableFolding">
            <summary>
            If [code]true[/code] folding is disabled for this TreeItem.
            </summary>
        </member>
        <member name="P:Godot.TreeItem.CustomMinimumHeight">
            <summary>
            The custom minimum height.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCellMode(System.Int32,Godot.TreeItem.TreeCellMode)">
            <summary>
            Sets the given column's cell mode to [code]mode[/code]. See [code]CELL_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCellMode(System.Int32)">
            <summary>
            Returns the column's cell mode. See [code]CELL_MODE_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetChecked(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the column [code]column[/code] is checked.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsChecked(System.Int32)">
            <summary>
            Returns [code]true[/code] if the given column is checked.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetText(System.Int32,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetText(System.Int32)">
            <summary>
            Returns the given column's text.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIcon(System.Int32,Godot.Texture)">
            <summary>
            Sets the given column's icon [Texture].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIcon(System.Int32)">
            <summary>
            Returns the given column's icon [Texture]. Error if no icon is set.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconRegion(System.Int32,Godot.Rect2)">
            <summary>
            Sets the given column's icon's texture region.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconRegion(System.Int32)">
            <summary>
            Returns the icon [Texture] region as [Rect2].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetIconMaxWidth(System.Int32,System.Int32)">
            <summary>
            Sets the given column's icon's maximum width.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetIconMaxWidth(System.Int32)">
            <summary>
            Returns the column's icon's maximum width.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetRange(System.Int32,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetRange(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetRangeConfig(System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetRangeConfig(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetMetadata(System.Int32,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetMetadata(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomDraw(System.Int32,Godot.Object,System.String)">
            <summary>
            Sets the given column's custom draw callback to [code]callback[/code] method on [code]object[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNext">
            <summary>
            Returns the next TreeItem in the tree.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrev">
            <summary>
            Returns the previous TreeItem in the tree.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetParent">
            <summary>
            Returns the parent TreeItem.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetChildren">
            <summary>
            Returns the TreeItem's child items.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetNextVisible">
            <summary>
            Returns the next visible TreeItem in the tree.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetPrevVisible">
            <summary>
            Returns the previous visible TreeItem in the tree.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.RemoveChild(Godot.Object)">
            <summary>
            Removes the child TreeItem at index [code]index[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetSelectable(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] the given column is selectable.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelectable(System.Int32)">
            <summary>
            Returns [code]true[/code] if column [code]column[/code] is selectable.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsSelected(System.Int32)">
            <summary>
            Returns [code]true[/code] if column [code]column[/code] is selected.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Select(System.Int32)">
            <summary>
            Selects the column [code]column[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.Deselect(System.Int32)">
            <summary>
            Deselects the given column.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetEditable(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] column [code]column[/code] is editable.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsEditable(System.Int32)">
            <summary>
            Returns [code]true[/code] if column [code]column[/code] is editable.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomColor(System.Int32,Godot.Color)">
            <summary>
            Sets the given column's custom color.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomColor(System.Int32)">
            <summary>
            Resets the color for the given column to default.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomBgColor(System.Int32,Godot.Color,System.Boolean)">
            <summary>
            Sets the given column's custom background color and whether to just use it as an outline.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.ClearCustomBgColor(System.Int32)">
            <summary>
            Resets the background color for the given column to default.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetCustomBgColor(System.Int32)">
            <summary>
            Returns the custom background color of column [code]column[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetCustomAsButton(System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsCustomSetAsButton(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.TreeItem.AddButton(System.Int32,Godot.Texture,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a button with [Texture] [code]button[/code] at column [code]column[/code]. The [code]button_idx[/code] index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling [code]get_buton_count()[/code] immediately after this method. Optionally, the button can be [code]disabled[/code] and have a [code]tooltip[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButtonCount(System.Int32)">
            <summary>
            Returns the number of buttons in column [code]column[/code]. May be used to get the most recently added button's index, if no index was specified.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetButton(System.Int32,System.Int32)">
            <summary>
            Returns the [Texture] of the button at index [code]button_idx[/code] in column [code]column[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetButton(System.Int32,System.Int32,Godot.Texture)">
            <summary>
            Sets the given column's button [Texture] at index [code]button_idx[/code] to [code]button[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.EraseButton(System.Int32,System.Int32)">
            <summary>
            Removes the button at index [code]button_idx[/code] in column [code]column[/code].
            </summary>
        </member>
        <member name="M:Godot.TreeItem.IsButtonDisabled(System.Int32,System.Int32)">
            <summary>
            Returns [code]true[/code] if the button at index [code]button_idx[/code] for the given column is disabled.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetExpandRight(System.Int32,System.Boolean)">
            <summary>
            If [code]true[/code] column [code]column[/code] is expanded to the right.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetExpandRight(System.Int32)">
            <summary>
            Returns [code]true[/code] if [code]expand_right[/code] is set.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTooltip(System.Int32,System.String)">
            <summary>
            Sets the given column's tooltip text.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTooltip(System.Int32)">
            <summary>
            Returns the given column's tooltip.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.SetTextAlign(System.Int32,Godot.TreeItem.TextAlign)">
            <summary>
            Sets the given column's text alignment. See [code]ALIGN_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.GetTextAlign(System.Int32)">
            <summary>
            Returns the given column's text alignment.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToTop">
            <summary>
            Moves this TreeItem to the top in the [Tree] hierarchy.
            </summary>
        </member>
        <member name="M:Godot.TreeItem.MoveToBottom">
            <summary>
            Moves this TreeItem to the bottom in the [Tree] hierarchy.
            </summary>
        </member>
        <member name="T:Godot.Tween">
            <summary>
            Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name *tween* comes from *in-betweening*, an animation technique where you specify *keyframes* and the computer interpolates the frames that appear between them.
            Here is a brief usage example that causes a 2D node to move smoothly between two positions:
            [codeblock]
            var tween = get_node("Tween")
            tween.interpolate_property($Node2D, "position",
            Vector2(0, 0), Vector2(100, 100), 1,
            Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
            tween.start()
            [/codeblock]
            Many methods require a property name, such as "position" above. You can find the correct property name by hovering over the property in the Inspector.
            Many of the methods accept [code]trans_type[/code] and [code]ease_type[/code]. The first accepts an [enum TransitionType] constant, and refers to the way the timing of the animation is handled (see [code]http://easings.net/[/code] for some examples). The second accepts an [enum EaseType] constant, and controls the where [code]trans_type[/code] is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different [enum TransitionType] constants with [enum EASE_IN_OUT], and use the one that looks best.
            </summary>
        </member>
        <member name="P:Godot.Tween.Repeat">
            <summary>
            If [code]true[/code] the tween loops.
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackProcessMode">
            <summary>
            The tween's animation process thread. See [enum TweenProcessMode]. Default value: [enum TWEEN_PROCESS_IDLE].
            </summary>
        </member>
        <member name="P:Godot.Tween.PlaybackSpeed">
            <summary>
            The tween's speed multiplier. For example, set it to [code]1.0[/code] for normal speed, [code]2.0[/code] for two times normal speed, or [code]0.5[/code] for half of the normal speed. A value of [code]0[/code] pauses the animation, but see also [method set_active] or [method stop_all] for this.
            </summary>
        </member>
        <member name="M:Godot.Tween.IsActive">
            <summary>
            Returns [code]true[/code] if any tweens are currently running. Note that this method doesn't consider tweens that have ended.
            </summary>
        </member>
        <member name="M:Godot.Tween.SetActive(System.Boolean)">
            <summary>
            Activates/deactivates the tween. See also [method stop_all] and [method resume_all].
            </summary>
        </member>
        <member name="M:Godot.Tween.Start">
            <summary>
            Starts the tween. You can define animations both before and after this.
            </summary>
        </member>
        <member name="M:Godot.Tween.Reset(Godot.Object,System.String)">
            <summary>
            Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified.
            </summary>
        </member>
        <member name="M:Godot.Tween.ResetAll">
            <summary>
            Resets all tweens to their initial values (the ones given, not those before the tween).
            </summary>
        </member>
        <member name="M:Godot.Tween.Stop(Godot.Object,System.String)">
            <summary>
            Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless [code]key[/code] is specified.
            </summary>
        </member>
        <member name="M:Godot.Tween.StopAll">
            <summary>
            Stops animating all tweens.
            </summary>
        </member>
        <member name="M:Godot.Tween.Resume(Godot.Object,System.String)">
            <summary>
            Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless [code]key[/code] is specified.
            </summary>
        </member>
        <member name="M:Godot.Tween.ResumeAll">
            <summary>
            Continues animating all stopped tweens.
            </summary>
        </member>
        <member name="M:Godot.Tween.Remove(Godot.Object,System.String)">
            <summary>
            Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless [code]key[/code] is specified.
            </summary>
        </member>
        <member name="M:Godot.Tween.RemoveAll">
            <summary>
            Stops animation and removes all tweens.
            </summary>
        </member>
        <member name="M:Godot.Tween.Seek(System.Single)">
            <summary>
            Sets the interpolation to the given [code]time[/code] in seconds.
            </summary>
        </member>
        <member name="M:Godot.Tween.Tell">
            <summary>
            Returns the current time of the tween.
            </summary>
        </member>
        <member name="M:Godot.Tween.GetRuntime">
            <summary>
            Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished.
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateProperty(Godot.Object,Godot.NodePath,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Animates [code]property[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateMethod(Godot.Object,System.String,System.Object,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Animates [code]method[/code] of [code]object[/code] from [code]initial_val[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are called with consecutive values.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.
            </summary>
        </member>
        <member name="M:Godot.Tween.InterpolateDeferredCallback(Godot.Object,System.Single,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Calls [code]callback[/code] of [code]object[/code] after [code]duration[/code] on the main thread (similar to [method Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] are arguments to be passed to the callback.
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowProperty(Godot.Object,Godot.NodePath,System.Object,Godot.Object,Godot.NodePath,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Follows [code]property[/code] of [code]object[/code] and applies it on [code]target_property[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="M:Godot.Tween.FollowMethod(Godot.Object,System.String,System.Object,Godot.Object,System.String,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Follows [code]method[/code] of [code]object[/code] and applies the returned value on [code]target_method[/code] of [code]target[/code], beginning from [code]initial_val[/code] for [code]duration[/code] seconds, [code]delay[/code] later. Methods are called with consecutive values.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingProperty(Godot.Object,Godot.NodePath,Godot.Object,Godot.NodePath,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Animates [code]property[/code] of [code]object[/code] from the current value of the [code]initial_val[/code] property of [code]initial[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="M:Godot.Tween.TargetingMethod(Godot.Object,System.String,Godot.Object,System.String,System.Object,System.Single,Godot.Tween.TransitionType,Godot.Tween.EaseType,System.Single)">
            <summary>
            Animates [code]method[/code] of [code]object[/code] from the value returned by [code]initial_method[/code] to [code]final_val[/code] for [code]duration[/code] seconds, [code]delay[/code] seconds later. Methods are animated by calling them with consecutive values.
            Use [enum TransitionType] for [code]trans_type[/code] and [enum EaseType] for [code]ease_type[/code] parameters. These values control the timing and direction of the interpolation. See the class description for more information
            </summary>
        </member>
        <member name="T:Godot.UndoRedo">
            <summary>
            Helper to manage UndoRedo in the editor or custom tools. It works by storing calls to functions in both 'do' an 'undo' lists.
            Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CreateAction(System.String,Godot.UndoRedo.MergeMode)">
            <summary>
            Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property] and [method add_undo_property].
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.CommitAction">
            <summary>
            Commit the action. All 'do' methods/properties are called/set when this function is called.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoMethod(Godot.Object,System.String,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoMethod(Godot.Object,System.String,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoProperty(Godot.Object,System.String,System.Object)">
            <summary>
            Set a property with a custom value.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoProperty(Godot.Object,System.String,System.Object)">
            <summary>
            Undo setting of a property with a custom value.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddDoReference(Godot.Object)">
            <summary>
            Add a 'do' reference that will be erased if the 'do' history is lost. This is useful mostly for new nodes created for the 'do' call. Do not use for resources.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.AddUndoReference(Godot.Object)">
            <summary>
            Add an 'undo' reference that will be erased if the 'undo' history is lost. This is useful mostly for nodes removed with the 'do' call (not the 'undo' call!).
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.ClearHistory">
            <summary>
            Clear the undo/redo history and associated references.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetCurrentActionName">
            <summary>
            Get the name of the current action.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.GetVersion">
            <summary>
            Get the version, each time a new action is committed, the version number of the UndoRedo is increased automatically.
            This is useful mostly to check if something changed from a saved version.
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Redo">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.UndoRedo.Undo">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VBoxContainer">
            <summary>
            Vertical box container. See [BoxContainer].
            </summary>
        </member>
        <member name="T:Godot.VehicleBody">
            <summary>
            This nodes implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a [CollisionShape] for the main body of your vehicle and add [VehicleWheel] nodes for the wheels. You should also add a [MeshInstance] to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the [member brake], [member engine_force], and [member steering] properties and not change the position or orientation of this node directly.
            Note that the origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the [CollisionShape] and [MeshInstance] upwards.
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.EngineForce">
            <summary>
            Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have [member VehicleWheel.set_use_as_traction] set to true and are in contact with a surface. The [member RigidBody.mass] of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration. Note that the simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.
            A negative value will result in the vehicle reversing.
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.Brake">
            <summary>
            Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the [member RigidBody.mass] of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking.
            </summary>
        </member>
        <member name="P:Godot.VehicleBody.Steering">
            <summary>
            The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have [member VehicleWheel.set_use_as_steering] set to true will automatically be rotated.
            </summary>
        </member>
        <member name="T:Godot.VehicleWheel">
            <summary>
            This node needs to be used as a child node of [VehicleBody] and simulates the behaviour of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.UseAsTraction">
            <summary>
            If true this wheel transfers engine force to the ground to propel the vehicle forward.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.UseAsSteering">
            <summary>
            If true this wheel will be turned when the car steers.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRollInfluence">
            <summary>
            This value effects the roll of your vehicle. If set to 0.0 for all wheels your vehicle will be prone to rolling over while a value of 1.0 will resist body roll.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRadius">
            <summary>
            The radius of the wheel in meters.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelRestLength">
            <summary>
            This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.WheelFrictionSlip">
            <summary>
            This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.
            It's best to set this to 1.0 when starting out.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionTravel">
            <summary>
            This is the distance the suspension can travel. As Godot measures are in meters keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car .
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionStiffness">
            <summary>
            This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.SuspensionMaxForce">
            <summary>
            The maximum force the spring can resist. This value should be higher than a quarter of the [member RigidBody.mass] of the [VehicleBody] or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3x to 4x this number.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.DampingCompression">
            <summary>
            The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car.
            </summary>
        </member>
        <member name="P:Godot.VehicleWheel.DampingRelaxation">
            <summary>
            The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the [member damping_compression] property. For a [member damping_compression] value of 0.3, try a relaxation value of 0.5
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel.IsInContact">
            <summary>
            Returns true if this wheel is in contact with a surface.
            </summary>
        </member>
        <member name="M:Godot.VehicleWheel.GetSkidinfo">
            <summary>
            Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is not skidding, 1.0 means the wheel has lost grip.
            </summary>
        </member>
        <member name="T:Godot.VideoPlayer">
            <summary>
            This control has the ability to play video streams. The only format accepted is the OGV Theora, so any other format must be converted before using in a project.
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.AudioTrack">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Stream">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.VolumeDb">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Volume">
            <summary>
            The volume of the audio track as a linear value.
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Autoplay">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Paused">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Expand">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.BufferingMsec">
            <summary>
            The amount of milliseconds to store in buffer while playing.
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.StreamPosition">
            <summary>
            The current position of the stream, in seconds.
            </summary>
        </member>
        <member name="P:Godot.VideoPlayer.Bus">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Play">
            <summary>
            Start the video playback.
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.Stop">
            <summary>
            Stop the video playback.
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.IsPlaying">
            <summary>
            Get whether or not the video is playing.
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetStreamName">
            <summary>
            Get the name of the video stream.
            </summary>
        </member>
        <member name="M:Godot.VideoPlayer.GetVideoTexture">
            <summary>
            Get the current frame of the video as a [Texture].
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.SetFile(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamTheora.GetFile">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.SetFile(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VideoStreamWebm.GetFile">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.Viewport">
            <summary>
            A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.
            Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.
            If a viewport is a child of a [Control], it will automatically take up its same rect and position, otherwise they must be set manually.
            Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.
            Also, viewports can be assigned to different screens in case the devices have multiple screens.
            Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.
            </summary>
        </member>
        <member name="P:Godot.Viewport.Arvr">
            <summary>
            If [code]true[/code] the viewport will be used in AR/VR process. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.Size">
            <summary>
            The width and height of viewport.
            </summary>
        </member>
        <member name="P:Godot.Viewport.OwnWorld">
            <summary>
            If [code]true[/code] the viewport will use [World] defined in [code]world[/code] property. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.World">
            <summary>
            The custom [World] which can be used as 3D environment source.
            </summary>
        </member>
        <member name="P:Godot.Viewport.World2d">
            <summary>
            The custom [World2D] which can be used as 2D environment source.
            </summary>
        </member>
        <member name="P:Godot.Viewport.TransparentBg">
            <summary>
            If [code]true[/code] the viewport should render its background as transparent. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.Msaa">
            <summary>
            The multisample anti-aliasing mode. Default value: [code]MSAA_DISABLED[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.Hdr">
            <summary>
            If [code]true[/code] the viewport rendering will receive benefits from High Dynamic Range algorithm. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.Disable3d">
            <summary>
            If [code]true[/code] the viewport will disable 3D rendering. For actual disabling use [code]usage[/code]. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.Usage">
            <summary>
            The rendering mode of viewport. Default value: [code]USAGE_3D[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.DebugDraw">
            <summary>
            The overlay mode for test rendered geometry in debug purposes. Default value: [code]DEBUG_DRAW_DISABLED[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetVFlip">
            <summary>
            If [code]true[/code] the result of rendering will be flipped vertically. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetClearMode">
            <summary>
            The clear mode when viewport used as a render target. Default value: [code]CLEAR_MODE_ALWAYS[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.RenderTargetUpdateMode">
            <summary>
            The update mode when viewport used as a render target. Default value: [code]UPDATE_WHEN_VISIBLE[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable2d">
            <summary>
            If [code]true[/code] the viewport will process 2D audio streams. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.AudioListenerEnable3d">
            <summary>
            If [code]true[/code] the viewport will process 3D audio streams. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.PhysicsObjectPicking">
            <summary>
            If [code]true[/code] the objects rendered by viewport become subjects of mouse picking process. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiDisableInput">
            <summary>
            If [code]true[/code] the viewport will not receive input event. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.GuiSnapControlsToPixels">
            <summary>
            If [code]true[/code] the GUI controls on the viewport will lay pixel perfectly. Default value: [code]true[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasSize">
            <summary>
            The resolution of shadow atlas. Both width and height is equal to one value.
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad0">
            <summary>
            The subdivision amount of first quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_4[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad1">
            <summary>
            The subdivision amount of second quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_4[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad2">
            <summary>
            The subdivision amount of third quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_16[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.ShadowAtlasQuad3">
            <summary>
            The subdivision amount of fourth quadrant on shadow atlas. Default value: [code]SHADOW_ATLAS_QUADRANT_SUBDIV_64[/code].
            </summary>
        </member>
        <member name="P:Godot.Viewport.CanvasTransform">
            <summary>
            The canvas transform of the viewport, useful for changing the on-screen positions of all child [CanvasItem]s. This is relative to the global canvas transform of the viewport.
            </summary>
        </member>
        <member name="P:Godot.Viewport.GlobalCanvasTransform">
            <summary>
            The global canvas transform of the viewport. The canvas transform is relative to this.
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld2d">
            <summary>
            Return the 2D world of the viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.FindWorld">
            <summary>
            Return the 3D world of the viewport, or if no such present, the one of the parent viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetFinalTransform">
            <summary>
            Get the total transform of the viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetVisibleRect">
            <summary>
            Return the final, visible rect in global screen coordinates.
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetSizeOverride(System.Boolean,System.Nullable{Godot.Vector2},System.Nullable{Godot.Vector2})">
            <summary>
            Set the size override of the viewport. If the enable parameter is true, it would use the override, otherwise it would use the default size. If the size parameter is equal to [code](-1, -1)[/code], it won't update the size.
            &lt;param name="size"&gt;If the param is null, then the default value is new Vector2(-1, -1)&lt;/param&gt;
            &lt;param name="margin"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetSizeOverride">
            <summary>
            Get the size override set with [method set_size_override].
            </summary>
        </member>
        <member name="M:Godot.Viewport.IsSizeOverrideEnabled">
            <summary>
            Get the enabled status of the size override set with [method set_size_override].
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetSizeOverrideStretch(System.Boolean)">
            <summary>
            Set whether the size override affects stretch as well.
            </summary>
        </member>
        <member name="M:Godot.Viewport.IsSizeOverrideStretchEnabled">
            <summary>
            Get the enabled status of the size stretch override set with [method set_size_override_stretch].
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetRenderInfo(Godot.Viewport.RenderInfo)">
            <summary>
            Get the specific information about the viewport from rendering pipeline.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetTexture">
            <summary>
            Get the viewport's texture, for use with various objects that you want to texture with the viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetViewportRid">
            <summary>
            Get the viewport RID from the [VisualServer].
            </summary>
        </member>
        <member name="M:Godot.Viewport.Input(Godot.InputEvent)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Viewport.UnhandledInput(Godot.InputEvent)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Viewport.UpdateWorlds">
            <summary>
            Force update of the 2D and 3D worlds.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetCamera">
            <summary>
            Return the active 3D camera.
            </summary>
        </member>
        <member name="M:Godot.Viewport.SetAttachToScreenRect(Godot.Rect2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.Viewport.GetMousePosition">
            <summary>
            Get the mouse position, relative to the viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.WarpMouse(Godot.Vector2)">
            <summary>
            Warp the mouse to a position, relative to the viewport.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiHasModalStack">
            <summary>
            Returns whether there are shown modals on-screen.
            </summary>
        </member>
        <member name="M:Godot.Viewport.GuiGetDragData">
            <summary>
            Returns the drag data from the GUI, that was previously returned by [method Control.get_drag_data].
            </summary>
        </member>
        <member name="P:Godot.ViewportContainer.Stretch">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ViewportContainer.StretchShrink">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.ViewportTexture.ViewportPath">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler">
            <summary>
            The VisibilityEnabler will disable [RigidBody] and [AnimationPlayer] nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler.PauseAnimations">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler.FreezeBodies">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisibilityEnabler2D">
            <summary>
            The VisibilityEnabler2D will disable [RigidBody2D], [AnimationPlayer], and other nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler2D itself.
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimations">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.FreezeBodies">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseParticles">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PauseAnimatedSprites">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.ProcessParent">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisibilityEnabler2D.PhysicsProcessParent">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier">
            <summary>
            The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a [Camera]'s view.
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier.Aabb">
            <summary>
            The VisibilityNotifier's bounding box.
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier.IsOnScreen">
            <summary>
            If [code]true[/code] the bounding box is on the screen.
            </summary>
        </member>
        <member name="T:Godot.VisibilityNotifier2D">
            <summary>
            The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.
            </summary>
        </member>
        <member name="P:Godot.VisibilityNotifier2D.Rect">
            <summary>
            The VisibilityNotifier2D's bounding rectangle.
            </summary>
        </member>
        <member name="M:Godot.VisibilityNotifier2D.IsOnScreen">
            <summary>
            If [code]true[/code] the bounding rectangle is on the screen.
            </summary>
        </member>
        <member name="P:Godot.VisualInstance.Layers">
            <summary>
            The render layer(s) this VisualInstance is drawn on.
            This object will only be visible for [Camera]s whose cull mask includes the render object this VisualInstance is set to.
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.SetBase(Godot.RID)">
            <summary>
            Sets the base of the VisualInstance, which changes how the engine handles the VisualInstance under the hood.
            It is recommended to only use set_base if you know what you're doing.
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetTransformedAabb">
            <summary>
            Returns the transformed [AABB] (also known as the bounding box) for this VisualInstance.
            Transformed in this case means the [AABB] plus the position, rotation, and scale of the [Spatial]s [Transform]
            </summary>
        </member>
        <member name="M:Godot.VisualInstance.GetAabb">
            <summary>
            Returns the [AABB] (also known as the bounding box) for this VisualInstance.
            </summary>
        </member>
        <member name="T:Godot.VisualScript">
            <summary>
            A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.
            [method Object.set_script] extends an existing object, if that object's class matches one of the script's base classes.
            You are most likely to use this class via the Visual Script editor or when writing plugins for it.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddFunction(System.String)">
            <summary>
            Add a function with the specified name to the VisualScript.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasFunction(System.String)">
            <summary>
            Returns whether a function exists with the specified name.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveFunction(System.String)">
            <summary>
            Remove a specific function and its nodes from the script.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameFunction(System.String,System.String)">
            <summary>
            Change the name of a function.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetFunctionScroll(System.String,Godot.Vector2)">
            <summary>
            Position the center of the screen for a function.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionScroll(System.String)">
            <summary>
            Returns the position of the center of the screen for a given function.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddNode(System.String,System.Int32,Godot.VisualScriptNode,System.Nullable{Godot.Vector2})">
            <summary>
            Add a node to a function of the VisualScript.
            &lt;param name="position"&gt;If the param is null, then the default value is new Vector2(0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveNode(System.String,System.Int32)">
            <summary>
            Remove a specific node.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetFunctionNodeId(System.String)">
            <summary>
            Returns the id of a function's entry point node.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNode(System.String,System.Int32)">
            <summary>
            Returns a node given its id and its function.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasNode(System.String,System.Int32)">
            <summary>
            Returns whether a node exists with the given id.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetNodePosition(System.String,System.Int32,Godot.Vector2)">
            <summary>
            Position a node on the screen.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetNodePosition(System.String,System.Int32)">
            <summary>
            Returns a node's position in pixels.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceConnect(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Connect two sequence ports. The execution will flow from of [code]from_node[/code]'s [code]from_output[/code] into [code]to_node[/code].
            Unlike [method data_connect], there isn't a [code]to_port[/code], since the target node can have only one sequence port.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SequenceDisconnect(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Disconnect two sequence ports previously connected with [method sequence_connect].
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasSequenceConnection(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether the specified sequence ports are connected.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataConnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Connect two data ports. The value of [code]from_node[/code]'s [code]from_port[/code] would be fed into [code]to_node[/code]'s [code]to_port[/code].
            </summary>
        </member>
        <member name="M:Godot.VisualScript.DataDisconnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Disconnect two data ports previously connected with [method data_connect].
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasDataConnection(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether the specified data ports are connected.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddVariable(System.String,System.Object,System.Boolean)">
            <summary>
            Add a variable to the VisualScript, optionally giving it a default value or marking it as exported.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasVariable(System.String)">
            <summary>
            Returns whether a variable exists with the specified name.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveVariable(System.String)">
            <summary>
            Remove a variable with the given name.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableDefaultValue(System.String,System.Object)">
            <summary>
            Change the default (initial) value of a variable.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableDefaultValue(System.String)">
            <summary>
            Returns the default (initial) value of a variable.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableInfo(System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Set a variable's info, using the same format as [method get_variable_info].
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableInfo(System.String)">
            <summary>
            Returns the info for a given variable as a dictionary. The information includes its name, type, hint and usage.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetVariableExport(System.String,System.Boolean)">
            <summary>
            Change whether a variable is exported.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.GetVariableExport(System.String)">
            <summary>
            Returns whether a variable is exported.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameVariable(System.String,System.String)">
            <summary>
            Change the name of a variable.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.AddCustomSignal(System.String)">
            <summary>
            Add a custom signal with the specified name to the VisualScript.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.HasCustomSignal(System.String)">
            <summary>
            Returns whether a signal exists with the specified name.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalAddArgument(System.String,Godot.Variant.Type,System.String,System.Int32)">
            <summary>
            Add an argument to a custom signal added with [method add_custom_signal].
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentType(System.String,System.Int32,Godot.Variant.Type)">
            <summary>
            Change the type of a custom signal's argument.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentType(System.String,System.Int32)">
            <summary>
            Get the type of a custom signal's argument.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSetArgumentName(System.String,System.Int32,System.String)">
            <summary>
            Rename a custom signal's argument.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentName(System.String,System.Int32)">
            <summary>
            Get the name of a custom signal's argument.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalRemoveArgument(System.String,System.Int32)">
            <summary>
            Remove a specific custom signal's argument.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalGetArgumentCount(System.String)">
            <summary>
            Get the count of a custom signal's arguments.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.CustomSignalSwapArgument(System.String,System.Int32,System.Int32)">
            <summary>
            Swap two of the arguments of a custom signal.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RemoveCustomSignal(System.String)">
            <summary>
            Remove a custom signal with the given name.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.RenameCustomSignal(System.String,System.String)">
            <summary>
            Change the name of a custom signal.
            </summary>
        </member>
        <member name="M:Godot.VisualScript.SetInstanceBaseType(System.String)">
            <summary>
            Set the base type of the script.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBasicTypeConstant">
            <summary>
            A Visual Script node representing a constant from base types, such as [Vector3.AXIS_X].
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.BasicType">
            <summary>
            The type to get the constant from.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBasicTypeConstant.Constant">
            <summary>
            The name of the constant to return.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptBuiltinFunc">
            <summary>
            A built-in function used inside a [VisualScript]. It is usually a math function or an utility function.
            See also [@GDScript], for the same functions in the GDScript language.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptBuiltinFunc.Function">
            <summary>
            The function to be executed.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptClassConstant">
            <summary>
            This node returns a constant from a given class, such as [@GlobalScope.TYPE_INT]. See the given class' documentation for available constants.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (variant): [code]value[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.BaseType">
            <summary>
            The constant's parent class.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptClassConstant.Constant">
            <summary>
            The constant to return. See the given class for its available constants.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptComment">
            <summary>
            A Visual Script node used to display annotations in the script, so that code may be documented.
            Comment nodes can be resized so they encompass a group of nodes.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Title">
            <summary>
            The comment node's title.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Description">
            <summary>
            The text inside the comment node.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptComment.Size">
            <summary>
            The comment node's size (in pixels).
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCondition">
            <summary>
            A Visual Script node that checks a [bool] input port. If [code]true[/code] it will exit via the “true” sequence port. If [code]false[/code] it will exit via the "false" sequence port. After exiting either, it exits via the “done” port. Sequence ports may be left disconnected.
            [b]Input Ports:[/b]
            - Sequence: [code]if (cond) is[/code]
            - Data (boolean): [code]cond[/code]
            [b]Output Ports:[/b]
            - Sequence: [code]true[/code]
            - Sequence: [code]false[/code]
            - Sequence: [code]done[/code]
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstant">
            <summary>
            This node returns a constant's value.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (variant): [code]get[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Type">
            <summary>
            The constant's type.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptConstant.Value">
            <summary>
            The constant's value.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptConstructor">
            <summary>
            A Visual Script node which calls a base type constructor. It can be used for type conversion as well.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.SetConstructorType(Godot.Variant.Type)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.GetConstructorType">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.SetConstructor(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptConstructor.GetConstructor">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptCustomNode">
            <summary>
            A custom Visual Script node which can be scripted in powerful ways.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCaption">
            <summary>
            Return the node's title.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetCategory">
            <summary>
            Return the node's category.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortCount">
            <summary>
            Return the count of input value ports.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortName(System.Int32)">
            <summary>
            Return the specified input port's name.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetInputValuePortType(System.Int32)">
            <summary>
            Return the specified input port's type. See the TYPE_* enum in [@GlobalScope].
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortCount">
            <summary>
            Return the amount of output [b]sequence[/b] ports.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputSequencePortText(System.Int32)">
            <summary>
            Return the specified [b]sequence[/b] output's name.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortCount">
            <summary>
            Return the amount of output value ports.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortName(System.Int32)">
            <summary>
            Return the specified output's name.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetOutputValuePortType(System.Int32)">
            <summary>
            Return the specified output's type. See the TYPE_* enum in [@GlobalScope].
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetText">
            <summary>
            Return the custom node's text, which is shown right next to the input [b]sequence[/b] port (if there is none, on the place that is usually taken by it).
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._GetWorkingMemorySize">
            <summary>
            Return the size of the custom node's working memory. See [method _step] for more details.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._HasInputSequencePort">
            <summary>
            Return whether the custom node has an input [b]sequence[/b] port.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptCustomNode._Step(System.Object[],System.Object[],System.Int32,System.Object[])">
            <summary>
            Execute the custom node's logic, returning the index of the output sequence port to use or a [String] when there is an error.
            The [code]inputs[/code] array contains the values of the input ports.
            [code]outputs[/code] is an array whose indices should be set to the respective outputs.
            The [code]start_mode[/code] is usually [code]START_MODE_BEGIN_SEQUENCE[/code], unless you have used the STEP_* constants.
            [code]working_mem[/code] is an array which can be used to persist information between runs of the custom node.
            When returning, you can mask the returned value with one of the STEP_* constants.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptDeconstruct">
            <summary>
            A Visual Script node which deconstructs a base type instance into its parts.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptDeconstruct.Type">
            <summary>
            The type to deconstruct.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEmitSignal">
            <summary>
            Emits a specified signal when it is executed.
            [b]Input Ports:[/b]
            - Sequence: [code]emit[/code]
            [b]Output Ports:[/b]
            - Sequence
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEmitSignal.Signal">
            <summary>
            The signal to emit.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptEngineSingleton">
            <summary>
            A Visual Script node returning a singleton from [@GlobalScope]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptEngineSingleton.Constant">
            <summary>
            The singleton's name.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.CallMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BaseType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BaseScript">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Singleton">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.BasicType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.NodePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Function">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.UseDefaultArgs">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.Validate">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptFunctionCall.RpcCallMode">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.ConnectToSignal(Godot.Object,System.String,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.Resume(System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualScriptFunctionState.IsValid">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptGlobalConstant.Constant">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptInputAction.Action">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptInputAction.Mode">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptIterator">
            <summary>
            This node steps through each item in a given input. Input can be any sequence data type, such as an [Array] or [String]. When each item has been processed, execution passed out the [code]exit[/code] Sequence port.
            [b]Input Ports:[/b]
            - Sequence: [code]for (elem) in (input)[/code]
            - Data (variant): [code]input[/code]
            [b]Output Ports:[/b]
            - Sequence: [code]each[/code]
            - Sequence: [code]exit[/code]
            - Data (variant): [code]elem[/code]
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVar">
            <summary>
            Returns a local variable's value. "Var Name" must be supplied, with an optional type.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (variant): [code]get[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.VarName">
            <summary>
            The local variable's name.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVar.Type">
            <summary>
            The local variable's type.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptLocalVarSet">
            <summary>
            Changes a local variable's value to the given input. The new value is also provided on an output Data port.
            [b]Input Ports:[/b]
            - Sequence
            - Data (variant): [code]set[/code]
            [b]Output Ports:[/b]
            - Sequence
            - Data (variant): [code]get[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.VarName">
            <summary>
            The local variable's name.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptLocalVarSet.Type">
            <summary>
            The local variable's type.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptMathConstant">
            <summary>
            Provides common math constants, such as Pi, on an output Data port.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (variant): [code]get[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptMathConstant.Constant">
            <summary>
            The math constant.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptNode">
            <summary>
            A node which is part of a [VisualScript]. Not to be confused with [Node], which is a part of a [SceneTree].
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetVisualScript">
            <summary>
            Returns the [VisualScript] instance the node is bound to.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.SetDefaultInputValue(System.Int32,System.Object)">
            <summary>
            Change the default value of a given port.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.GetDefaultInputValue(System.Int32)">
            <summary>
            Returns the default value of a given port. The default value is used when nothing is connected to the port.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptNode.PortsChangedNotify">
            <summary>
            Notify that the node's ports have changed. Usually used in conjunction with [VisualScriptCustomNode] .
            </summary>
        </member>
        <member name="T:Godot.VisualScriptOperator">
            <summary>
            [b]Input Ports:[/b]
            - Data (variant): [code]A[/code]
            - Data (variant): [code]B[/code]
            [b]Output Ports:[/b]
            - Data (variant): [code]result[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptOperator.Operator">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptOperator.Type">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptPreload">
            <summary>
            Creates a new [Resource] or loads one from the filesystem.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (object): [code]res[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPreload.Resource">
            <summary>
            The [Resource] to load.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.SetMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BaseType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BaseScript">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.BasicType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.NodePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.Property">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertyGet.Index">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.SetMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BaseType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BaseScript">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.BasicType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.NodePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.Property">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.Index">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptPropertySet.AssignOp">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptResourcePath.Path">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptReturn">
            <summary>
            Ends the execution of a function and returns control to the calling function. Optionally, it can return a [Variant] value.
            [b]Input Ports:[/b]
            - Sequence
            - Data (variant): [code]result[/code] (optional)
            [b]Output Ports:[/b]
            none
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnEnabled">
            <summary>
            If [code]true[/code] the [code]return[/code] input port is available.
            </summary>
        </member>
        <member name="P:Godot.VisualScriptReturn.ReturnType">
            <summary>
            The return value's data type.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSceneNode">
            <summary>
            A direct reference to a node.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data: [code]node[/code] (obj)
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSceneNode.NodePath">
            <summary>
            The node's path in the scene tree.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelect">
            <summary>
            Chooses between two input values based on a Boolean condition.
            [b]Input Ports:[/b]
            - Data (boolean): [code]cond[/code]
            - Data (variant): [code]a[/code]
            - Data (variant): [code]b[/code]
            [b]Output Ports:[/b]
            - Data (variant): [code]out[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSelect.Type">
            <summary>
            The input variables' type.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSelf">
            <summary>
            Provides a reference to the node running the visual script.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (object): [code]instance[/code]
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSequence">
            <summary>
            Steps through a series of one or more output Sequence ports. The [code]current[/code] data port outputs the currently executing item.
            [b]Input Ports:[/b]
            - Sequence: [code]in order[/code]
            [b]Output Ports:[/b]
            - Sequence: [code]1[/code]
            - Sequence: [code]2 - n[/code] (optional)
            - Data (int): [code]current[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptSequence.Steps">
            <summary>
            The number of steps in the sequence.
            </summary>
        </member>
        <member name="M:Godot.VisualScriptSubCall._Subcall(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptSwitch">
            <summary>
            Branches the flow based on an input's value. Use "Case Count" in the Inspector to set the number of branches and each comparison's optional type.
            [b]Input Ports:[/b]
            - Sequence: [code]'input' is[/code]
            - Data (variant): [code]=[/code]
            - Data (variant): [code]=[/code] (optional)
            - Data (variant): [code]input[/code]
            [b]Output Ports:[/b]
            - Sequence
            - Sequence (optional)
            - Sequence: [code]done[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptTypeCast.BaseType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptTypeCast.BaseScript">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableGet">
            <summary>
            Returns a variable's value. "Var Name" must be supplied, with an optional type.
            [b]Input Ports:[/b]
            none
            [b]Output Ports:[/b]
            - Data (variant): [code]value[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableGet.VarName">
            <summary>
            The variable's name.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptVariableSet">
            <summary>
            Changes a variable's value to the given input.
            [b]Input Ports:[/b]
            - Sequence
            - Data (variant): [code]set[/code]
            [b]Output Ports:[/b]
            - Sequence
            </summary>
        </member>
        <member name="P:Godot.VisualScriptVariableSet.VarName">
            <summary>
            The variable's name.
            </summary>
        </member>
        <member name="T:Godot.VisualScriptWhile">
            <summary>
            Loops while a condition is [code]true[/code]. Execution continues out the [code]exit[/code] Sequence port when the loop terminates.
            [b]Input Ports:[/b]
            - Sequence: [code]while(cond)[/code]
            - Data (bool): [code]cond[/code]
            [b]Output Ports:[/b]
            - Sequence: [code]repeat[/code]
            - Sequence: [code]exit[/code]
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYield.Mode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYield.WaitTime">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.CallMode">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.BaseType">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.NodePath">
            <summary>
            </summary>
        </member>
        <member name="P:Godot.VisualScriptYieldSignal.Signal">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VisualServer">
            <summary>
            Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.
            The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ForceSync">
            <summary>
            Syncronizes threads.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ForceDraw(System.Boolean)">
            <summary>
            Draws a frame. Same as [method draw].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Sync">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Draw(System.Boolean)">
            <summary>
            Draws a frame.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureCreate">
            <summary>
            Creates an empty texture.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureCreateFromImage(Godot.Image,System.Int32)">
            <summary>
            Creates a texture, allocates the space for an image, and fills in the image.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureAllocate(Godot.RID,System.Int32,System.Int32,Godot.Image.Format,System.Int32)">
            <summary>
            Allocates space for a texture's image or video.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetData(Godot.RID,Godot.Image,Godot.VisualServer.CubeMapSide)">
            <summary>
            Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetData(Godot.RID,Godot.VisualServer.CubeMapSide)">
            <summary>
            Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the [RID] of the image at one of the cubes sides.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetFlags(Godot.RID,System.Int32)">
            <summary>
            Sets the texture's flags. See [enum TextureFlags] for options
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetFlags(Godot.RID)">
            <summary>
            Returns the flags of a texture.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetFormat(Godot.RID)">
            <summary>
            Returns the format of the texture's image.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetTexid(Godot.RID)">
            <summary>
            Returns the opengl id of the texture's image.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetWidth(Godot.RID)">
            <summary>
            Returns the texture's width.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetHeight(Godot.RID)">
            <summary>
            Returns the texture's height.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetSizeOverride(Godot.RID,System.Int32,System.Int32)">
            <summary>
            Overwrites the texture's width and height.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetPath(Godot.RID,System.String)">
            <summary>
            Sets the texture's path.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureGetPath(Godot.RID)">
            <summary>
            Returns the texture's path.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureSetShrinkAllX2OnSetData(System.Boolean)">
            <summary>
            If [code]true[/code], sets internal processes to shrink all image data to half the size.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TextureDebugUsage">
            <summary>
            Returns a list of all the textures and their information.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.TexturesKeepOriginal(System.Boolean)">
            <summary>
            If [code]true[/code], the image will be stored in the texture's images array if overwritten.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkyCreate">
            <summary>
            Creates an empty sky.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkySetTexture(Godot.RID,Godot.RID,System.Int32)">
            <summary>
            Sets a sky's texture.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderCreate">
            <summary>
            Creates an empty shader.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderSetCode(Godot.RID,System.String)">
            <summary>
            Sets a shader's code.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetCode(Godot.RID)">
            <summary>
            Returns a shader's code.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetParamList(Godot.RID)">
            <summary>
            Returns the parameters of a shader.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderSetDefaultTextureParam(Godot.RID,System.String,Godot.RID)">
            <summary>
            Sets a shader's default texture. Overwrites the texture given by name.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ShaderGetDefaultTextureParam(Godot.RID,System.String)">
            <summary>
            Returns a default texture from a shader searched by name.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialCreate">
            <summary>
            Returns an empty material.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetShader(Godot.RID,Godot.RID)">
            <summary>
            Sets a shader material's shader.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialGetShader(Godot.RID)">
            <summary>
            Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetParam(Godot.RID,System.String,System.Object)">
            <summary>
            Sets a materials parameter.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialGetParam(Godot.RID,System.String)">
            <summary>
            Returns the value of a certain material's parameter.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetRenderPriority(Godot.RID,System.Int32)">
            <summary>
            Sets a material's render priority.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetLineWidth(Godot.RID,System.Single)">
            <summary>
            Sets a materials line width.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MaterialSetNextPass(Godot.RID,Godot.RID)">
            <summary>
            Sets an objects next material.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshCreate">
            <summary>
            Creates a new mesh.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshAddSurfaceFromArrays(Godot.RID,Godot.VisualServer.PrimitiveType,System.Object[],System.Object[],System.Int32)">
            <summary>
            Adds a surface generated from the Arrays to a mesh. See PRIMITIVE_TYPE_* constants for types.
            &lt;param name="blendShapes"&gt;If the param is null, then the default value is new object[] {}&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetBlendShapeCount(Godot.RID,System.Int32)">
            <summary>
            Sets a mesh's blend shape count.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetBlendShapeCount(Godot.RID)">
            <summary>
            Returns a mesh's blend shape count.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetBlendShapeMode(Godot.RID,Godot.VisualServer.BlendShapeMode)">
            <summary>
            Sets a mesh's blend shape mode.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetBlendShapeMode(Godot.RID)">
            <summary>
            Returns a mesh's blend shape mode.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceSetMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Sets a mesh's surface's material.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetMaterial(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's material.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrayLen(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's amount of vertices.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrayIndexLen(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's amount of indices.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArray(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's vertex buffer.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetIndexArray(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's index buffer.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetArrays(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's buffer arrays.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetBlendShapeArrays(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's arrays for blend shapes
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetFormat(Godot.RID,System.Int32)">
            <summary>
            Returns the format of a mesh's surface.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetPrimitiveType(Godot.RID,System.Int32)">
            <summary>
            Returns the primitive type of a mesh's surface.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetAabb(Godot.RID,System.Int32)">
            <summary>
            Returns a mesh's surface's aabb.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSurfaceGetSkeletonAabb(Godot.RID,System.Int32)">
            <summary>
            Returns the aabb of a mesh's surface's skeleton.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshRemoveSurface(Godot.RID,System.Int32)">
            <summary>
            Removes a mesh's surface.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetSurfaceCount(Godot.RID)">
            <summary>
            Returns a mesh's number of surfaces.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            Sets a mesh's custom aabb.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshGetCustomAabb(Godot.RID)">
            <summary>
            Returns a mesh's custom aabb.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MeshClear(Godot.RID)">
            <summary>
            Removes all surfaces from a mesh.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshAllocate(Godot.RID,System.Int32,Godot.VisualServer.MultimeshTransformFormat,Godot.VisualServer.MultimeshColorFormat)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetInstanceCount(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshSetMesh(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceSetColor(Godot.RID,System.Int32,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetMesh(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetAabb(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetTransform(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshInstanceGetColor(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshSetVisibleInstances(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MultimeshGetVisibleInstances(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateBegin(Godot.RID,Godot.VisualServer.PrimitiveType,Godot.RID)">
            <summary>
            &lt;param name="texture"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateVertex(Godot.RID,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateVertex2d(Godot.RID,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateNormal(Godot.RID,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateTangent(Godot.RID,Godot.Plane)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateColor(Godot.RID,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateUv(Godot.RID,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateUv2(Godot.RID,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateEnd(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateClear(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ImmediateGetMaterial(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonAllocate(Godot.RID,System.Int32,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonGetBoneCount(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneSetTransform(Godot.RID,System.Int32,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneGetTransform(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneSetTransform2d(Godot.RID,System.Int32,Godot.Transform2D)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SkeletonBoneGetTransform2d(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.DirectionalLightCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.OmniLightCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SpotLightCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetColor(Godot.RID,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetParam(Godot.RID,Godot.VisualServer.LightParam,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetShadow(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetProjector(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetNegative(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetCullMask(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightSetReverseCullFaceMode(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightOmniSetShadowMode(Godot.RID,Godot.VisualServer.LightOmniShadowMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightOmniSetShadowDetail(Godot.RID,Godot.VisualServer.LightOmniShadowDetail)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetShadowMode(Godot.RID,Godot.VisualServer.LightDirectionalShadowMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetBlendSplits(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightDirectionalSetShadowDepthRangeMode(Godot.RID,Godot.VisualServer.LightDirectionalShadowDepthRangeMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetUpdateMode(Godot.RID,Godot.VisualServer.ReflectionProbeUpdateMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetIntensity(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbient(Godot.RID,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbientEnergy(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetInteriorAmbientProbeContribution(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetMaxDistance(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetExtents(Godot.RID,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetOriginOffset(Godot.RID,Godot.Vector3)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetAsInterior(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetEnableBoxProjection(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetEnableShadows(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ReflectionProbeSetCullMask(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetBounds(Godot.RID,Godot.AABB)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetBounds(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetCellSize(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetCellSize(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetToCellXform(Godot.RID,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetToCellXform(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetDynamicData(Godot.RID,System.Int32[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetDynamicData(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetDynamicRange(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetDynamicRange(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetEnergy(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetEnergy(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetBias(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetBias(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetNormalBias(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetNormalBias(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetPropagation(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeGetPropagation(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetInterior(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeIsInterior(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeSetCompress(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GiProbeIsCompressed(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetBounds(Godot.RID,Godot.AABB)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetBounds(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctree(Godot.RID,System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctreeCellTransform(Godot.RID,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctreeCellTransform(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetOctreeCellSubdiv(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctreeCellSubdiv(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetOctree(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureSetEnergy(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.LightmapCaptureGetEnergy(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetEmitting(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesGetEmitting(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetAmount(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetLifetime(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetOneShot(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetPreProcessTime(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetExplosivenessRatio(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetRandomnessRatio(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetSpeedScale(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetUseLocalCoordinates(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetProcessMaterial(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetFixedFps(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetFractionalDelta(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesRestart(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawOrder(Godot.RID,Godot.VisualServer.ParticlesDrawOrder)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawPasses(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetDrawPassMesh(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesGetCurrentAabb(Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ParticlesSetEmissionTransform(Godot.RID,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetPerspective(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetOrthogonal(Godot.RID,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetCullMask(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CameraSetUseVerticalAspect(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportCreate">
            <summary>
            Creates an empty viewport.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUseArvr(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the viewport should use augmented or virtual reality technologies. See [ARVRInterface].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetSize(Godot.RID,System.Int32,System.Int32)">
            <summary>
            Sets the viewport's width and height.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetActive(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code], sets the viewport active, else sets it inactive.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetParentViewport(Godot.RID,Godot.RID)">
            <summary>
            Sets the viewport's parent to another viewport.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachToScreen(Godot.RID,System.Nullable{Godot.Rect2},System.Int32)">
            <summary>
            Attaches a viewport to a screen.
            &lt;param name="rect"&gt;If the param is null, then the default value is new Rect2(0, 0, 0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportDetach(Godot.RID)">
            <summary>
            Detaches the viewport from the screen.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUpdateMode(Godot.RID,Godot.VisualServer.ViewportUpdateMode)">
            <summary>
            Sets when the viewport should be updated. See VIEWPORT_UPDATE_MODE_* constants for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetVflip(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the viewport's rendering should be flipped vertically.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetClearMode(Godot.RID,Godot.VisualServer.ViewportClearMode)">
            <summary>
            Sets the clear mode of a viewport. See VIEWPORT_CLEAR_MODE_* constants for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportGetTexture(Godot.RID)">
            <summary>
            Returns the viewport's last rendered frame.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHideScenario(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHideCanvas(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the viewport's canvas should not be rendered.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDisableEnvironment(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] rendering of a viewport's environment should be disabled.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDisable3d(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] a viewport's 3D rendering should be disabled.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachCamera(Godot.RID,Godot.RID)">
            <summary>
            Sets a viewport's camera.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetScenario(Godot.RID,Godot.RID)">
            <summary>
            Sets a viewport's scenario.
            The scenario contains information about the [enum ScenarioDebugMode], environment information, reflection atlas etc.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportAttachCanvas(Godot.RID,Godot.RID)">
            <summary>
            Sets a viewport's canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportRemoveCanvas(Godot.RID,Godot.RID)">
            <summary>
            Detaches a viewport from a canvas and vice versa.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetCanvasTransform(Godot.RID,Godot.RID,Godot.Transform2D)">
            <summary>
            Sets the transformation of a viewport's canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetTransparentBackground(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the viewport should render its background as transparent.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetGlobalCanvasTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Sets the viewport's global transformation matrix.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetCanvasLayer(Godot.RID,Godot.RID,System.Int32)">
            <summary>
            Sets the renderlayer for a viewport's canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetShadowAtlasSize(Godot.RID,System.Int32)">
            <summary>
            Sets the size of the shadow atlas's images.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetShadowAtlasQuadrantSubdivision(Godot.RID,System.Int32,System.Int32)">
            <summary>
            Sets the shadow atlas quadrant's subdivision.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetMsaa(Godot.RID,Godot.VisualServer.ViewportMSAA)">
            <summary>
            Sets the anti-aliasing mode. see [enum ViewportMSAA] for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetHdr(Godot.RID,System.Boolean)">
            <summary>
            If [code]true[/code] the viewport should render to hdr.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetUsage(Godot.RID,Godot.VisualServer.ViewportUsage)">
            <summary>
            Sets what should be rendered in the viewport. See VIEWPORT_USAGE_* constants for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportGetRenderInfo(Godot.RID,Godot.VisualServer.ViewportRenderInfo)">
            <summary>
            Returns a viewport's render info. for options see VIEWPORT_RENDER_INFO* constants.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ViewportSetDebugDraw(Godot.RID,Godot.VisualServer.ViewportDebugDraw)">
            <summary>
            Sets the debug draw mode of a viewport. See VIEWPORT_DEBUG_DRAW_* constants for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBackground(Godot.RID,Godot.VisualServer.EnvironmentBG)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSky(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSkyCustomFov(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBgColor(Godot.RID,Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetBgEnergy(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetCanvasMaxLayer(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetAmbientLight(Godot.RID,Godot.Color,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetDofBlurNear(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentDOFBlurQuality)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetDofBlurFar(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentDOFBlurQuality)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetGlow(Godot.RID,System.Boolean,System.Int32,System.Single,System.Single,System.Single,Godot.VisualServer.EnvironmentGlowBlendMode,System.Single,System.Single,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetTonemap(Godot.RID,Godot.VisualServer.EnvironmentToneMapper,System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetAdjustment(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSsr(Godot.RID,System.Boolean,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetSsao(Godot.RID,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Godot.Color,Godot.VisualServer.EnvironmentSSAOQuality,Godot.VisualServer.EnvironmentSSAOBlur,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFog(Godot.RID,System.Boolean,Godot.Color,Godot.Color,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFogDepth(Godot.RID,System.Boolean,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.EnvironmentSetFogHeight(Godot.RID,System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetDebug(Godot.RID,Godot.VisualServer.ScenarioDebugMode)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetEnvironment(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetReflectionAtlasSize(Godot.RID,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.ScenarioSetFallbackEnvironment(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceCreate2(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceCreate">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetBase(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetScenario(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetLayerMask(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetTransform(Godot.RID,Godot.Transform)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceAttachObjectInstanceId(Godot.RID,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetBlendShapeWeight(Godot.RID,System.Int32,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetSurfaceMaterial(Godot.RID,System.Int32,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetVisible(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetUseLightmap(Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetCustomAabb(Godot.RID,Godot.AABB)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceAttachSkeleton(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetExterior(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceSetExtraVisibilityMargin(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetFlag(Godot.RID,Godot.VisualServer.InstanceFlags,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetCastShadowsSetting(Godot.RID,Godot.VisualServer.ShadowCastingSetting)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetMaterialOverride(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetDrawRange(Godot.RID,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstanceGeometrySetAsInstanceLod(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullAabb(Godot.AABB,Godot.RID)">
            <summary>
            &lt;param name="scenario"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullRay(Godot.Vector3,Godot.Vector3,Godot.RID)">
            <summary>
            &lt;param name="scenario"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.InstancesCullConvex(System.Object[],Godot.RID)">
            <summary>
            &lt;param name="scenario"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasCreate">
            <summary>
            Creates a canvas and returns the assigned [RID].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasSetItemMirroring(Godot.RID,Godot.RID,Godot.Vector2)">
            <summary>
            A copy of the canvas item will be drawn with a local offset of the mirroring [Vector2].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasSetModulate(Godot.RID,Godot.Color)">
            <summary>
            Modulates all colors in the given canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemCreate">
            <summary>
            Creates a new [CanvasItem] and returns its [RID].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetParent(Godot.RID,Godot.RID)">
            <summary>
            Sets the parent for the [CanvasItem].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetVisible(Godot.RID,System.Boolean)">
            <summary>
            Sets if the canvas item (including its children) is visible.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetLightMask(Godot.RID,System.Int32)">
            <summary>
            The light mask. See [LightOccluder2D] for more information on light masks.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Sets the [CanvasItem]'s [Transform2D].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetClip(Godot.RID,System.Boolean)">
            <summary>
            Sets clipping for the [CanvasItem].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDistanceFieldMode(Godot.RID,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetCustomRect(Godot.RID,System.Boolean,System.Nullable{Godot.Rect2})">
            <summary>
            Defines a custom drawing rectangle for the [CanvasItem].
            &lt;param name="rect"&gt;If the param is null, then the default value is new Rect2(0, 0, 0, 0)&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetModulate(Godot.RID,Godot.Color)">
            <summary>
            Sets the color that modulates the [CanvasItem] and its children.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetSelfModulate(Godot.RID,Godot.Color)">
            <summary>
            Sets the color that modulates the [CanvasItem] without children.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDrawBehindParent(Godot.RID,System.Boolean)">
            <summary>
            Sets [CanvasItem] to be drawn behind its parent.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddLine(Godot.RID,Godot.Vector2,Godot.Vector2,Godot.Color,System.Single,System.Boolean)">
            <summary>
            Adds a line command to the [CanvasItem]'s draw commands.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPolyline(Godot.RID,Godot.Vector2[],Godot.Color[],System.Single,System.Boolean)">
            <summary>
            Adds a polyline, which is a line from multiple points with a width, to the [CanvasItem]'s draw commands.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddRect(Godot.RID,Godot.Rect2,Godot.Color)">
            <summary>
            Adds a rectangle to the [CanvasItem]'s draw commands.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddCircle(Godot.RID,Godot.Vector2,System.Single,Godot.Color)">
            <summary>
            Adds a circle command to the [CanvasItem]'s draw commands.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTextureRect(Godot.RID,Godot.Rect2,Godot.RID,System.Boolean,System.Nullable{Godot.Color},System.Boolean,Godot.RID)">
            <summary>
            Adds a textured rect to the [CanvasItem]'s draw commands.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTextureRectRegion(Godot.RID,Godot.Rect2,Godot.RID,Godot.Rect2,System.Nullable{Godot.Color},System.Boolean,Godot.RID,System.Boolean)">
            <summary>
            Adds a texture rect with region setting to the [CanvasItem]'s draw commands.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddNinePatch(Godot.RID,Godot.Rect2,Godot.Rect2,Godot.RID,Godot.Vector2,Godot.Vector2,Godot.VisualServer.NinePatchAxisMode,Godot.VisualServer.NinePatchAxisMode,System.Boolean,System.Nullable{Godot.Color},Godot.RID)">
            <summary>
            Adds a nine patch image to the [CanvasItem]'s draw commands.
            See [NinePatchRect] for more explanation.
            &lt;param name="modulate"&gt;If the param is null, then the default value is new Color(1, 1, 1, 1)&lt;/param&gt;
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPrimitive(Godot.RID,Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.RID,System.Single,Godot.RID)">
            <summary>
            Adds a primitive to the [CanvasItem]'s draw commands.
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddPolygon(Godot.RID,Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.RID,Godot.RID,System.Boolean)">
            <summary>
            Adds a polygon to the [CanvasItem]'s draw commands.
            &lt;param name="uvs"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            &lt;param name="texture"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddTriangleArray(Godot.RID,System.Int32[],Godot.Vector2[],Godot.Color[],Godot.Vector2[],Godot.RID,System.Int32,Godot.RID)">
            <summary>
            Adds a triangle array to the [CanvasItem]'s draw commands.
            &lt;param name="uvs"&gt;If the param is null, then the default value is new Vector2[] {}&lt;/param&gt;
            &lt;param name="texture"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            &lt;param name="normalMap"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddMesh(Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            Adds a [Mesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
            &lt;param name="skeleton"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddMultimesh(Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            Adds a [MultiMesh] to the [CanvasItem]'s draw commands. Only affects its aabb at the moment.
            &lt;param name="skeleton"&gt;If the param is null, then the default value is new RID()&lt;/param&gt;
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddParticles(Godot.RID,Godot.RID,Godot.RID,Godot.RID,System.Int32,System.Int32)">
            <summary>
            Adds a particles system to the [CanvasItem]'s draw commands.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Adds a [Transform2D] command to the [CanvasItem]'s draw commands.
            This sets the extra_matrix uniform when executed. This affects the later commands of the canvas item.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemAddClipIgnore(Godot.RID,System.Boolean)">
            <summary>
            If ignore is [code]true[/code], the VisualServer does not perform clipping.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetSortChildrenByY(Godot.RID,System.Boolean)">
            <summary>
            Sets if [CanvasItem]'s children should be sorted by y-position.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetZIndex(Godot.RID,System.Int32)">
            <summary>
            Sets the [CanvasItem]'s z-index, i.e. its draw order (lower indexes are drawn first).
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetZAsRelativeToParent(Godot.RID,System.Boolean)">
            <summary>
            If this is enabled, the z-index of the parent will be added to the children's z-index.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetCopyToBackbuffer(Godot.RID,System.Boolean,Godot.Rect2)">
            <summary>
            Sets the [CanvasItem] to copy a rect to the backbuffer.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemClear(Godot.RID)">
            <summary>
            Clears the [CanvasItem] and removes all commands in it.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetDrawIndex(Godot.RID,System.Int32)">
            <summary>
            Sets the index for the [CanvasItem].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetMaterial(Godot.RID,Godot.RID)">
            <summary>
            Sets a new material to the [CanvasItem].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasItemSetUseParentMaterial(Godot.RID,System.Boolean)">
            <summary>
            Sets if the [CanvasItem] uses its parent's material.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightCreate">
            <summary>
            Creates a canvas light.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            Attaches the canvas light to the canvas. Removes it from its previous canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            Enables or disables a canvas light.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetScale(Godot.RID,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Sets the canvas light's [Transform2D].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTexture(Godot.RID,Godot.RID)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetTextureOffset(Godot.RID,Godot.Vector2)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetColor(Godot.RID,Godot.Color)">
            <summary>
            Sets the color for a light.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetHeight(Godot.RID,System.Single)">
            <summary>
            Sets a canvas light's height.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetEnergy(Godot.RID,System.Single)">
            <summary>
            Sets a canvas light's energy.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetZRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetLayerRange(Godot.RID,System.Int32,System.Int32)">
            <summary>
            The layer range that gets rendered with this light.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetItemCullMask(Godot.RID,System.Int32)">
            <summary>
            The light mask. See [LightOccluder2D] for more information on light masks
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetItemShadowCullMask(Godot.RID,System.Int32)">
            <summary>
            The shadow mask. binary about which layers this canvas light affects which canvas item's shadows. See [LightOccluder2D] for more information on light masks.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetMode(Godot.RID,Godot.VisualServer.CanvasLightMode)">
            <summary>
            The mode of the light, see CANVAS_LIGHT_MODE_* constants.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowEnabled(Godot.RID,System.Boolean)">
            <summary>
            Enables or disables the canvas light's shadow.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowBufferSize(Godot.RID,System.Int32)">
            <summary>
            Sets the width of the shadow buffer, size gets scaled to the next power of two for this.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowGradientLength(Godot.RID,System.Single)">
            <summary>
            Sets the length of the shadow's gradient.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowFilter(Godot.RID,Godot.VisualServer.CanvasLightShadowFilter)">
            <summary>
            Sets the canvas light's shadow's filter, see CANVAS_LIGHT_SHADOW_FILTER_* constants.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowColor(Godot.RID,Godot.Color)">
            <summary>
            Sets the color of the canvas light's shadow.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightSetShadowSmooth(Godot.RID,System.Single)">
            <summary>
            Smoothens the shadow. The lower, the more smooth.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderCreate">
            <summary>
            Creates a light occluder.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderAttachToCanvas(Godot.RID,Godot.RID)">
            <summary>
            Attaches a light occluder to the canvas. Removes it from its previous canvas.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetEnabled(Godot.RID,System.Boolean)">
            <summary>
            Enables or disables light occluder.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetPolygon(Godot.RID,Godot.RID)">
            <summary>
            Sets a light occluder's polygon.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetTransform(Godot.RID,Godot.Transform2D)">
            <summary>
            Sets a light occluder's [Transform2D].
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasLightOccluderSetLightMask(Godot.RID,System.Int32)">
            <summary>
            The light mask. See [LightOccluder2D] for more information on light masks
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonCreate">
            <summary>
            Creates a new light occluder polygon.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetShape(Godot.RID,Godot.Vector2[],System.Boolean)">
            <summary>
            Sets the shape of the occluder polygon.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetShapeAsLines(Godot.RID,Godot.Vector2[])">
            <summary>
            Sets the shape of the occluder polygon as lines.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.CanvasOccluderPolygonSetCullMode(Godot.RID,Godot.VisualServer.CanvasOccluderPolygonCullMode)">
            <summary>
            Sets an occluder polygons cull mode. See CANVAS_OCCLUDER_POLYGON_CULL_MODE_* constants.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.BlackBarsSetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets margin size, where black bars (or images, if [method black_bars_set_images] was used) are rendered.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.BlackBarsSetImages(Godot.RID,Godot.RID,Godot.RID,Godot.RID)">
            <summary>
            Sets images to be rendered in the window margin.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.FreeRid(Godot.RID)">
            <summary>
            Tries to free an object in the VisualServer.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.RequestFrameDrawnCallback(Godot.Object,System.String,System.Object)">
            <summary>
            Schedules a callback to the corresponding named 'method' on 'where' after a frame has been drawn.
            The callback method must use only 1 argument which will be called with 'userdata'.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasChanged">
            <summary>
            Returns [code]true[/code] if changes have been made to the VisualServer's data. [method draw] is usually called if this happens.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Init">
            <summary>
            Initializes the visual server.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.Finish">
            <summary>
            Removes buffers and clears testcubes.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetRenderInfo(Godot.VisualServer.RenderInfo)">
            <summary>
            Returns a certain information, see RENDER_INFO_* for options.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetTestCube">
            <summary>
            Returns the id of the test cube. Creates one if none exists.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetTestTexture">
            <summary>
            Returns the id of the test texture. Creates one if none exists.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.GetWhiteTexture">
            <summary>
            Returns the id of a white texture. Creates one if none exists.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.MakeSphereMesh(System.Int32,System.Int32,System.Single)">
            <summary>
            Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetBootImage(Godot.Image,Godot.Color,System.Boolean)">
            <summary>
            Sets a boot image. The color defines the background color and if scale is [code]true[/code], the image will be scaled to fit the screen size.
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetDefaultClearColor(Godot.Color)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasFeature(Godot.VisualServer.Features)">
            <summary>
            </summary>
        </member>
        <member name="M:Godot.VisualServer.HasOsFeature(System.String)">
            <summary>
            Returns true, if the OS supports a certain feature. Features might be s3tc, etc, etc2 and pvrtc,
            </summary>
        </member>
        <member name="M:Godot.VisualServer.SetDebugGenerateWireframes(System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="T:Godot.VSeparator">
            <summary>
            Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).
            </summary>
        </member>
        <member name="T:Godot.VSlider">
            <summary>
            Vertical slider. See [Slider]. This one goes from left (min) to right (max).
            </summary>
        </member>
        <member name="T:Godot.VSplitContainer">
            <summary>
            Vertical split container. See [SplitContainer]. This goes from left to right.
            </summary>
        </member>
        <member name="T:Godot.WeakRef">
            <summary>
            A weakref can hold a [Reference], without contributing to the reference counter. A weakref can be created from an [Object] using [method @GDScript.weakref]. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released.
            </summary>
        </member>
        <member name="M:Godot.WeakRef.GetRef">
            <summary>
            Returns the [Object] this weakref is referring to.
            </summary>
        </member>
        <member name="T:Godot.WindowDialog">
            <summary>
            Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel [Control] that draws a window decoration and allows motion and resizing.
            </summary>
        </member>
        <member name="P:Godot.WindowDialog.WindowTitle">
            <summary>
            The text displayed in the window's title bar. Default value: "Save a File".
            </summary>
        </member>
        <member name="P:Godot.WindowDialog.Resizable">
            <summary>
            If [code]true[/code] the user can resize the window. Default value: [code]false[/code].
            </summary>
        </member>
        <member name="M:Godot.WindowDialog.GetCloseButton">
            <summary>
            Return the close [TextureButton].
            </summary>
        </member>
        <member name="T:Godot.World">
            <summary>
            Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world.
            </summary>
        </member>
        <member name="P:Godot.World.Environment">
            <summary>
            The World's [Environment].
            </summary>
        </member>
        <member name="P:Godot.World.FallbackEnvironment">
            <summary>
            The World's fallback_environment will be used if the World's [Environment] fails or is missing.
            </summary>
        </member>
        <member name="P:Godot.World.Space">
            <summary>
            The World's physics space.
            </summary>
        </member>
        <member name="P:Godot.World.Scenario">
            <summary>
            The World's visual scenario.
            </summary>
        </member>
        <member name="P:Godot.World.DirectSpaceState">
            <summary>
            The World's physics direct space state, used for making various queries. Might be used only during [code]_physics_process[/code].
            </summary>
        </member>
        <member name="T:Godot.World2D">
            <summary>
            Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world.
            </summary>
        </member>
        <member name="P:Godot.World2D.Canvas">
            <summary>
            The [RID] of this world's canvas resource. Used by the [VisualServer] for 2D drawing.
            </summary>
        </member>
        <member name="P:Godot.World2D.Space">
            <summary>
            The [RID] of this world's physics space resource. Used by the [Physics2DServer] for 2D physics, treating it as both a space and an area.
            </summary>
        </member>
        <member name="P:Godot.World2D.DirectSpaceState">
            <summary>
            The state of this world's physics space. This allows arbitrary querying for collision.
            </summary>
        </member>
        <member name="T:Godot.WorldEnvironment">
            <summary>
            The [code]WorldEnvironment[/code] node is used to configure the default [Environment] for the scene.
            The parameters defined in the [code]WorldEnvironment[/code] can be overridden by an [Environment] node set on the current [Camera]. Additionally, only one [code]WorldEnvironment[/code] may be instanced in a given scene at a time.
            The [code]WorldEnvironment[/code] allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.
            </summary>
        </member>
        <member name="P:Godot.WorldEnvironment.Environment">
            <summary>
            The [Environment] resource used by this [code]WorldEnvironment[/code], defining the default properties.
            </summary>
        </member>
        <member name="T:Godot.XMLParser">
            <summary>
            This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low level so it can be applied to any possible schema.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Read">
            <summary>
            Read the next node of the file. This returns an error code.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeType">
            <summary>
            Get the type of the current node. Compare with [code]NODE_*[/code] constants.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeName">
            <summary>
            Get the name of the current element node. This will raise an error if the current node type is not [code]NODE_ELEMENT[/code] nor [code]NODE_ELEMENT_END[/code]
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeData">
            <summary>
            Get the contents of a text node. This will raise an error in any other type of node.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNodeOffset">
            <summary>
            Get the byte offset of the current node since the beginning of the file or buffer.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeCount">
            <summary>
            Get the amount of attributes in the current element.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeName(System.Int32)">
            <summary>
            Get the name of the attribute specified by the index in [code]idx[/code] argument.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetAttributeValue(System.Int32)">
            <summary>
            Get the value of the attribute specified by the index in [code]idx[/code] argument.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.HasAttribute(System.String)">
            <summary>
            Check whether or not the current element has a certain attribute.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValue(System.String)">
            <summary>
            Get the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetNamedAttributeValueSafe(System.String)">
            <summary>
            Get the value of a certain attribute of the current element by name. This will return an empty [String] if the attribute is not found.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.IsEmpty">
            <summary>
            Check whether the current element is empty (this only works for completely empty tags, e.g. &lt;element \&gt;).
            </summary>
        </member>
        <member name="M:Godot.XMLParser.GetCurrentLine">
            <summary>
            Get the current line in the parsed file (currently not implemented).
            </summary>
        </member>
        <member name="M:Godot.XMLParser.SkipSection">
            <summary>
            Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Seek(System.Int32)">
            <summary>
            Move the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.Open(System.String)">
            <summary>
            Open a XML file for parsing. This returns an error code.
            </summary>
        </member>
        <member name="M:Godot.XMLParser.OpenBuffer(System.Byte[])">
            <summary>
            Open a XML raw buffer for parsing. This returns an error code.
            </summary>
        </member>
        <member name="T:Godot.YSort">
            <summary>
            Sort all child nodes based on their Y positions. The child node must inherit from [CanvasItem] for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.
            </summary>
        </member>
        <member name="P:Godot.YSort.SortEnabled">
            <summary>
            </summary>
        </member>
    </members>
</doc>
